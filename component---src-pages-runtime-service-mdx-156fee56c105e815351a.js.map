{"version":3,"file":"component---src-pages-runtime-service-mdx-156fee56c105e815351a.js","mappings":"sQAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,IAACR,EAASS,OAAAC,OAAA,GAAKX,EAAiBM,EAAK,CAAED,WAAYA,EAAYO,QAAQ,eAO5EH,EAAAA,EAAAA,IAAA,wCAAkCA,EAAAA,EAAAA,IAAA,KAAGI,WAAW,IAC5C,KAAQ,uFAAqF,0BAC9D,oGACnCJ,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,2CACnBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,4CACnBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,iFAErBJ,EAAAA,EAAAA,IAAA,2HAAqHA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,sBAAoC,mDAAmDJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,gBAA8B,KAAKJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,IAC7S,KAAQ,8CAA4C,QACvC,MACjBJ,EAAAA,EAAAA,IAAA,oCACAA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,gDAErBJ,EAAAA,EAAAA,IAAA,6DACAA,EAAAA,EAAAA,IAAA,qRAA+QA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,WAAyB,0DAClUJ,EAAAA,EAAAA,IAAA,mKACAA,EAAAA,EAAAA,IAAA,wEACAA,EAAAA,EAAAA,IAAA,mCAA6BA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,cAA4B,2UACnFJ,EAAAA,EAAAA,IAAA,mFAA6EA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,cAA4B,oGACnIJ,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMI,WAAW,MAClB,UAAa,mBAAiB,uNAYlCJ,EAAAA,EAAAA,IAAA,oCAA8BA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,cAA4B,sCACpFJ,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMI,WAAW,MAClB,UAAa,mBAAiB,sSAWlCJ,EAAAA,EAAAA,IAAA,iBAAWA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,qBAAmC,qKAAqKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,OAAqB,0BAA0BJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,yBAAuC,SAASJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,mBAAiC,gBAC3bJ,EAAAA,EAAAA,IAAA,sEACAA,EAAAA,EAAAA,IAAA,oXACAA,EAAAA,EAAAA,IAAA,oEACAA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,8EAClBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,OAAKI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,QAAMI,WAAW,OAAK,gDAG7CJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,OAAKI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,QAAMI,WAAW,OAAK,wGAKjDJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,8DAClBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,sDAAoE,MACjHJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,qHAEpBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,oCAAkD,QAAQJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,2CAAyD,MAC1LJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,0KAIxBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,4BAA6BJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,0BAAwC,4BAA4BJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,mCAAiD,4LAA4LJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,qBAAmC,WACjdJ,EAAAA,EAAAA,IAAA,OAAKI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,QAAMI,WAAW,MAClC,UAAa,iBAAe,oXAehCJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,uCAClBJ,EAAAA,EAAAA,IAAA,OAAKI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,QAAMI,WAAW,OAAK,uCAG7CJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,gCAAiCJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,sDAAoE,wCAAwCJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,UAAwB,SAASJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,kBAAgC,8JAA8JJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,SAAuB,6HAC7fJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,OAAKI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,QAAMI,WAAW,OAAK,wIAG7CJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,oFAGvBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,MAAI,sCAClBJ,EAAAA,EAAAA,IAAA,OAAKI,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,QAAMI,WAAW,MAClC,UAAa,mBAAiB,kQAWtCJ,EAAAA,EAAAA,IAAA,6BACAA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,yEACjBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,uJAGvBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,uCACjBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,0LAIzBJ,EAAAA,EAAAA,IAAA,wEACAA,EAAAA,EAAAA,IAAA,gCAA0BA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,2CAAyD,yCAAyCJ,EAAAA,EAAAA,IAAA,KAAGI,WAAW,IAChK,KAAQ,kDAAgD,kDACD,uBAC3DJ,EAAAA,EAAAA,IAAA,iGAA2FA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,YAA0B,gCAC/IJ,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMI,WAAW,MAClB,UAAa,mBAAiB,0JAMlCJ,EAAAA,EAAAA,IAAA,0BAAoBA,EAAAA,EAAAA,IAAA,cAAYI,WAAW,KAAG,UAAwB,mKACtEJ,EAAAA,EAAAA,IAAA,uEACAA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMI,WAAW,MAClB,UAAa,mBAAiB,kEAIlCJ,EAAAA,EAAAA,IAAA,iCACAA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMI,WAAW,MAClB,UAAa,iBAAe,oTAehCJ,EAAAA,EAAAA,IAAA,iEACAA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,+EAAgFJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,oBAAkC,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,YAA0B,MAC5NJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,kEAAmEJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,kBAAgC,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,OAAqB,MACxMJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,4DAA6DJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,eAA6B,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,WAAyB,MACnMJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,gCAAiCJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,UAAwB,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,2BAAyC,MAClLJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,uBAAqC,uEAAuEJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,iBAA+B,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,uBAAqC,MAC1RJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,2DAA4DJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,eAA6B,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,YAA0B,MACnMJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,iCAAkCJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,kBAAgC,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,OAAqB,QAG3KJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,8DAA+DJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,qBAAmC,OAAOJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,MAAoB,OAExMJ,EAAAA,EAAAA,IAAA,gBAASA,EAAAA,EAAAA,IAAA,eAAS,kEAChBA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,eAA6B,4EAA4EJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,MAAI,SAAe,KAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,oBAAkC,2BAA2BJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,YAA0B,QAAQJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,UAAwB,sBAAsBJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,wCAAsD,+DAC9eJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,oBAAkC,sFAAsFJ,EAAAA,EAAAA,IAAA,UAAQI,WAAW,MAAI,OAAiB,+CAA+CJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,eAA6B,kDAAkDJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,6BAA2C,UAAUJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,sBAAoC,4EAA4EJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,oBAAkC,eAAeJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,yEAAuF,+DACjwBJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,eAA6B,6GAA6GJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,mGACpNJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,qBAAmC,qFAAqFJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,eAA6B,QAAQJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,UAAwB,MAC1RJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,kBAAgC,8IAC/EJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,kBAAgC,4KAC/EJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,UAAwB,2CACvEJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,iBAA+B,yBAAyBJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,UAAwB,MAC1JJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,QAAsB,iCACnEJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OACbJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,aAA2B,2CAC1EJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,QAAsB,iDACrEJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,SAAuB,8BACtEJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,OAAqB,+CACpEJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,YAA0B,6EACzEJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,iBAA+B,8CAA8CJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,4DACvJJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,aAA2B,+CAA+CJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,YAA0B,+DAA+DJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,4DACxQJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,kBAAgC,wEAC/EJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,gBAA8B,wBAAwBJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,iBAA+B,wCAC/JJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,gBAA8B,4EAC7EJ,EAAAA,EAAAA,IAAA,MAAII,WAAW,OAAKJ,EAAAA,EAAAA,IAAA,cAAYI,WAAW,MAAI,WAAyB,+CAOpF,CAEAV,EAAWW,gBAAiB,C","sources":["webpack://st4sd-overview/./src/pages/runtime-service.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/travis/build/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <p>{`The ST4SD runtime service (`}<a parentName=\"p\" {...{\n        \"href\": \"/overview/api-docs/openapi/st4sd-runtime-service/st4sd-runtime-service.openapi.html\"\n      }}>{`swagger available here`}</a>{`) supports adding virtual experiment entries to a catalog and interacting with them, including:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`launching virtual experiment instances`}</li>\n      <li parentName=\"ol\">{`monitoring virtual experiment instances`}</li>\n      <li parentName=\"ol\">{`downloading outputs and measured properties of virtual experiment instances`}</li>\n    </ol>\n    <p>{`ST4SD provides a python client for the ST4SD runtime service REST-API. The python client is currently part of `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{`. You can find instructions for installing the `}<inlineCode parentName=\"p\">{`local client`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/installation#set-up-local-client\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`The FAQ below assumes:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`you have already installed a local client.`}</li>\n    </ol>\n    <h2>{`How do I connect to the ST4SD runtime service?`}</h2>\n    <p>{`First, you need to get the URL to the ST4SD runtime service endpoint. Ask the administrator of the ST4SD instance to provide this URL to you. They will also need to create an account for you on their ST4SD instance and configure RBAC so that your account can read `}<inlineCode parentName=\"p\">{`Service`}</inlineCode>{` objects in the namespace that ST4SD is installed in.`}</p>\n    <p>{`If the ST4SD instance is on IBM Cloud you will need to login to the OpenShift Web Console once so that IBM Cloud completes the setup of your account.`}</p>\n    <h3>{`Connect to the ST4SD runtime service using an oauth-token`}</h3>\n    <p>{`You need to obtain an `}<inlineCode parentName=\"p\">{`auth-token`}</inlineCode>{`. the python code below will open a URL in your browser. The web-page will ask you to login to ST4SD typically by delegating the authentication to the OpenShift server hosting ST4SD. If this is the very first time you login to this ST4SD URL you may be asked for your permission to allow ST4SD to know that you are logging in.`}</p>\n    <p>{`After you log in you will be presented with a page that contains your `}<inlineCode parentName=\"p\">{`auth-token`}</inlineCode>{`, copy it and return to this document. By default, this token expires every 168 hours (1 week).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import webbrowser\n# enter the https:// ST4SD url below\nurl=\"https://\\${your ST4SD url}\"\n\nif url.endswith(\"/\"):\n    url = url[:-1]\n\nurl = '/'.join([url, \"authorisation/token\"])\n\nwebbrowser.open(url)\n`}</code></pre>\n    <p>{`You should now have an `}<inlineCode parentName=\"p\">{`auth-token`}</inlineCode>{`. Use it below to login to ST4SD.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import experiment.service.db\n\n# enter the https:// ST4SD url below\nurl=\"https://\\${your ST4SD url}\"\n\n# enter your auth-token below\nauth_token=\"put your authentication/token - do not share it with anyone\"\n\napi=experiment.service.db.ExperimentRestAPI(url, cc_auth_token=auth_token)\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ExperimentRestAPI`}</inlineCode>{` initializer validates the authentication token you provided and will raise an exception if it is invalid. If you do not get an Exception that means you can use `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` to interact with the `}<inlineCode parentName=\"p\">{`st4sd-runtime-service`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` REST-APIs.`}</p>\n    <h3>{`Connect to the ST4SD runtime service using an api-token`}</h3>\n    <p>{`You can use the token that OpenShift associates with ServiceAccounts in the same namespace as your ST4SD to access the ST4SD microservices. You may want to use a API-key over an authorisation token if you need a way to authenticate to ST4SD that does not have an expiration date. For example if you build a MicroService that accesses the ST4SD microservices.`}</p>\n    <p>{`Generate an API-key using an OpenShift ServiceAccount:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a new ServiceAccount on the same namespace as your ST4SD instance:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc project <NAMESPACE_THAT_HOSTS_ST4SD>\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create serviceaccount <SERVICE_ACCOUNT_NAME> (e.g. oc create serviceaccount sa-auth-st4sd)\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`OpenShift creates 2 Secret objects for the ServiceAccount`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`<SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric>`}</inlineCode>{`:`}</p>\n            <p parentName=\"li\">{`This is an OpenShift token that you can use to impersonate the ServiceAccount and log on the OpenShift cluster.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`<SERVICE_ACCOUNT_NAME>.dockercfg`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<SERVICE_ACCOUNT_NAME>.dockerconfigjson`}</inlineCode>{`:`}</p>\n            <p parentName=\"li\">{`That contains docker registry credentials and is used for pulling images from the private container registry of your OpenShift cluster - Openshift Image Registry.`}</p>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Bind the ServiceAccount `}<inlineCode parentName=\"p\">{`<SERVICE_ACCOUNT_NAME>`}</inlineCode>{` to the namespaced role `}<inlineCode parentName=\"p\">{`st4sd-authenticate-microservice`}</inlineCode>{` - we have configured oauth-proxy to authorize OpenShift users that can get services in the same namespace as the st4sd deployment. For that you can use the following snippet in a new `}<inlineCode parentName=\"p\">{`role_binding.yaml`}</inlineCode>{` file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: st4sd-custom-authenticated\n  namespace: <NAMESPACE_THAT_HOSTS_ST4SD>\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: st4sd-authenticate-microservices\nsubjects:\n- kind: ServiceAccount\n  name: <SERVICE_ACCOUNT_NAME>\n  namespace: <NAMESPACE_THAT_HOSTS_ST4SD>\n`}</code></pre>\n        <p parentName=\"li\">{`Create the new RoleBinding object:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create -f role_binding.yaml\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Extract the token of of the `}<inlineCode parentName=\"p\">{`<SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric>`}</inlineCode>{` Secret. The secret may include the `}<inlineCode parentName=\"p\">{`ca.crt`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`service-ca.crt`}</inlineCode>{` fields that contain the CA certificate used for validating the OpenShift API server’s TLS certificate. However the token we want to extract is under the `}<inlineCode parentName=\"p\">{`token`}</inlineCode>{` field. The token in the Secret is base64 encoded meaning that you need to decode to its raw value after you extract it.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc get secret <SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric> -o jsonpath='{.data.token}' | base64 --decode | sed 's/$/\\\\n/'\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">{`Save the raw value of the token in a bearer_key variable in your python code.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use your API-key to access ST4SD:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-python\"\n          }}>{`  import experiment.service.db\n\n  # enter the https:// ST4SD url below\n  url=\"https://\\${your ST4SD url}\"\n\n  bearer_key=\"<THE_SERVICEACCOUNT_KEY_YOU_EXTRACTED_ABOVE>\"\n  api=experiment.service.db.ExperimentRestAPI(url, cc_bearer_key=bearer_key)\n`}</code></pre>\n      </li>\n    </ol>\n    <p>{`Best practices:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Store the API-key in a secure way, immediately revoke it if it leaks.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can revoke a API-key by deleting the Secret associated with that ServiceAccount and Openshift will auto-generate a new Secret to replace it.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Use each API-key in just one place.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`For example, if you build 2 microservices and wish for both of them to have access to the ST4SD microservices you should repeat the above steps twice, once for each microservice.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`How do I get the status of a virtual experiment instance?`}</h2>\n    <p>{`First, instantiate `}<inlineCode parentName=\"p\">{`experiment.service.db.ExperimentRestAPI`}</inlineCode>{` before you continue ay further. See `}<a parentName=\"p\" {...{\n        \"href\": \"#how-do-i-connect-to-the-st4sd-runtime-service\"\n      }}>{`How do I connect to the ST4SD runtime service?`}</a>{` for instructions.`}</p>\n    <p>{`All virtual experiment instances have a unique REST-API identifier. We use the term `}<inlineCode parentName=\"p\">{`rest_uid`}</inlineCode>{` to refer such identifiers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# put here the rest_uid of the virtual experiment instance\nrest_uid = \"toxicity-predictions-trol7a\"\n\nstatus = api.api_rest_uid_status(rest_uid)\n`}</code></pre>\n    <p>{`The variable `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` contains a plethora of information including metadata about the status of the virtual experiment instance and its outputs. Here, we will focus on the status.`}</p>\n    <p>{`Let’s try printing this information to get a better look:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json\nprint(json.dumps(status['status'], indent=2))\n`}</code></pre>\n    <p>{`Here is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"experiment-state\": \"finished\",\n  \"total-progress\": 1.0,\n  \"exit-status\": \"Success\",\n  \"stages\": [\n    \"Toxicity-prediction\"\n  ],\n  \"current-stage\": \"Toxicity-prediction\",\n  \"stage-state\": \"finished\",\n  \"stage-progress\": 1.0,\n  \"error-description\": \"\",\n  \"meta\": { ... omitted ... }\n}\n`}</code></pre>\n    <p>{`The virtual experiment instance above reports that:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The orchestrator observed that the virtual experiment instance terminated (`}<inlineCode parentName=\"li\">{`experiment-state`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`finished`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`The virtual experiment instance has produced all its outputs (`}<inlineCode parentName=\"li\">{`total-progress`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`1.0`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`The virtual experiment instance completed successfully (`}<inlineCode parentName=\"li\">{`exit-status`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`Success`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`The experiment had 1 stage (`}<inlineCode parentName=\"li\">{`stages`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`[\"Toxicity-prediction\"]`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`Toxicity-prediction`}</inlineCode>{` was the most recently executed stage with the lowest stage index (`}<inlineCode parentName=\"li\">{`current-stage`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`Toxicity-prediction`}</inlineCode>{`).`}\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`All its tasks terminated and they were all successful (`}<inlineCode parentName=\"li\">{`stage-state`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`finished`}</inlineCode>{`)`}</li>\n          <li parentName=\"ol\">{`It reached its max progress (`}<inlineCode parentName=\"li\">{`stage-progress`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`1.0`}</inlineCode>{`)`}</li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">{`The virtual experiment instance did not raise any errors (`}<inlineCode parentName=\"li\">{`error-description`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`\"\"`}</inlineCode>{`)`}</li>\n    </ol>\n    <details><summary>Click to show the full specification of the status dictionary</summary>\n      <ul>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`exit-status`}</inlineCode>{`: The status of the completed experiment. This receives its final value `}<em parentName=\"li\">{`after`}</em>{` `}<inlineCode parentName=\"li\">{`experiment-state`}</inlineCode>{` transitions to either `}<inlineCode parentName=\"li\">{`finished`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`failed`}</inlineCode>{`. Value is one of `}<inlineCode parentName=\"li\">{`[\"Success\", \"Failed\", \"Stopped\", \"\"]`}</inlineCode>{`. Value may be empty while Kubernetes initializes objects.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`experiment-state`}</inlineCode>{`: Indicates the state of the orchestrator that is executing the experiment tasks. `}<strong parentName=\"li\">{`Not`}</strong>{` to be confused with status of experiment (`}<inlineCode parentName=\"li\">{`exit-status`}</inlineCode>{`). For example, an experiment status can have `}<inlineCode parentName=\"li\">{`experiment-state=finished`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`exit-status=failed`}</inlineCode>{`. This means that the experiment completed with a failure. The value of `}<inlineCode parentName=\"li\">{`experiment-state`}</inlineCode>{` is one of `}<inlineCode parentName=\"li\">{`[\"unscheduled\", \"running\", \"finished\", \"failed\", \"unschedulable\", \"\"]`}</inlineCode>{`. Value may be empty while Kubernetes initializes objects.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stage-state`}</inlineCode>{`: Indicates the state of the active stage in the experiment with the lowest stage index. Value is one of `}<inlineCode parentName=\"li\">{`[\"Initializing\", \"finished\", \"waiting_on_resource\",\"running\", \"component_shutdown\", \"failed\"]`}</inlineCode></li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`error-description`}</inlineCode>{`: A string, which when printed is a human readable description that explains why `}<inlineCode parentName=\"li\">{`exit-status`}</inlineCode>{` is `}<inlineCode parentName=\"li\">{`Failed`}</inlineCode>{`.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`total-progress`}</inlineCode>{`: A number in `}{`[0.0, 1.0]`}{` indicating the progress of the experiment. Note that workflow developers may decide to control this value.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stage-progress`}</inlineCode>{`: A number in `}{`[0.0, 1.0]`}{` indicating the progress of the active stage with the lowest stage index. Note that workflow developers may decide to control this value.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stages`}</inlineCode>{`: A list of human-readable stage names`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`current-stage`}</inlineCode>{`: UID of stage (e.g. `}<inlineCode parentName=\"li\">{`stage0`}</inlineCode>{`)`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`meta`}</inlineCode>{`: This is a nested dictionary`}\n          <ul parentName=\"li\">\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`arguments`}</inlineCode>{`: The command-line of the orchestrator`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{`: The list of files that override data files`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`input`}</inlineCode>{`: The list of input files`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pid`}</inlineCode>{`: The process ID of the st4sd orchestrator`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`platform`}</inlineCode>{`: The name of the platform that the virtual experiment instance executes`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`userVariables`}</inlineCode>{`: User provided variables, the schema is  `}<inlineCode parentName=\"li\">{`{'global':{name:value}, 'stages':{index:{name:value}}}`}</inlineCode></li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`variables`}</inlineCode>{`: Global and stage variables active in the `}<inlineCode parentName=\"li\">{`platform`}</inlineCode>{`-scope that the virtual experiment executes. The schema is `}<inlineCode parentName=\"li\">{`{'global':{name:value}, 'stages':{index:{name:value}}}`}</inlineCode></li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hybridPlatform`}</inlineCode>{`: Name of hybrid-platform for communicating with LSF (can be None),`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`userMetadata`}</inlineCode>{`: A dictionary with `}<inlineCode parentName=\"li\">{`key(str): Any`}</inlineCode>{` value pairs that users can provide`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`instanceName`}</inlineCode>{`: The name of the directory containing the virtual experiment instance.`}</li>\n            <li parentName=\"ul\"><inlineCode parentName=\"li\">{`version`}</inlineCode>{`: The version of the st4sd orchestrator`}</li>\n          </ul>\n        </li>\n      </ul>\n    </details>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","Object","assign","mdxType","parentName","isMDXComponent"],"sourceRoot":""}