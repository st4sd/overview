{"version":3,"file":"component---src-pages-direct-run-mdx-3e79fa2b9bac9d51591a.js","mappings":"iQAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,IAAA,MAASH,EAClB,CAAC,EACKI,EAAkBN,EAAc,mBAChCO,EAAcP,EAAc,eAC5BQ,EAAaR,EAAc,cAC3BS,EAAc,CAClBV,aAAAA,GAEIW,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGZ,GAAKa,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOX,EAAAA,EAAAA,IAACK,EAASO,OAAAC,OAAA,GAAKT,EAAiBP,EAAK,CAAEY,WAAYA,EAAYK,QAAQ,eAO5Ed,EAAAA,EAAAA,IAACC,EAAe,CAACa,QAAQ,oBACvBd,EAAAA,EAAAA,IAAA,+EAAyEA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,cAA4B,qFAC1Ef,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IAC/D,KAAQ,oCAAkC,UAC3B,6CAErBf,EAAAA,EAAAA,IAACE,EAAW,CAACY,QAAQ,gBACvBd,EAAAA,EAAAA,IAACG,EAAU,CAACW,QAAQ,cAAa,kCACjCd,EAAAA,EAAAA,IAACG,EAAU,CAACW,QAAQ,cAAa,uBACjCd,EAAAA,EAAAA,IAACG,EAAU,CAACW,QAAQ,cAAa,gDACjCd,EAAAA,EAAAA,IAACG,EAAU,CAACW,QAAQ,cAAa,yBAE/Bd,EAAAA,EAAAA,IAAA,4CACAA,EAAAA,EAAAA,IAAA,0GAAoGA,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IAC9G,KAAQ,yCACPf,EAAAA,EAAAA,IAAA,UAAQe,WAAW,KAAG,eAA4B,cACvDf,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,MAClB,UAAa,iBAAe,yGAKhCf,EAAAA,EAAAA,IAAA,+EAAyEA,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IACnF,KAAQ,wDAAsD,oBACrC,gDACWf,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IAClD,KAAQ,2DACPf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,mBAAoC,oBACnEf,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,OAAK,yKAM3Bf,EAAAA,EAAAA,IAAA,mCAA6BA,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IACvC,KAAQ,2DACPf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,mBAAoC,2BACnEf,EAAAA,EAAAA,IAAA,kCAA4BA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,kBAAgC,kFAAkFf,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IAClL,KAAQ,kFACPf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,QAAyB,cACxDf,EAAAA,EAAAA,IAAA,iCACAA,EAAAA,EAAAA,IAAA,qBAAeA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,cAA4B,yDAAyDf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,sBAAoC,uEACpJf,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IAClD,KAAQ,yCACPf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,gBAAiC,cAChEf,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,MAClB,UAAa,iBAAe,iGAIhCf,EAAAA,EAAAA,IAAA,0DACAA,EAAAA,EAAAA,IAAA,2DACAA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIe,WAAW,MAAI,yEACnBf,EAAAA,EAAAA,IAAA,MAAIe,WAAW,MAAI,uEACnBf,EAAAA,EAAAA,IAAA,MAAIe,WAAW,MAAI,kEAErBf,EAAAA,EAAAA,IAAA,iBAAWA,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IACrB,KAAQ,oDAAkD,YACzC,6CACrBf,EAAAA,EAAAA,IAAA,sBACAA,EAAAA,EAAAA,IAAA,0DAAoDA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,SAAuB,aAAaf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,QAAsB,2BAClKf,EAAAA,EAAAA,IAAA,qGACAA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,MAClB,UAAa,iBAAe,qpBAyChCf,EAAAA,EAAAA,IAAA,oEACAA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,OAAK,mQAO3Bf,EAAAA,EAAAA,IAAA,uEAAiEA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,sBAAoC,mBAC/Hf,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,MAClB,UAAa,iBAAe,wQAShCf,EAAAA,EAAAA,IAAA,6BAAuBA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,eAA6B,wBAAwBf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,OAAqB,8CAA8Cf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,WAAyB,0BACtPf,EAAAA,EAAAA,IAAA,kDAA4CA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,QAAsB,UAAUf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,WAAyB,6BAA6Bf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,sCAAoD,gCAC7Of,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,UAAwB,SAASf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,WAAyB,gCACrIf,EAAAA,EAAAA,IAAA,kCACAA,EAAAA,EAAAA,IAAA,6CAAuCA,EAAAA,EAAAA,IAAA,KAAGe,WAAW,IACjD,KAAQ,mCACPf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,gBAAiC,iBAAiBf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,cAA4B,wDAEvIf,EAAAA,EAAAA,IAAA,8BAAwBA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,cAA4B,eAAef,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,eAA6B,uBAAuBf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,kBAAgC,4CAC5Mf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,kBAAgC,qDAAqDf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,uBAAqC,QAAQf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,oBAAkC,MAC3Qf,EAAAA,EAAAA,IAAA,uBACAA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,MAClB,UAAa,iBAAe,4TAYhCf,EAAAA,EAAAA,IAAA,kBAAYA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,kBAAgC,8CAA8Cf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,cAA4B,8BAA8Bf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,eAA6B,uDAAuDf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,qBAAoC,OACtXf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,cAA4B,gCAAgCf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,mBAAiC,gBAAgBf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,kBAAgC,2FAChLf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,eAA6B,wDAChGf,EAAAA,EAAAA,IAAA,4FAAsFA,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,qFAAmG,iBAAiBf,EAAAA,EAAAA,IAAA,cAAYe,WAAW,KAAG,oBAAkC,wBAChSf,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMe,WAAW,MAClB,UAAa,iBAAe,qVAYpC,CAEAR,EAAWS,gBAAiB,C","sources":["webpack://st4sd-overview/./src/pages/direct-run.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/travis/build/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This page will teach you how to run a workflow directly using the `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` command line utility.\nUsers comfortable with installing python modules and the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/workflow-specification\"\n        }}>{`FlowIR`}</a>{` should be able to follow this content.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Prepare a virtual environment</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Execute a workflow</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Provide input files and override data files</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Store outputs to S3</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Prepare a virtual environment`}</h2>\n    <p>{`We recommend using a virtual environment with a modern version of python 3 (3.7+) to install `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/st4sd-core-getting-started\"\n      }}><strong parentName=\"a\">{`ST4SD Core`}</strong></a>{` like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`python3 -m venv --copies st4sd\n. ./st4sd/bin/activate\npip install \"st4sd-runtime-core[develop]\"\n`}</code></pre>\n    <p>{`If you are installing ST4SD on a machine that can submit tasks to `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/products/hpc-workload-management\"\n      }}>{`IBM Spectrum LSF`}</a>{`\nthen you should also install the official `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBMSpectrumComputing/lsf-python-api\"\n      }}><inlineCode parentName=\"a\">{`lsf-python-api`}</inlineCode></a>{` python module.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`. /path/to/profile.lsf\ngit clone https://github.com/IBMSpectrumComputing/lsf-python-api.git\ncd lsf-python-api\npython3 setup.py build\npython3 setup.py install\n`}</code></pre>\n    <p>{`Check the homepage of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBMSpectrumComputing/lsf-python-api\"\n      }}><inlineCode parentName=\"a\">{`lsf-python-api`}</inlineCode></a>{` for more information.`}</p>\n    <p>{`After installing the `}<inlineCode parentName=\"p\">{`lsf-python-api`}</inlineCode>{` python module you can launch workflows which contain components that use the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification#description-of-basic-flowir-component-fields\"\n      }}><inlineCode parentName=\"a\">{`lsf`}</inlineCode></a>{` backend.`}</p>\n    <h2>{`Execute a workflow`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` command-line utility that is included by installing `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` to run your workflows.\nFor example, you can run the toy workflow `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/sum-numbers\"\n      }}><inlineCode parentName=\"a\">{`sum-numbers`}</inlineCode></a>{` like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clone https://github.com/st4sd/sum-numbers.git\nelaunch.py --nostamp -l40 sum-numbers\n`}</code></pre>\n    <h2>{`Provide input files and override data files`}</h2>\n    <p>{`ST4SD workflows support 3 flavours of inputs:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Input files - files user must provide when they execute the workflow`}</li>\n      <li parentName=\"ol\">{`Data files - configuration files that optionally can be overridden`}</li>\n      <li parentName=\"ol\">{`User variables - user provided values for workflow variables`}</li>\n    </ol>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/tutorial#providing-inputs-to-workflows\"\n      }}>{`tutorial`}</a>{` contains more information about inputs.`}</p>\n    <h3>{`Example`}</h3>\n    <p>{`Hereâ€™s an example of a workflow that uses an `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` file, a `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` file, and a variable.`}</p>\n    <p>{`First, prepare the workflow definition files by running the following on your terminal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cat <<EOF >workflow.yaml\nvariables:\n  default:\n    global:\n      var: hello\n\ncomponents:\n- name: hello\n  command:\n    executable: sh\n    arguments: |\n      <<EOF\n      echo variable contains \"%(var)s\"\n      echo input contents are \"input/foo.txt:output\"\n      echo data contents are \"data/bar.txt:output\"\n      EOF\n    expandArguments: none\n  references:\n  - input/foo.txt:output\n  - data/bar.txt:output\nEOF\n\ncat <<EOF >manifest.yaml\ndata: data\nEOF\n\nmkdir -p shared_data\ncat <<EOF >shared_data/bar.txt\ndata-file-contents\nEOF\n\ncat <<EOF >foo.txt\ninput-file-contents\nEOF\n\ncat <<EOF >my_vars.yaml\nglobal:\n  var: hi\nEOF\n`}</code></pre>\n    <p>{`The above script creates the following file structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`workflow.yaml  # the workflow definition\nmanifest.yaml  # manifest that maps \"shared_data\" to \"data\"\nfoo.txt        # the input file\nmy_vars.yaml   # file containing user variables\nshared_data    # the directory containing \"data\" files\nâ””â”€ bar.txt\n`}</code></pre>\n    <p>{`Activate the virtual environment that you used to install `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` and then run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`elaunch.py -l40 --nostamp  \\\\\n      --failSafeDelays=no \\\\\n      --input foo.txt \\\\\n      --variables my_vars.yaml \\\\\n      --manifest manifest.yaml workflow.yaml\necho \"\\\\n\\\\nComponent stdout was:\"\ncat workflow.instance/stages/stage0/hello/out.stdout\n`}</code></pre>\n    <p>{`If you omit the `}<inlineCode parentName=\"p\">{`--variables`}</inlineCode>{` parameter then the `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` variable will receive the value that the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` platform sets to it.`}</p>\n    <p>{`You can override the contents of the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` file `}<inlineCode parentName=\"p\">{`bar.txt`}</inlineCode>{` by adding the argument: `}<inlineCode parentName=\"p\">{`--data path/to/a/different/bar.txt`}</inlineCode>{`.\nFinally, you can use the `}<inlineCode parentName=\"p\">{`--data`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`--input`}</inlineCode>{` parameters multiple times.`}</p>\n    <h2>{`Store outputs to S3`}</h2>\n    <p>{`Workflows may optionally define `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/tutorial#key-outputs\"\n      }}><inlineCode parentName=\"a\">{`key-outputs`}</inlineCode></a>{` which which `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`\nmay upload to S3 after the experiment terminates.`}</p>\n    <p>{`You can instruct `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` to upload `}<inlineCode parentName=\"p\">{`key-outputs`}</inlineCode>{` to S3 via the the `}<inlineCode parentName=\"p\">{`--s3StoreToURI`}</inlineCode>{` parameter.\nWhen setting the parameter `}<inlineCode parentName=\"p\">{`--s3StoreToURI`}</inlineCode>{` you must also use exactly one of the parameters `}<inlineCode parentName=\"p\">{`--s3AuthWithEnvVars`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`--s3AuthBearer64`}</inlineCode>{`.`}</p>\n    <h3>{`Example:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export bucket=\"a-bucket\"\nexport path_in_bucket=\"optional/path\"\n\nexport S3_ACCESS_KEY_ID=\"s3 access key id\"\nexport S3_SECRET_ACCESS_KEY=\"s3 secret access key\"\nexport S3_END_POINT=\"s3 end point\"\n\nelaunch.py --s3StoreToURI s3://\\${bucket}/\\${path_in_bucket} \\\\\n  --s3AuthWithEnvVars \\\\\n  path/to/workflow\n`}</code></pre>\n    <p>{`When `}<inlineCode parentName=\"p\">{`--s3StoreToURI`}</inlineCode>{` is set, after the experiment terminates, `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` will start uploading the `}<inlineCode parentName=\"p\">{`key-outputs`}</inlineCode>{` to the S3 bucket you provided under the specifeid `}<inlineCode parentName=\"p\">{`\\${path_in_bucket}`}</inlineCode>{`.\n`}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` replaces occurences of the `}<inlineCode parentName=\"p\">{`%(instanceDir)s`}</inlineCode>{` literal in `}<inlineCode parentName=\"p\">{`--s3StoreToURI`}</inlineCode>{` with the name of the experiment instance.\nFor example, you can use this to store the `}<inlineCode parentName=\"p\">{`key-outputs`}</inlineCode>{` of multiple workflow instances in the same bucket.`}</p>\n    <p>{`Alternatively, you can base64-encode the JSON representation of the dictionary `}<inlineCode parentName=\"p\">{`{\"S3_ACCESS_KEY_ID\": \"val\", \"S3_SECRET_ACCESS_KEY\": \"val\", \"S3_END_POINT\": \"val\"}`}</inlineCode>{` and use the `}<inlineCode parentName=\"p\">{`--s3AuthBearer64`}</inlineCode>{` parameter instead:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export bucket=\"a-bucket\"\nexport path_in_bucket=\"optional/path\"\nexport json=\"{\\\\\"S3_ACCESS_KEY_ID\\\\\": \\\\\"val\\\\\", \\\\\"S3_SECRET_ACCESS_KEY\\\\\": \\\\\"val\\\\\", \\\\\"S3_END_POINT\\\\\": \\\\\"val\\\\\"}\"\nexport s3_auth=\\`echo \"\\${json}\" | base64\\`\n\nelaunch.py --s3StoreToURI s3://\\${bucket}/\\${path_in_bucket} \\\\\n  --s3AuthBearer64 \\\\\n  path/to/workflow\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","Object","assign","mdxType","parentName","isMDXComponent"],"sourceRoot":""}