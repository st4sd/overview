{"version":3,"file":"component---src-pages-running-workflows-on-openshift-mdx-d0b9b0734390ed11b2f7.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/running-workflows-on-openshift.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/travis/build/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Learn how to use ST4SD python client API to run, query and interact with virtual experiments`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Connecting to ST4SD</AnchorLink> \n <AnchorLink mdxType=\"AnchorLink\">Adding a virtual experiment package</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Running a virtual experiment</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Getting the status of a virtual experiment instance</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Inspect the metadata of a virtual experiment instance</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Retrieving the outputs of a virtual experiment instance</AnchorLink>  \n  <AnchorLink mdxType=\"AnchorLink\">Stopping a virtual experiment instance</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Next steps</AnchorLink>\n    </AnchorLinks>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <ul>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`For`}</strong>{`: Researchers `}</li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`Use When:`}</strong>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`You want to run and get output of virtual experiments`}</li>\n          </ul>\n        </li>\n        <li parentName=\"ul\"><strong parentName=\"li\">{`Skill Requirements:`}</strong>\n          <ul parentName=\"li\">\n            <li parentName=\"ul\">{`Some knowledge of python`}</li>\n          </ul>\n        </li>\n      </ul>\n    </InlineNotification>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`The code here can be tested using the `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/st4sd/st4sd-examples/blob/main/notebooks/ST4SD%20Runtime%20API%20Example.ipynb\"\n        }}>{`ST4SD Runtime API Example notebook`}</a></p>\n    </InlineNotification>\n    <h2>{`Overview`}</h2>\n    <p>{`We provide a python API for ease of use of virtual experiment in an iPython notebook setting. The features the API enables includes:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`launching virtual experiment instances`}</li>\n      <li parentName=\"ol\">{`monitoring virtual experiment instances`}</li>\n      <li parentName=\"ol\">{`downloading outputs and measured properties of virtual experiment instances`}</li>\n    </ol>\n    <p>{`The Python API is a wrapper around a RESTapi. You can find RESTapi documentation `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/api-docs/openapi/st4sd-runtime-service/st4sd-runtime-service.openapi.html\"\n      }}>{`here`}</a>{`.\nIn addition, we provide a python API to our `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` which allows deeper querying and data-retrieval from completed virtual experiments in a notebook. `}</p>\n    <h3>{`Requirements`}</h3>\n    <p>{`The basic requirements are access to an OpenShift instance with ST4SD installed (see `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/\"\n      }}>{`first steps`}</a>{` for more information).`}</p>\n    <h4>{`Getting data into and out-of virtual experiments: Cloud Object Store`}</h4>\n    <p>{`Additionally it can be useful to set up a Cloud Object Store bucket so you can easily get data into and out-of a virtual experiment.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/overview/UsingCloudObjectStore\"\n      }}>{`See here`}</a>{` for detailed instructions on how to do this with IBM Cloud.`}</p>\n    <h3>{`Examples`}</h3>\n    <p>{`We maintain a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/st4sd-examples/\"\n      }}>{`repository`}</a>{` containing a set of IPython notebooks that illustrate interacting with virtual experiments via these two methods.`}</p>\n    <p>{`If you are using a `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/user-environments#local-jupyterserver-with-openshift-st4sd-instance\"\n      }}>{`local JupyterServer environment`}</a>{` execute this snippet to start-up the first notebook illustrating the RESTApi. Most of the examples discussed here are in this notebook`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`git clone https://github.com/st4sd/st4sd-examples.git\ncd st4sd-examples\njupyter-notebook notebooks/ST4SD\\\\ Runtime\\\\ API\\\\ Example.ipynb\n`}</code></pre>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Note`}</em>{`: If you’ve installed `}<inlineCode parentName=\"strong\">{`st4sd-runtime-core`}</inlineCode>{` into a virtualenv you will need to activate it before executing above snippet`}</strong></p>\n    <p>{`After reading this page have a browse around the `}<inlineCode parentName=\"p\">{`st4sd-examples`}</inlineCode>{` repository to see what topics are covered in the other notebooks.`}</p>\n    <h2>{`Connecting to ST4SD`}</h2>\n    <p>{`To connect to an ST4SD instance you need to obtain an `}<inlineCode parentName=\"p\">{`auth-token`}</inlineCode>{` or use an `}<inlineCode parentName=\"p\">{`api-key`}</inlineCode>{`. Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/runtime-service#how-do-i-connect-to-the-st4sd-runtime-service\"\n      }}>{`How do I connect to the ST4SD runtime service?`}</a>{`.`}</p>\n    <p>{`The following code blocks show how to connect to an ST4SD instance.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Connect using an `}<inlineCode parentName=\"li\">{`auth-token`}</inlineCode>{`:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`  import experiment.service.db\n\n  # enter the https:// ST4SD url below\n  url=\"https://\\${your ST4SD url}\"\n\n  # enter your auth-token below\n  auth_token=\"put your authentication/token - do not share it with anyone\"\n\n  api=experiment.service.db.ExperimentRestAPI(url, cc_auth_token=auth_token)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Connect using an `}<inlineCode parentName=\"li\">{`api-key`}</inlineCode>{`:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`  import experiment.service.db\n\n  # enter the https:// ST4SD url below\n  url=\"https://\\${your ST4SD url}\"\n\n  # enter your auth-token below\n  bearer_key=\"put your api-key - do not share it with anyone\"\n\n  api=experiment.service.db.ExperimentRestAPI(url, cc_bearer_key=bearer_key)\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\nST4SD may print warnings to your python terminal e.g. `Unable to import tinydb module - tinydb interface not available`. These are not problems. They are just informing you that select features are not supported on the machine you are using. You can ignore them.\n    </InlineNotification>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ExperimentRestAPI`}</inlineCode>{` initializer validates the authentication token you provided and will raise an exception if it is invalid.\nIf you do not get an Exception that means you can use `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` to interact with the `}<inlineCode parentName=\"p\">{`st4sd-runtime-service`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` REST-APIs.`}</p>\n    <p>{`The above code needs to be executed once in a notebook session to get an `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` instance to interact with. All the following examples assume this step has been done. `}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`ST4SD may print warnings to your python terminal e.g. `}<inlineCode parentName=\"p\">{`Unable to import pythonlsf - limited LSF functionality will be available`}</inlineCode>{`. These are not problems. They are just informing you that select features are not supported on the machine you are using. You can ignore them.`}</p>\n    </InlineNotification>\n    <h2>{`Adding a virtual experiment package`}</h2>\n    <p>{`Before you can run a virtual experiment you need to add it to your ST4SD registry. You do this using the `}<inlineCode parentName=\"p\">{`api_experiment_push()`}</inlineCode>{` method. `}</p>\n    <p>{`Technically you add a `}<em parentName=\"p\">{`parameterised`}</em>{` virtual experiment package. A parameterised package can define particular, potentially complex values, for variables in the virtual experiment to enable specific behaviour and make them easier to consume. `}</p>\n    <p>{`You can either type the definition of the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/creating-a-parameterised-package\"\n      }}>{`parameterised package`}</a>{` manually or import it from another ST4SD registry  `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-the-virtual-experiments-registry-ui\"\n      }}>{`(e.g. the global ST4SD registry)`}</a>{`. In the second-case the registry UI provides with the exact `}<inlineCode parentName=\"p\">{`api_experiment_push`}</inlineCode>{` call you need to execute. `}</p>\n    <h2>{`Running a virtual experiment`}</h2>\n    <p>{`The API call `}<inlineCode parentName=\"p\">{`api_experiment_start`}</inlineCode>{` will start the virtual experiment that a parameterised virtual experiment package points to e.g., `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`rest_uid = api.api_experiment_start(experimentIdentifier, payload=...)\n`}</code></pre>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`The above example assumes `}<inlineCode parentName=\"p\">{`experimentIdentifier`}</inlineCode>{` is a valid identifier of a parameterised package. The value of `}<inlineCode parentName=\"p\">{`payload`}</inlineCode>{` is a python dictionary that contains the run options to the experiment.`}</p>\n    </InlineNotification>\n    <p>{`When you run a given virtual experiment you create a `}<em parentName=\"p\">{`virtual experiment instance`}</em>{`.  Each instance is assigned a unique identifier which is returned when you start the virtual experiment.  We use the term `}<inlineCode parentName=\"p\">{`ExperimentRunID`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rest_uid`}</inlineCode>{` to refer to such identifiers.`}</p>\n    <p>{`The following sections explain how to fill the `}<inlineCode parentName=\"p\">{`payload`}</inlineCode>{`.`}</p>\n    <h3>{`Specifying experiment inputs`}</h3>\n    <p><em parentName=\"p\">{`inputs`}</em>{` are files the experiment requires to run - they must be provided. Each experiments documentation should explain what these files are. `}</p>\n    <p>{`The inputs are specified via the key `}<inlineCode parentName=\"p\">{`inputs`}</inlineCode>{` in the payload. The value of this key is a list that has one item, a dictionary, for each required input file e.g.,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`payload = {\n    \"inputs\": [\n      {...},\n      ...\n    ]\n}\n`}</code></pre>\n    <h4>{`Providing inputs via s3 or Datashim dataset`}</h4>\n    <p>{`If your input file is in an s3 bucket or a Datashim dataset you use the `}<inlineCode parentName=\"p\">{`s3`}</inlineCode>{` top-level key of the payload dictionary to provides details for accessing the bucket/dataset.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <ul>\n        <li parentName=\"ul\">{`Currently the filenames in the bucket must have the same names as expected by the experiment`}</li>\n        <li parentName=\"ul\">{`Only one bucket/dataset can be specified in the payload i.e. all files you want to pass an experiment from s3 must be in the same bucket`}</li>\n        <li parentName=\"ul\">{`The value of the `}<inlineCode parentName=\"li\">{`filename`}</inlineCode>{` key should be the path inside the bucket to find the file. `}</li>\n      </ul>\n    </InlineNotification>\n    <p>{`Example: Using s3. Fill the `}<inlineCode parentName=\"p\">{`s3`}</inlineCode>{` parameters with the required values. In this case `}<inlineCode parentName=\"p\">{`input_filename.csv`}</inlineCode>{` is in the top-level of the bucket. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`payload = {\n    \"inputs\": [{\n       \"filename\": \"input_filename.csv\"\n   }],\n  \"s3\": { \n      \"accessKeyID\": \"$S3_AccessKeyID\",           \n      \"secretAccessKey\": \"$S3_SecretAccessKey\", \n      \"bucket\": \"$S3_BUCKET_NAME\",           \n      \"endpoint\": \"$S3_ENDPOINT\",           \n      \"region\": \"$S3_Region\"                 \n  }  \n}\n`}</code></pre>\n    <p>{`Example: Using Datashim. In this case `}<inlineCode parentName=\"p\">{`input_filename.csv`}</inlineCode>{` is at path `}<inlineCode parentName=\"p\">{`data/input_filename.csv`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`\npayload = {\n    \"inputs\": [{\n       \"filename\": \"data/input_filename.csv\"\n   }],\n  \"s3\": { \n      \"dataset\": \"$MYDATASET_NAME\"               \n  }  \n}\n`}</code></pre>\n    <h4>{`Providing input content directly`}</h4>\n    <p>{`You can provide the content of input files directly in the payload using the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` key`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`data = pd.read_csv('mydata.csv')\npayload = {\n    \"inputs\": [{\n       \"content\": data.to_csv(index=False),\n       \"filename\": \"input_filename.csv\"\n   }]\n\n}\n`}</code></pre>\n    <p>{`This specifies that the content of the input file `}<inlineCode parentName=\"p\">{`input_filename.csv`}</inlineCode>{` comes from the pandas DataFrame `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`. `}</p>\n    <h3>{`Specifying experiment data`}</h3>\n    <p><em parentName=\"p\">{`data`}</em>{` refers to experiment configuration files that `}<strong parentName=\"p\">{`may`}</strong>{` be overridden by the user. `}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><em parentName=\"p\">{`data`}</em>{` files can only be overridden if the parameterised package allows it. If this is the case the files will be listed in the `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{` section in the package description`}</p>\n    </InlineNotification>\n    <p>{`The data files are specified via the key `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` in the payload. The value of this key is a list that has one item, a dictionary, for each `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`  file you want to override e.g.,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`payload = {\n    \"data\": [\n      {...},\n      ...\n    ]\n}\n`}</code></pre>\n    <p>{`The format of the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` dictionary is identical to the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` dictionary. `}</p>\n    <p>{`Providing  data files via S3/Datashim or providing their content directly follows same process as described for inputs. See those sections for details. `}</p>\n    <h3>{`Specifying experiment variables`}</h3>\n    <p><em parentName=\"p\">{`variables`}</em>{` are optional parameters controlling the behaviour of the experiment, e.g. number of cpus. They are experiment specific i.e. the same variables don’t exist in all experiment and  variables controlling similar behaviour in two experiments may not have the same name. `}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><em parentName=\"p\">{`variables`}</em>{` can only be overridden if the parameterised package allows it. If this is the case the variables that can be set will be listed in the `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{` section in the package description`}</p>\n    </InlineNotification>\n    <p><em parentName=\"p\">{`variables`}</em>{` are set using the `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` key in the payload. The value of this key is a dictionary of variable-name, variable-value pairs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`payload = {\n    ... #Input/data options elided\n   \"variables\": {\n        \"startIndex\": 0,\n        \"numberMolecules\": 1,\n    }\n}\n`}</code></pre>\n    <h3>{`Payload Details`}</h3>\n    <p>{`The following is the complete structure of the `}<inlineCode parentName=\"p\">{`api_experiment_start()`}</inlineCode>{` payload (in `}<inlineCode parentName=\"p\">{`YAML`}</inlineCode>{`). This includes some advanced options not discussed here. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`platform: name of platform (optional - see parameterisation notes)\ninputs: # optional (parameterised packages may have no inputs)\n# see notes for interaction with Dataset/S3\n- filename: str # required\n  content: str # optional - see S3 notes\ndata: # optional (parameterised packages may have no overiddable data files)\n# see notes for interaction with Dataset/S3\n- filename: str # required\n  content: str # optional - see S3 notes\nvolumes: # optional\n- type:\n    # children fields are mutually exclusive - there must be exactly 1\n    persistentVolumeClaim: name of PVC object\n    dataset: name of Datashim dataset (see notes)\n    configMap: name of ConfigMap object\n    secret: name of Secret object\n  applicationDependency: name of appDep to bind to volume (optional)\n  # subPath applies only to pvc and dataset types\n  subPath: path inside volume to mount (optional, defaults to root of object)\nvariables: # optional - must adhere to parameterisation rules (see notes)\n  $name: $value\nadditionalOptions: # optional runtime arguments to elaunch.py\n # they cannot override runtime arguments in the package parameterisation\n - \"--someArgument=value\"\nenvironmentVariables: # optional\n # creates environment variable in the pod that hosts elaunch.py\n $name: $value\nmetadata: # optional\n  # custom metadata to insert into the \"user-metadata\" MongoDB document of run\n  $name: $value\ns3: # optional - used to read inputs/data with no \"content\" field\n  # dataset is mutually exclusive with any other sibling fields\n  dataset: name of Datashim dataset     # optional\n  # can only provide fields below if dataset is unset\n  accessKeyID: S3 accessKeyID           # optional\n  secretAccessKey: S3 secretAccessKey   # optional\n  bucket: name of S3 bucket             # optional\n  endpoint: the s3 endpoint             # optional\n  region: the s3 region                 # optional\n# s3Store and datasetStoreURI are mutually exclusive and both optional\n# when one is provided, orchestrator uploads key-outputs to S3 after Run terminates\ns3Store: # optional\n  bucketPath: path under bucket to store key-outputs files (default is \"workflow_instances/\")\n  credentials: (same as s3 field)\ndatasetStoreURI: a \"dataset/$bucketPath\" URI (optional)\nruntimePolicy: # optional\n  name: the name of the runtime policy (required)\n  config: # optional\n    $key: Any # each runtime-policy has its own config-schema\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`The schema above is in YAML format. If you are using python (i.e. an instance of `}<inlineCode parentName=\"p\">{`experiment.service.db.ExperimentRestAPI`}</inlineCode>{`) you should either create an equivalent python dictionary OR a python string that contains the yaml definition and then convert the string into a dictionary using `}<inlineCode parentName=\"p\">{`yaml.loads(the_string)`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <p><strong parentName=\"p\">{`Notes`}</strong></p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`inputs`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` file-specifications have an optional `}<inlineCode parentName=\"li\">{`content`}</inlineCode>{` field. If this field is missing then the contents of the files are expected to exist on S3 or in a Dataset. When `}<inlineCode parentName=\"li\">{`s3`}</inlineCode>{` exists then the `}<inlineCode parentName=\"li\">{`filename`}</inlineCode>{` field acts as the path inside the S3 bucket (or dataset) to use for reading the content of the input/data file.`}</li>\n      <li parentName=\"ol\">{`Dataset objects are only available if a cluster-admin has installed `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/datashim-io/datashim\"\n        }}>{`Datashim`}</a>{` on the cluster.`}</li>\n      <li parentName=\"ol\">{`The fields `}<inlineCode parentName=\"li\">{`additionalOptions`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`inputs`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`platform`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`variables`}</inlineCode>{` must adhere to parameterisation rules. See the `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/creating-a-parameterised-package#the-parameterisation-section\"\n        }}>{`parameterised package documentation`}</a>{` for more information.`}</li>\n    </ol>\n    <h2>{`Getting the status of a virtual experiment instance`}</h2>\n    <p>{`A common user-task is to check the status of a virtual experiment instance. For example, to see if it is still running, or, if finished, if there was any error. `}</p>\n    <p>{`The API method `}<inlineCode parentName=\"p\">{`api_rest_uid_status`}</inlineCode>{` returns the status of a given `}<inlineCode parentName=\"p\">{`rest_uid`}</inlineCode>{`: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# put here the rest_uid of the virtual experiment instance\nrest_uid = \"toxicity-predictions-trol7a\"\n\nstatus = api.api_rest_uid_status(rest_uid)\n`}</code></pre>\n    <p>{`The variable `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` contains various information about the virtual experiment instance in addition to its  status. The `}<em parentName=\"p\">{`execution`}</em>{` status is under the `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` key, you can inspect by executing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json\nprint(json.dumps(status['status'], indent=2))\n`}</code></pre>\n    <p>{`This will print a dictionary with the following keys (among others). The potential values of these keys is also described.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Values are case sensitive`}</p>\n    </InlineNotification>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`experiment-state`}</inlineCode>{`: Indicates the execution state of the experiment instance`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Possible Values`}</strong>{`: `}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\">{`unscheduled`}</strong>{`: The experiment has not been scheduled to run yet. This can be due to lack of resources, which may resolve, or be a critical issue (unable to pull ST4SD images, unable to mount volumes)`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`unschedulable`}</strong>{`: Required pre-tasks for the experiment execution failed e.g. could not get workflow source, could not download s3 inputs.`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`Initialising`}</strong>{`: The experiment is starting up`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`running`}</strong>{`: The experiment has started running components`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`waiting_on_resource`}</strong>{`: A component in the active stage is waiting on resource`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`suspended`}</strong>{`: The workflow execution has been suspended`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`finished`}</strong>{`: The experiment is finished. `}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`failed`}</strong>{`: `}<strong parentName=\"li\">{`Only`}</strong>{` set if the experiment encountered an error during initialisation (failed to run any steps of workflow after being started). For example, fail to parse arguments, fail to create directory structures.`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`exit-status`}</inlineCode>{`: Indicates how a `}<strong parentName=\"p\">{`completed`}</strong>{` experiment exited`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This receives its final value `}<em parentName=\"li\">{`after`}</em>{` `}<inlineCode parentName=\"li\">{`experiment-state`}</inlineCode>{` transitions to either `}<inlineCode parentName=\"li\">{`finished`}</inlineCode>{` or, in rare circumstances, `}<inlineCode parentName=\"li\">{`failed`}</inlineCode>{` (see above). Value will be “N/A” or \"\" (empty) before this. `}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Possible Values`}</strong>{`: `}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\">{`Success`}</strong>{`: The experiment existed successfully`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`Failed`}</strong>{`: The experiment failed (at least one component)`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`Stopped`}</strong>{`: The experiment was stopped/killed`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`N/A`}</strong>{`: The experiment is running and doesn’t have an exit-status yet`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`\"\"`}</strong>{` (Empty): The experiment has not started. `}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`error-description`}</inlineCode>{`: If the `}<inlineCode parentName=\"p\">{`exit-status`}</inlineCode>{` is  `}<strong parentName=\"p\"><em parentName=\"strong\">{`Failed`}</em></strong>{` the value of this key is a string which explains the failure cause. `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`total-progress`}</inlineCode>{`: A number in `}{`[0.0, 1.0]`}{` indicating the progress of the experiment. Note that workflow developers may decide to control this value.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`current-stage`}</inlineCode>{`: UID (e.g. `}<inlineCode parentName=\"p\">{`stage0`}</inlineCode>{`) of the active stage with the lowest stage index `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`stage-state`}</inlineCode>{`: Indicates the state of the active stage (a stage with a component running) with with the lowest stage index. Value is one of `}<inlineCode parentName=\"p\">{`[\"Initialising\", \"finished\", \"waiting_on_resource\",\"running\", \"component_shutdown\", \"failed\"]`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`stage-progress`}</inlineCode>{`: A number in `}{`[0.0, 1.0]`}{` indicating the progress of the active stage with the lowest stage index. Note that workflow developers may decide to control this value.`}</p>\n      </li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`An experiment status can have `}<inlineCode parentName=\"p\">{`experiment-state=finished`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`exit-status=failed`}</inlineCode>{`. This means that the experiment completed with a failure. `}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`In the case where there are no systems issues preventing an experiment to start `}<inlineCode parentName=\"p\">{`experiment-state`}</inlineCode>{` will always become `}<inlineCode parentName=\"p\">{`finished`}</inlineCode>{`. `}<strong parentName=\"p\">{`You must check `}<inlineCode parentName=\"strong\">{`exit-status`}</inlineCode>{` for errors.`}</strong>{` `}</p>\n    </InlineNotification>\n    <p>{`Here is an example of the status dictionary`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"experiment-state\": \"finished\",\n  \"total-progress\": 1.0,\n  \"exit-status\": \"Success\",\n  \"stages\": [\n    \"Toxicity-prediction\"\n  ],\n  \"current-stage\": \"Toxicity-prediction\",\n  \"stage-state\": \"finished\",\n  \"stage-progress\": 1.0,\n  \"error-description\": \"\",\n  \"meta\": { ... omitted ... }\n}\n`}</code></pre>\n    <p>{`This reports that:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The orchestrator observed that the virtual experiment instance terminated (`}<inlineCode parentName=\"li\">{`experiment-state`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`finished`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`The virtual experiment instance has produced all its outputs (`}<inlineCode parentName=\"li\">{`total-progress`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`1.0`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`The virtual experiment instance completed successfully (`}<inlineCode parentName=\"li\">{`exit-status`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`Success`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`The experiment had 1 stage (`}<inlineCode parentName=\"li\">{`stages`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`[\"Toxicity-prediction\"]`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`Toxicity-prediction`}</inlineCode>{` was the most recently executed stage with the lowest stage index (`}<inlineCode parentName=\"li\">{`current-stage`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`Toxicity-prediction`}</inlineCode>{`).`}\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`All its tasks terminated and they were all successful (`}<inlineCode parentName=\"li\">{`stage-state`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`finished`}</inlineCode>{`)`}</li>\n          <li parentName=\"ol\">{`It reached its max progress (`}<inlineCode parentName=\"li\">{`stage-progress`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`1.0`}</inlineCode>{`)`}</li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">{`The virtual experiment instance did not raise any errors (`}<inlineCode parentName=\"li\">{`error-description`}</inlineCode>{` = `}<inlineCode parentName=\"li\">{`\"\"`}</inlineCode>{`)`}</li>\n    </ol>\n    <h2>{`Inspect the metadata of a virtual experiment instance`}</h2>\n    <p>{`In addition to the execution status information the `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` key also contains metadata on the experiment. To see it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json\nprint(json.dumps(status['status']['meta'], indent=2))\n`}</code></pre>\n    <p>{`This will print a dictionary with the following keys`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`arguments`}</inlineCode>{`: The command-line of the orchestrator`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{`: The list of files that override data files`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`input`}</inlineCode>{`: The list of input files`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pid`}</inlineCode>{`: The process ID of the st4sd orchestrator`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`platform`}</inlineCode>{`: The name of the platform that the virtual experiment instance executes`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`userVariables`}</inlineCode>{`: User provided variables, the schema is  `}<inlineCode parentName=\"li\">{`{'global':{name:value}, 'stages':{index:{name:value}}}`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`variables`}</inlineCode>{`: Global and stage variables active in the `}<inlineCode parentName=\"li\">{`platform`}</inlineCode>{`-scope that the virtual experiment executes. The schema is `}<inlineCode parentName=\"li\">{`{'global':{name:value}, 'stages':{index:{name:value}}}`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hybridPlatform`}</inlineCode>{`: Name of hybrid-platform for communicating with LSF (can be None),`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`userMetadata`}</inlineCode>{`: A dictionary with `}<inlineCode parentName=\"li\">{`key(str): Any`}</inlineCode>{` value pairs that users can provide`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`instanceName`}</inlineCode>{`: The name of the directory containing the virtual experiment instance.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`version`}</inlineCode>{`: The version of the st4sd orchestrator`}</li>\n    </ul>\n    <h2>{`Retrieving the outputs of a virtual experiment instance`}</h2>\n    <p>{`There are multiple ways to retrieve outputs of virtual experiments: via a virtual experiment interface, key-outputs, the Datastore APIs, and by leveraging ST4SD’s automated upload to S3. `}</p>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Retrieving the properties measured by an experiment </AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Retrieving key-outputs</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Automatically uploading key-outputs to S3</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Listing outputs produced by virtual experiment components</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Retrieving outputs via the ST4SD Datastore APIs</AnchorLink>\n    </AnchorLinks>\n    <h3>{`Retrieving the properties measured by an experiment`}</h3>\n    <p>{`Some virtual experiments define interfaces which make it simple for users to retrieve the input systems and measured properties from runs of that virtual experiment.`}</p>\n    <p>{`Learn how to use virtual experiment interfaces `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-a-virtual-experiment-interface/#getting-the-properties\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3>{`Retrieving key-outputs`}</h3>\n    <p>{`Key-Outputs are files produced by an experiment that the developer has flagged as being of special interest. Since the names of the file can be generic the developer gives the key-output a descriptive label to better explain what it is. `}</p>\n    <p>{`Information on the key-outputs of a virtual experiment instance are stored in the dictionary returned by `}<inlineCode parentName=\"p\">{`api_rest_uid_status`}</inlineCode>{` `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`status = api.api_rest_uid_status(restUID)\npprint.pprint(instance_status['outputs'])\n`}</code></pre>\n    <p>{`An example of the output of this is`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{'OptimisationResults': {'creationtime': '1669584128.077387',\n                         'description': '',\n                         'filename': 'energies.csv',\n                         'filepath': 'stages/stage1/ExtractEnergies/energies.csv',\n                         'final': 'yes',\n                         'production': 'yes',\n                         'type': '',\n                         'version': '1'}}\n`}</code></pre>\n    <p>{`This says the experiment has one key-output called `}<strong parentName=\"p\">{`OptimisationResults`}</strong>{`. This refers to a file `}<inlineCode parentName=\"p\">{`energies.csv`}</inlineCode>{` produced by the component `}<inlineCode parentName=\"p\">{`ExtractEnergies`}</inlineCode>{` in the given experiment. `}</p>\n    <p>{`To retrieve a key-output we can use `}<inlineCode parentName=\"p\">{`api_rest_uid_output`}</inlineCode>{`. This method returns the contents as bytes so it needs to be converted to a string. Note: replace `}<inlineCode parentName=\"p\">{`OptimisationResults`}</inlineCode>{` with the name of a key-output relevant to an experiment you have run.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`filename, contents = api.api_rest_uid_output(rest_uid, 'OptimisationResults')\ncontents = contents.decode('utf-8', 'ignore')\n# read it into a pandas dataframe\ndf = pd.read_csv(io.StringIO(contents), sep=\",\", skipinitialspace=True)\n`}</code></pre>\n    <h3>{`Automatically uploading key-outputs to S3`}</h3>\n    <p>{`ST4SD supports automatically uploading key-outputs to S3.\nTo enable this feature include the following values in the `}<inlineCode parentName=\"p\">{`payload`}</inlineCode>{` you provide to `}<inlineCode parentName=\"p\">{`api.api_experiment_start(experimentId, payload)`}</inlineCode>{`\n(see `}<a parentName=\"p\" {...{\n        \"href\": \"#running-a-virtual-experiment\"\n      }}>{`Running a virtual experiment`}</a>{` for more information):`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`See the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/UsingCloudObjectStore\"\n        }}>{`Cloud Object Store`}</a>{` page for examples of getting the values to populate the `}<inlineCode parentName=\"p\">{`credentials`}</inlineCode>{` section.`}</p>\n    </InlineNotification>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Note that `}<inlineCode parentName=\"p\">{`bucketPath`}</inlineCode>{` is optional and it defaults to `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <p>{`The following example stores the key-outputs under `}<inlineCode parentName=\"p\">{`run1_output`}</inlineCode>{` in an bucket called`}<inlineCode parentName=\"p\">{`my-bucket`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"s3Store\":{\n      \"credentials\": {\n        \"accessKeyID\": \"$S3_AccessKeyID\",           \n        \"secretAccessKey\": \"$S3_SecretAccessKey\",            \n        \"endpoint\": \"$S3_ENDPOINT\",           \n        \"region\": \"$S3_Region\",  \n        \"bucket\": \"my-bucket\"\n      },\n      \"bucketPath\": \"/run1_output/\"\n    },\n`}</code></pre>\n    <h3>{`Listing outputs produced by virtual experiment components`}</h3>\n    <p>{`Before being able to retrieve the contents of the outputs files produced by the virtual experiment components we need to know their paths.\nWe start by retrieving the list of components that were part of our experiment through these two calls:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`metadata = api.cdb_get_user_metadata_document_for_rest_uid(rest_uid)\ncomponents = api.cdb_get_document_component(instance=metadata['instance'])\n`}</code></pre>\n    <p>{`The list of full paths of the output files produced by each components will then be available using the `}<inlineCode parentName=\"p\">{`files`}</inlineCode>{` key.\nWe can access it for component `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` as such:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`component_0_files=components[0]['files']\n`}</code></pre>\n    <h3>{`Retrieving outputs via the ST4SD Datastore APIs`}</h3>\n    <p>{`To retrieve outputs we use the `}<inlineCode parentName=\"p\">{`cdb_get_file_from_instance_uri`}</inlineCode>{` function.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`In this example we reference variables that we retrieved in the previous section (`}<a parentName=\"p\" {...{\n          \"href\": \"#listing-outputs-produced-by-virtual-experiment-components\"\n        }}>{`Listing outputs produced by virtual experiment components`}</a>{`)`}</p>\n    </InlineNotification>\n    <p>{`This function, however, expects to receive relative paths instead of full ones. We can change our list of paths with this list comprehension:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`component_0_files_relative = [component_file[component_file.index('/stages/'):] for component_file in component_0_files]\n`}</code></pre>\n    <p>{`Here we show how to retrieve the first file produced by component `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` from the previous example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`data = api.cdb_get_file_from_instance_uri(document[0]['instance'], component_0_files_relative[0])\n`}</code></pre>\n    <h2>{`Stopping a virtual experiment instance`}</h2>\n    <p>{`The API call to cancel and delete a virtual experiment instance is `}<inlineCode parentName=\"p\">{`api_rest_uid_delete`}</inlineCode>{`.\nUse this if you want to stop a run for any reason. `}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`api_rest_uid_delete()`}</inlineCode>{` method `}<em parentName=\"p\">{`does not affect the files`}</em>{` that the run has already generated. However, it does cause the run, and any components that are still running, to terminate. It also deletes any Kubernetes objects that have been created by the run.`}</p>\n    <p>{`You may also use this to delete Kubernetes objects created for running this virtual experiment instance. Note that deleting the virtual experiment instance `}<strong parentName=\"p\">{`does not`}</strong>{` affect the files that it has produced.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# put here the rest_uid of the virtual experiment instance\nrest_uid = \"toxicity-predictions-trol7a\"\n\napi.api_rest_uid_delete(rest_uid)\n`}</code></pre>\n    <h2>{`Next steps`}</h2>\n    <p>{`To learn how to get properties from a virtual experiment see: `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-a-virtual-experiment-interface\"\n      }}>{`Using a virtual experiment interface`}</a>{`.`}</p>\n    <p>{`To learn how to interact with virtual experiment from the terminal, see: `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/running-ve-via-terminal\"\n      }}>{`ST4SD and the OpenShift CLI`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","kind","small","isMDXComponent"],"sourceRoot":""}