{"componentChunkName":"component---src-pages-stp-mdx","path":"/stp/","result":{"pageContext":{"frontmatter":{"title":"The stp command line tool"},"relativePagePath":"/stp.mdx","titleType":"page","MdxNode":{"id":"cdae2ea6-d1a0-5910-9276-0292a0e83f61","children":[],"parent":"82f7929d-8f29-5669-b3f9-36d1a5b5e788","internal":{"content":"---\ntitle: The stp command line tool\n---\n\nimport { CarbonForIbmDotcom } from \"@carbon/pictograms-react\";\nimport { ArtTools_01 } from \"@carbon/pictograms-react\";\nimport { ServerOperatingSystems } from \"@carbon/pictograms-react\";\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThe `stp` command line tool provides a conversational-style interface that makes\nit simple for developers to create and manage virtual experiment packages.\n\n<InlineNotification kind=\"info\">\n\nYou can always use the `-h` flag to see additional help for each of the commands\nmentioned here.\n\n</InlineNotification>\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Logging in to your ST4SD instance</AnchorLink>\n  <AnchorLink>Downloading PVEPs</AnchorLink>\n  <AnchorLink>Pushing PVEPs</AnchorLink>\n  <AnchorLink>Importing PVEPs</AnchorLink>\n  <AnchorLink>Creating PVEPs</AnchorLink>\n  <AnchorLink>Updating PVEP definitions</AnchorLink>\n  <AnchorLink>Checking PVEP syntax</AnchorLink>\n  <AnchorLink>Managing multiple ST4SD instances</AnchorLink>\n  <AnchorLink>Advanced usage</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\n\n- You are familiar with ST4SD terminology such as Virtual Experiment,\n  Parameterised Virtual Experiment Package (PVEP), and Virtual Experiment\n  Instance. You read about it [here](/concepts#terminology).\n- Ensure you have correctly installed the ST4SD Runtime Core module\n  (instructions [here](/#try-it-yourself)).\n\n## Overview\n\n`stp` allows you to log in and interact with multiple ST4SD instances,\nsimplifying many of the day-to-day tasks that virtual experiment developers\nperform. This includes downloading, pushing, importing, creating, updating, and\nsyntax checking PVEPs.\n\n## Logging in to your ST4SD instance\n\nTo interact with ST4SD instances using `stp`, we need to log in first. The\nsimplest method is to use the code snippet provided by the Registry UI. If\nyou're already logged into your OpenShift cluster, you can copy and paste the\nfollowing command into your terminal to open the ST4SD Registry UI\nautomatically:\n\n```commandline\nopen \"https://$(oc get route st4sd-authentication -o jsonpath=\"{.spec.host}\")/registry-ui/\"\n```\n\nHere you will:\n\n1. Click on the **Login on stp** button\n2. Press the copy button in the information box that you're presented with and\n   paste the content of the information box in your terminal.\n3. Once prompted, type `y` and press Enter to continue to the authentication\n   service.\n4. Authenticate if necessary and copy the token that is displayed.\n5. Paste the token in the terminal and press Enter. The login process should now\n   be complete.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/logging-in-via-stp.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Downloading PVEPs\n\nThe ST4SD Registry allows users to easily access and explore _Parameterised\nVirtual Experiment Packages_ (PVEPs) through a user-friendly web interface.\nThrough the interface, users can browse available experiments, view their\ndetails, logs, and the results of their runs. Additionally, users can download\nexperiments by scrolling to the bottom of the page and clicking the \"Download\nJSON\" button. There may be instances, however, where they want to perform these\nactions programmatically. With `stp` this is trivial: let us imagine we want to\ndownload the\n[band-gap-dft-gamess-us](https://registry.st4sd.res.ibm.com/registry-ui/experiment/band-gap-dft-gamess-us)\nexperiment that is available on our public registry.\n\nWe can simply copy the link and run:\n\n```commandline\nstp package download https://registry.st4sd.res.ibm.com/registry-ui/experiment/band-gap-dft-gamess-us\n```\n\nFor the experiment JSON to be downloaded to our currently active directory.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-download.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Pushing PVEPs\n\nWe need to add experiments to our Registry instance before we can view or run\nthem. To do this, we can either create a local PVEP definition from scratch or\ndownload it from another instance (e.g., by using the `stp package download`\ncommand). Once we have the definition, we can use `stp` to push it to our\nregistry.\n\nAssuming our local file is called `nanopore-geometry-experiment.json` and is in\nour current directory, we can run:\n\n```commandline\nstp package push nanopore-geometry-experiment.json\n```\n\nAnd `stp` will add it to our Registry instance.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-push.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Importing PVEPs\n\nIn the previous sections, we learned how to download PVEPs and add them to our\nRegistry instance using the `download` and `push` commands. These commands are\nversatile and can be used in various scenarios. However, if our goal is simply\nto download a PVEP from an external instance and add it to our own, `stp` offers\nanother command, `import`, that can accomplish this task efficiently.\n\nCopy the link to the experiment you want to import and run:\n\n```commandline\nstp package import https://registry.st4sd.res.ibm.com/registry-ui/experiment/band-gap-dft-gamess-us\n```\n\nTo automatically add it to your Registry instance.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-import.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Creating PVEPs\n\n_Parameterised Virtual Experiment Packages_ (PVEPs) are parameterisations of our\nexperiments that need to be created before they can be added the Registry to be\nrun or shared. `stp` can help getting started with this by generating a valid,\nhigh-level PVEP that the user can later add details to.\n\n<InlineNotification kind=\"info\">\n\nThis feature requires for the experiment to be in a git repository.\n\n</InlineNotification>\n\nAs we need a virtual experiment to test this feature, we will use the\n[nanopore-geometry-experiment](https://github.com/st4sd/nanopore-geometry-experiment)\nexperiment as our starting point. Let us start by cloning it and `cd`-ing into\nits directory:\n\n```commandline\ngit clone https://github.com/st4sd/nanopore-geometry-experiment\ncd nanopore-geometry-experiment\n```\n\nTo create the PVEP we then need to run:\n\n```commandline\nstp package create --manifest manifest.yaml\n```\n\nThe resulting PVEP can be pushed to the Registry using the\n[`stp package push`](#pushing-pveps) command.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-create.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Updating PVEP definitions\n\nDuring the development phase of our virtual experiments, we will regularly\ncommit changes to the git repository.\n\nIf we are following the set of\n[best practices](/virtual-experiment-developer-best-practices#strong-versioning)\nwe have defined, the commit ID will be included in our PVEP, ensuring ST4SD\nexecutes the _exact_ version of our experiment, improving results\nreproducibility. Provided is an example of how this might look like in your\nPVEP:\n\n```json\n{\n  \"name\": \"nanopore-geometry-experiment\",\n  \"source\": {\n    \"git\": {\n      \"location\": {\n        \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n        \"commit\": \"85244f5c84d6c0e02aa7a2e1685b004cd0b3cdd2\"\n      }\n    }\n  }\n}\n```\n\nAdditionally, we might want to give a specific experiment version an\neasy-to-remember name by means of a tag. `stp` makes updating the commit ID and\nmetadata tags of our PVEP as painless as possible by providing the\n`update-definition` command. In the `nanopore-geometry-experiment` folder from\nthe previous example we can run:\n\n```commandline\nstp package update-definition --path nanopore-geometry-experiment.json \\\n        --use-latest-commit \\\n        --tag hello\n```\n\nThe PVEP definition may now look similar to the following:\n\n```json\n{\n  \"base\": {\n    \"packages\": [\n      {\n        \"name\": \"nanopore-geometry-experiment\",\n        \"source\": {\n          \"git\": {\n            \"location\": {\n              \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n              \"commit\": \"1682f979531ddef602440f0a3b146edb5916c001\"\n            }\n          }\n        },\n      }\n    ]\n  },\n  \"metadata\": {\n    \"package\": {\n      ...\n      \"tags\": [\n        \"hello\"\n      ],\n    }\n  },\n}\n```\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-update-definition.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Checking PVEP syntax\n\nWhen we manually edit our PVEPs, we risk making mistakes. Fortunately, `stp`\nincludes a syntax checker that can help us identify and fix our errors. Let's\nintentionally introduce a mistake into our `nanopore-geometry-experiment` PVEP,\nwhich we obtained earlier in this tutorial, by adding a `nonexistent` field to\nthe `metadata` section.\n\nHere's how the updated section now looks:\n\n```json\n\"metadata\": {\n  \"package\": {\n    \"name\": \"nanopore-geometry-experiment\",\n    \"tags\": [],\n    \"license\": \"\",\n    \"maintainer\": \"\",\n    \"description\": \"\",\n    \"nonexistent\": true,\n    \"keywords\": []\n  }\n},\n```\n\n`stp` will point us to the error when we run `stp package test`, as such:\n\n```commandline\nstp package test nanopore-geometry-experiment.json\nValidation error in instance['metadata']['package']:\nAdditional properties are not allowed ('nonexistent' was unexpected)\n```\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-test.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Managing multiple ST4SD instances\n\nWith `stp` it is possible to log in to multiple ST4SD instances - which we refer\nto as _contexts_ - and quickly switch between them.\n\n<AnchorLinks small>\n  <AnchorLink>Getting the currently active context</AnchorLink>\n  <AnchorLink>Listing the available contexts</AnchorLink>\n  <AnchorLink>Changing the active context</AnchorLink>\n  <AnchorLink>Renaming a context</AnchorLink>\n  <AnchorLink>Deleting a context</AnchorLink>\n</AnchorLinks>\n\n### Getting the currently active context\n\nTo see what the currently active context - meaning the ST4SD instance that `stp`\nwill run commands against - is, you can use the `stp context show` command. By\ndefault, it will only print the name of the context, but an option is provided\nto also print out the URL of the ST4SD instance for the context.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-show.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Listing the available contexts\n\nTo see what instances you have logged in to, you can use the `stp context list`\ncommand. By default, the results will be printed as a table but this can be\ndisabled with the `--simple` flag.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-list.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Changing the active context\n\nIn case you need your commands to target a different `stp` context from the one\ncurrently active (as shown by `stp context show`), you can use the\n`stp context activate` command.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-activate.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Renaming a context\n\nIf you created a context without specifying the `--context-name` flag, you might\nhave ended up with a context whose name is the full URL of the instance. You can\nchange this with `stp context rename`.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-rename.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Deleting a context\n\nIf you no longer need one of the existing contexts, you can remove it with\n`stp context delete`.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-delete.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Advanced usage\n\n`stp` offers some additional commands for more advanced useDebugValue, such as\ninteracting with stack-wide settings.\n\n<AnchorLinks small>\n  <AnchorLink>Listing available pull secrets</AnchorLink>\n  <AnchorLink>Adding an image pull secret</AnchorLink>\n</AnchorLinks>\n\n### Listing available pull secrets\n\nNot all images are available publicly, some may be private and require\nauthentication. When importing or pushing a package with `stp package import` or\n`stp package push`, `stp` will check for you if an image pull secret is\navailable for the registries referenced by your PVEP and emit a warning if that\nisn't the case. To see what image pull secrets are available to use in ST4SD,\nyou can use the `stp stack pull-secrets list` command.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-list.mp4\"></Video>\n</Column>\n\n### Adding an image pull secret\n\nIf you are working with a private image registry, you will need to ensure ST4SD\nhas credentials to pull the images. To do so, you can use the\n`stp stack pull-secrets add` command: set a name for the secret with the\n`--name` flag, pass one or more registries URLs with the `--registry` flag, and\nthe username with `--username`. For the password/access token you have two\noptions: either passing it directly via the `-t` flag, or by writing it in a\nfile and using the `--token-file` flag (this will prevent leaking the credential\nin your shell history).\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-add.mp4\"></Video>\n</Column>\n\n## Learn more\n\n<div className=\"expressive-content-list-group\">\n\n  <ExpressiveList \n    title=\"Exploring the Registry UI\"\n    background=\"true\"\n    pictogram={<CarbonForIbmDotcom />}>\n\nLearn about all the features of\n[our web interface](/using-the-virtual-experiments-registry-ui) for browsing and\nexamining virtual experiments packages and runs. You can visit the\n[ST4SD Global Registry](https://registry.st4sd.res.ibm.com/) for a first look.\n\n  </ExpressiveList>\n\n  <ExpressiveList\n    title=\"No Code, No Fuss creation of Experiments\"\n    background=\"true\"\n    pictogram={<ArtTools_01 />}>\n\nUse\n[an interactive Build Canvas and a Graph Library](/build-canvas)\nto create and modify experiments straight from your browser.\n\n  </ExpressiveList>\n\n  <ExpressiveList\n    title=\"Use the APIs\"\n    background=\"true\"\n    pictogram={<ServerOperatingSystems />}>\n\n[Learn](/running-workflows-on-openshift) how to use the ST4SD python client API\nto run, query, and interact with virtual experiments. The APIs also offer access\nto a trove of experiment metadata and files such as logs and outputs. You can\nfind more examples in our Jupyter Notebooks\n[example repository](https://github.com/st4sd/st4sd-examples).\n\n  </ExpressiveList>\n\n</div>\n","type":"Mdx","contentDigest":"cdcb71d10593ee3ac3bfd85e915cadbb","owner":"gatsby-plugin-mdx","counter":270},"frontmatter":{"title":"The stp command line tool"},"exports":{},"rawBody":"---\ntitle: The stp command line tool\n---\n\nimport { CarbonForIbmDotcom } from \"@carbon/pictograms-react\";\nimport { ArtTools_01 } from \"@carbon/pictograms-react\";\nimport { ServerOperatingSystems } from \"@carbon/pictograms-react\";\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThe `stp` command line tool provides a conversational-style interface that makes\nit simple for developers to create and manage virtual experiment packages.\n\n<InlineNotification kind=\"info\">\n\nYou can always use the `-h` flag to see additional help for each of the commands\nmentioned here.\n\n</InlineNotification>\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Logging in to your ST4SD instance</AnchorLink>\n  <AnchorLink>Downloading PVEPs</AnchorLink>\n  <AnchorLink>Pushing PVEPs</AnchorLink>\n  <AnchorLink>Importing PVEPs</AnchorLink>\n  <AnchorLink>Creating PVEPs</AnchorLink>\n  <AnchorLink>Updating PVEP definitions</AnchorLink>\n  <AnchorLink>Checking PVEP syntax</AnchorLink>\n  <AnchorLink>Managing multiple ST4SD instances</AnchorLink>\n  <AnchorLink>Advanced usage</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\n\n- You are familiar with ST4SD terminology such as Virtual Experiment,\n  Parameterised Virtual Experiment Package (PVEP), and Virtual Experiment\n  Instance. You read about it [here](/concepts#terminology).\n- Ensure you have correctly installed the ST4SD Runtime Core module\n  (instructions [here](/#try-it-yourself)).\n\n## Overview\n\n`stp` allows you to log in and interact with multiple ST4SD instances,\nsimplifying many of the day-to-day tasks that virtual experiment developers\nperform. This includes downloading, pushing, importing, creating, updating, and\nsyntax checking PVEPs.\n\n## Logging in to your ST4SD instance\n\nTo interact with ST4SD instances using `stp`, we need to log in first. The\nsimplest method is to use the code snippet provided by the Registry UI. If\nyou're already logged into your OpenShift cluster, you can copy and paste the\nfollowing command into your terminal to open the ST4SD Registry UI\nautomatically:\n\n```commandline\nopen \"https://$(oc get route st4sd-authentication -o jsonpath=\"{.spec.host}\")/registry-ui/\"\n```\n\nHere you will:\n\n1. Click on the **Login on stp** button\n2. Press the copy button in the information box that you're presented with and\n   paste the content of the information box in your terminal.\n3. Once prompted, type `y` and press Enter to continue to the authentication\n   service.\n4. Authenticate if necessary and copy the token that is displayed.\n5. Paste the token in the terminal and press Enter. The login process should now\n   be complete.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/logging-in-via-stp.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Downloading PVEPs\n\nThe ST4SD Registry allows users to easily access and explore _Parameterised\nVirtual Experiment Packages_ (PVEPs) through a user-friendly web interface.\nThrough the interface, users can browse available experiments, view their\ndetails, logs, and the results of their runs. Additionally, users can download\nexperiments by scrolling to the bottom of the page and clicking the \"Download\nJSON\" button. There may be instances, however, where they want to perform these\nactions programmatically. With `stp` this is trivial: let us imagine we want to\ndownload the\n[band-gap-dft-gamess-us](https://registry.st4sd.res.ibm.com/registry-ui/experiment/band-gap-dft-gamess-us)\nexperiment that is available on our public registry.\n\nWe can simply copy the link and run:\n\n```commandline\nstp package download https://registry.st4sd.res.ibm.com/registry-ui/experiment/band-gap-dft-gamess-us\n```\n\nFor the experiment JSON to be downloaded to our currently active directory.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-download.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Pushing PVEPs\n\nWe need to add experiments to our Registry instance before we can view or run\nthem. To do this, we can either create a local PVEP definition from scratch or\ndownload it from another instance (e.g., by using the `stp package download`\ncommand). Once we have the definition, we can use `stp` to push it to our\nregistry.\n\nAssuming our local file is called `nanopore-geometry-experiment.json` and is in\nour current directory, we can run:\n\n```commandline\nstp package push nanopore-geometry-experiment.json\n```\n\nAnd `stp` will add it to our Registry instance.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-push.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Importing PVEPs\n\nIn the previous sections, we learned how to download PVEPs and add them to our\nRegistry instance using the `download` and `push` commands. These commands are\nversatile and can be used in various scenarios. However, if our goal is simply\nto download a PVEP from an external instance and add it to our own, `stp` offers\nanother command, `import`, that can accomplish this task efficiently.\n\nCopy the link to the experiment you want to import and run:\n\n```commandline\nstp package import https://registry.st4sd.res.ibm.com/registry-ui/experiment/band-gap-dft-gamess-us\n```\n\nTo automatically add it to your Registry instance.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-import.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Creating PVEPs\n\n_Parameterised Virtual Experiment Packages_ (PVEPs) are parameterisations of our\nexperiments that need to be created before they can be added the Registry to be\nrun or shared. `stp` can help getting started with this by generating a valid,\nhigh-level PVEP that the user can later add details to.\n\n<InlineNotification kind=\"info\">\n\nThis feature requires for the experiment to be in a git repository.\n\n</InlineNotification>\n\nAs we need a virtual experiment to test this feature, we will use the\n[nanopore-geometry-experiment](https://github.com/st4sd/nanopore-geometry-experiment)\nexperiment as our starting point. Let us start by cloning it and `cd`-ing into\nits directory:\n\n```commandline\ngit clone https://github.com/st4sd/nanopore-geometry-experiment\ncd nanopore-geometry-experiment\n```\n\nTo create the PVEP we then need to run:\n\n```commandline\nstp package create --manifest manifest.yaml\n```\n\nThe resulting PVEP can be pushed to the Registry using the\n[`stp package push`](#pushing-pveps) command.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-create.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Updating PVEP definitions\n\nDuring the development phase of our virtual experiments, we will regularly\ncommit changes to the git repository.\n\nIf we are following the set of\n[best practices](/virtual-experiment-developer-best-practices#strong-versioning)\nwe have defined, the commit ID will be included in our PVEP, ensuring ST4SD\nexecutes the _exact_ version of our experiment, improving results\nreproducibility. Provided is an example of how this might look like in your\nPVEP:\n\n```json\n{\n  \"name\": \"nanopore-geometry-experiment\",\n  \"source\": {\n    \"git\": {\n      \"location\": {\n        \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n        \"commit\": \"85244f5c84d6c0e02aa7a2e1685b004cd0b3cdd2\"\n      }\n    }\n  }\n}\n```\n\nAdditionally, we might want to give a specific experiment version an\neasy-to-remember name by means of a tag. `stp` makes updating the commit ID and\nmetadata tags of our PVEP as painless as possible by providing the\n`update-definition` command. In the `nanopore-geometry-experiment` folder from\nthe previous example we can run:\n\n```commandline\nstp package update-definition --path nanopore-geometry-experiment.json \\\n        --use-latest-commit \\\n        --tag hello\n```\n\nThe PVEP definition may now look similar to the following:\n\n```json\n{\n  \"base\": {\n    \"packages\": [\n      {\n        \"name\": \"nanopore-geometry-experiment\",\n        \"source\": {\n          \"git\": {\n            \"location\": {\n              \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n              \"commit\": \"1682f979531ddef602440f0a3b146edb5916c001\"\n            }\n          }\n        },\n      }\n    ]\n  },\n  \"metadata\": {\n    \"package\": {\n      ...\n      \"tags\": [\n        \"hello\"\n      ],\n    }\n  },\n}\n```\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-update-definition.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Checking PVEP syntax\n\nWhen we manually edit our PVEPs, we risk making mistakes. Fortunately, `stp`\nincludes a syntax checker that can help us identify and fix our errors. Let's\nintentionally introduce a mistake into our `nanopore-geometry-experiment` PVEP,\nwhich we obtained earlier in this tutorial, by adding a `nonexistent` field to\nthe `metadata` section.\n\nHere's how the updated section now looks:\n\n```json\n\"metadata\": {\n  \"package\": {\n    \"name\": \"nanopore-geometry-experiment\",\n    \"tags\": [],\n    \"license\": \"\",\n    \"maintainer\": \"\",\n    \"description\": \"\",\n    \"nonexistent\": true,\n    \"keywords\": []\n  }\n},\n```\n\n`stp` will point us to the error when we run `stp package test`, as such:\n\n```commandline\nstp package test nanopore-geometry-experiment.json\nValidation error in instance['metadata']['package']:\nAdditional properties are not allowed ('nonexistent' was unexpected)\n```\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-package-test.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Managing multiple ST4SD instances\n\nWith `stp` it is possible to log in to multiple ST4SD instances - which we refer\nto as _contexts_ - and quickly switch between them.\n\n<AnchorLinks small>\n  <AnchorLink>Getting the currently active context</AnchorLink>\n  <AnchorLink>Listing the available contexts</AnchorLink>\n  <AnchorLink>Changing the active context</AnchorLink>\n  <AnchorLink>Renaming a context</AnchorLink>\n  <AnchorLink>Deleting a context</AnchorLink>\n</AnchorLinks>\n\n### Getting the currently active context\n\nTo see what the currently active context - meaning the ST4SD instance that `stp`\nwill run commands against - is, you can use the `stp context show` command. By\ndefault, it will only print the name of the context, but an option is provided\nto also print out the URL of the ST4SD instance for the context.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-show.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Listing the available contexts\n\nTo see what instances you have logged in to, you can use the `stp context list`\ncommand. By default, the results will be printed as a table but this can be\ndisabled with the `--simple` flag.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-list.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Changing the active context\n\nIn case you need your commands to target a different `stp` context from the one\ncurrently active (as shown by `stp context show`), you can use the\n`stp context activate` command.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-activate.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Renaming a context\n\nIf you created a context without specifying the `--context-name` flag, you might\nhave ended up with a context whose name is the full URL of the instance. You can\nchange this with `stp context rename`.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-rename.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n### Deleting a context\n\nIf you no longer need one of the existing contexts, you can remove it with\n`stp context delete`.\n\n<Accordion>\n\n  <AccordionItem title=\"View video walkthrough\">\n\n<Video src=\"../assets/videos/stp/stp-context-delete.mp4\"></Video>\n\n  </AccordionItem>\n\n</Accordion>\n\n## Advanced usage\n\n`stp` offers some additional commands for more advanced useDebugValue, such as\ninteracting with stack-wide settings.\n\n<AnchorLinks small>\n  <AnchorLink>Listing available pull secrets</AnchorLink>\n  <AnchorLink>Adding an image pull secret</AnchorLink>\n</AnchorLinks>\n\n### Listing available pull secrets\n\nNot all images are available publicly, some may be private and require\nauthentication. When importing or pushing a package with `stp package import` or\n`stp package push`, `stp` will check for you if an image pull secret is\navailable for the registries referenced by your PVEP and emit a warning if that\nisn't the case. To see what image pull secrets are available to use in ST4SD,\nyou can use the `stp stack pull-secrets list` command.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-list.mp4\"></Video>\n</Column>\n\n### Adding an image pull secret\n\nIf you are working with a private image registry, you will need to ensure ST4SD\nhas credentials to pull the images. To do so, you can use the\n`stp stack pull-secrets add` command: set a name for the secret with the\n`--name` flag, pass one or more registries URLs with the `--registry` flag, and\nthe username with `--username`. For the password/access token you have two\noptions: either passing it directly via the `-t` flag, or by writing it in a\nfile and using the `--token-file` flag (this will prevent leaking the credential\nin your shell history).\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-add.mp4\"></Video>\n</Column>\n\n## Learn more\n\n<div className=\"expressive-content-list-group\">\n\n  <ExpressiveList \n    title=\"Exploring the Registry UI\"\n    background=\"true\"\n    pictogram={<CarbonForIbmDotcom />}>\n\nLearn about all the features of\n[our web interface](/using-the-virtual-experiments-registry-ui) for browsing and\nexamining virtual experiments packages and runs. You can visit the\n[ST4SD Global Registry](https://registry.st4sd.res.ibm.com/) for a first look.\n\n  </ExpressiveList>\n\n  <ExpressiveList\n    title=\"No Code, No Fuss creation of Experiments\"\n    background=\"true\"\n    pictogram={<ArtTools_01 />}>\n\nUse\n[an interactive Build Canvas and a Graph Library](/build-canvas)\nto create and modify experiments straight from your browser.\n\n  </ExpressiveList>\n\n  <ExpressiveList\n    title=\"Use the APIs\"\n    background=\"true\"\n    pictogram={<ServerOperatingSystems />}>\n\n[Learn](/running-workflows-on-openshift) how to use the ST4SD python client API\nto run, query, and interact with virtual experiments. The APIs also offer access\nto a trove of experiment metadata and files such as logs and outputs. You can\nfind more examples in our Jupyter Notebooks\n[example repository](https://github.com/st4sd/st4sd-examples).\n\n  </ExpressiveList>\n\n</div>\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/stp.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}