{"componentChunkName":"component---src-pages-stp-mdx","path":"/stp/","result":{"pageContext":{"frontmatter":{"title":"The stp command line tool"},"relativePagePath":"/stp.mdx","titleType":"page","MdxNode":{"id":"cdae2ea6-d1a0-5910-9276-0292a0e83f61","children":[],"parent":"82f7929d-8f29-5669-b3f9-36d1a5b5e788","internal":{"content":"---\ntitle: The stp command line tool\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThe `stp` command line tool simplifies common operations in ST4SD and performs\nadditional checks so you don't have to.\n\n<InlineNotification kind=\"info\">\n\n**NOTE:** for all commands, you can always add the `-h` or `--help` flag to see\nall the available options and descriptions.\n\n</InlineNotification>\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Logging in to your ST4SD instance</AnchorLink>\n  <AnchorLink>Working with PVEPs</AnchorLink>\n  <AnchorLink>Working with contexts</AnchorLink>\n  <AnchorLink>Working with stack-wide settings</AnchorLink>\n</AnchorLinks>\n\n## Logging in to your ST4SD instance\n\n<InlineNotification kind=\"info\">\n\n**NOTE:** `stp` supports multiple ST4SD instances at the same time.\n\n</InlineNotification>\n\nThe easiest way to log into your ST4SD instance via `stp` is to use the snippet\nin the Registry UI. If you're logged into your OpenShift cluster, you can paste\nthe following command in your terminal to automatically open the ST4SD Registry\nUI:\n\n```commandline\nopen \"https://$(oc get route st4sd-authentication -o jsonpath=\"{.spec.host}\")/registry-ui/\"\n```\n\nHere you will:\n\n1. Click on the **Login on stp** button\n2. Press the copy button in the information box that you're presented with and\n   paste the content of the information box in your terminal.\n3. Once prompted, write `y` and press enter in your terminal to be brought to\n   the authentication service.\n4. Authenticate if needed and copy the token that is displayed.\n5. Paste the token in the terminal and press enter. The login procedure should\n   be completed soon.\n\nYou can also follow this video walkthrough:\n\n<Video src=\"../assets/videos/stp/logging-in-via-stp.mp4\"></Video>\n\n## Working with PVEPs\n\n<AnchorLinks small>\n  <AnchorLink>Creating a PVEP</AnchorLink>\n  <AnchorLink>Downloading a PVEP</AnchorLink>\n  <AnchorLink>Importing a PVEP</AnchorLink>\n  <AnchorLink>Pushing a PVEP</AnchorLink>\n  <AnchorLink>Testing a PVEP</AnchorLink>\n  <AnchorLink>Updating a PVEP's definition</AnchorLink>\n</AnchorLinks>\n\n### Creating a PVEP\n\nTo publish an experiment to our registry after\n[writing a workflow](/workflow-specification), we need to create a\n_Parameterised Virtual Experiment Package_ -or PVEP for short- that defines how\nto run a virtual experiment in a particular way. `stp` can create a working\ntemplate for you with the `stp package create` command. Set the `--from` flag to\npoint to a git repository containing your experiment and optionally the\n`--manifest` flag (in case your experiment has a manifest).\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-create.mp4\"></Video>\n</Column>\n\n### Downloading a PVEP\n\n`stp` helps us programmatically download a PVEP definition via the\n`stp package download` command. If you're downloading a PVEP from a registry\nthat requires authentication, you can add the `--from-context` flag to ensure\n`stp` can authenticate correctly.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-download.mp4\"></Video>\n</Column>\n\n### Importing a PVEP\n\nST4SD provides a\n[public registry of virtual experiments](https://registry.st4sd.res.ibm.com/)\nthat you can freely import from. To help you import PVEPs from any registry to\nyour own instance, `stp` provides the `stp package import` command. Make sure\nyou add the `--from-context` flag if you're importing from a private ST4SD\ninstance to ensure `stp` can authenticate correctly.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-import.mp4\"></Video>\n</Column>\n\n### Pushing a PVEP\n\n`stp` makes it easy for you to push PVEPs to registry instances, simply run\n`stp package push` and give it the path to your PVEP for it to be added to the\nregistry from your active context.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-push.mp4\"></Video>\n</Column>\n\n### Testing a PVEP\n\n`stp` supports testing PVEP syntax locally before pushing them to the Registry.\nSimply run `stp package test` and give it the path to the PVEP you want to test.\n**NOTE: there will be no output in case of no errors**.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-test.mp4\"></Video>\n</Column>\n\n### Updating a PVEP's definition\n\nDuring development, you will likely make multiple commits to your repository,\nand if you're following the\n[best practices](/virtual-experiment-developer-best-practices) we wrote, this\nwill mean having to update the commit ID in your PVEP. For this, and for\nmodifying tags, `stp` offers the `stp package update-definition` command. Set\nthe path to the PVEP with the `--path` flag; then, the `--use-latest-commit`\nflag will update the `commit` field to the HEAD of the local repository, while\nby passing one or more `--tag` flags, you'll be able to set the tags of your\nPVEP.\n\n<InlineNotification kind=\"warning\">\n\n**NOTE:** for this command to work, the `--path` containing the PVEP must belong\nto a git repository.\n\n</InlineNotification>\n\n<InlineNotification kind=\"warning\">\n\n**NOTE:** by default, the PVEP will be overwritten, but you can pass a path to\nthe `--output` flag to change this behavior.\n\n</InlineNotification>\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-update-definition.mp4\"></Video>\n</Column>\n\n## Working with contexts\n\n<AnchorLinks small>\n  <AnchorLink>Showing the active context</AnchorLink>\n  <AnchorLink>Listing all the available contexts</AnchorLink>\n  <AnchorLink>Changing the active context</AnchorLink>\n  <AnchorLink>Deleting a context</AnchorLink>\n  <AnchorLink>Renaming a context</AnchorLink>\n</AnchorLinks>\n\n### Showing the active context\n\nWhen working with multiple contexts in `stp`, it can be useful to check which\none we are currently using.\n\nThis can be done with:\n\n```commandline\nstp context show\n```\n\nAdditionally, if you also want to see the URL that the context is for, you can\nadd the `--show-url` flag:\n\n```commandline\nstp context show --show-url\n```\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-show.mp4\"></Video>\n</Column>\n\n### Listing all the available contexts\n\nTo see all the contexts that are available for you in `stp`, you can use the\ncommand:\n\n```commandline\nstp context list\n```\n\nAs before, you can add the `--show-url` flag to also see the URLs the contexts\nare for:\n\n```commandline\nstp context list --show-url\n```\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-list.mp4\"></Video>\n</Column>\n\n### Changing the active context\n\nTo change the active context (the one output by `stp context show`) you can use\nthe `stp context activate` command, passing it the name of one of the available\ncontexts:\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-activate.mp4\"></Video>\n</Column>\n\n### Deleting a context\n\nTo remove a context and its associated credentials you can use the\n`stp context delete` command, passing it the name of the context you want to\ndelete.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-delete.mp4\"></Video>\n</Column>\n\n### Renaming a context\n\nIn case you don't like the name of one of the contexts, you can always rename it\nvia `stp context rename`, passing it the name of the context you want to rename\nand setting the `--to` flag to the new name.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-rename.mp4\"></Video>\n</Column>\n\n## Working with stack-wide settings\n\n<AnchorLinks small>\n  <AnchorLink>Listing available pull secrets</AnchorLink>\n  <AnchorLink>Adding an image pull secret</AnchorLink>\n</AnchorLinks>\n\n### Listing available pull secrets\n\nNot all images are available publicly, some may be private and require\nauthentication. When importing or pushing a package with `stp package import` or\n`stp package push`, `stp` will check for you if an image pull secret is\navailable for the registries referenced by your PVEP and emit a warning if that\nisn't the case. To see what image pull secrets are available to use in ST4SD,\nyou can use the `stp stack pull-secrets list` command.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-list.mp4\"></Video>\n</Column>\n\n### Adding an image pull secret\n\nIf you are working with a private image registry, you will need to ensure ST4SD\nhas credentials to pull the images. To do so, you can use the\n`stp stack pull-secrets add` command: set a name for the secret with the\n`--name` flag, pass one or more registries URLs with the `--registry` flag, and\nthe username with `--username`. For the password/access token you have two\noptions: either passing it directly via the `-t` flag, or by writing it in a\nfile and using the `--token-file` flag (this will prevent leaking the credential\nin your shell history).\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-add.mp4\"></Video>\n</Column>","type":"Mdx","contentDigest":"d8e5fabd324e5c4586322ac1562b7be4","owner":"gatsby-plugin-mdx","counter":256},"frontmatter":{"title":"The stp command line tool"},"exports":{},"rawBody":"---\ntitle: The stp command line tool\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThe `stp` command line tool simplifies common operations in ST4SD and performs\nadditional checks so you don't have to.\n\n<InlineNotification kind=\"info\">\n\n**NOTE:** for all commands, you can always add the `-h` or `--help` flag to see\nall the available options and descriptions.\n\n</InlineNotification>\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Logging in to your ST4SD instance</AnchorLink>\n  <AnchorLink>Working with PVEPs</AnchorLink>\n  <AnchorLink>Working with contexts</AnchorLink>\n  <AnchorLink>Working with stack-wide settings</AnchorLink>\n</AnchorLinks>\n\n## Logging in to your ST4SD instance\n\n<InlineNotification kind=\"info\">\n\n**NOTE:** `stp` supports multiple ST4SD instances at the same time.\n\n</InlineNotification>\n\nThe easiest way to log into your ST4SD instance via `stp` is to use the snippet\nin the Registry UI. If you're logged into your OpenShift cluster, you can paste\nthe following command in your terminal to automatically open the ST4SD Registry\nUI:\n\n```commandline\nopen \"https://$(oc get route st4sd-authentication -o jsonpath=\"{.spec.host}\")/registry-ui/\"\n```\n\nHere you will:\n\n1. Click on the **Login on stp** button\n2. Press the copy button in the information box that you're presented with and\n   paste the content of the information box in your terminal.\n3. Once prompted, write `y` and press enter in your terminal to be brought to\n   the authentication service.\n4. Authenticate if needed and copy the token that is displayed.\n5. Paste the token in the terminal and press enter. The login procedure should\n   be completed soon.\n\nYou can also follow this video walkthrough:\n\n<Video src=\"../assets/videos/stp/logging-in-via-stp.mp4\"></Video>\n\n## Working with PVEPs\n\n<AnchorLinks small>\n  <AnchorLink>Creating a PVEP</AnchorLink>\n  <AnchorLink>Downloading a PVEP</AnchorLink>\n  <AnchorLink>Importing a PVEP</AnchorLink>\n  <AnchorLink>Pushing a PVEP</AnchorLink>\n  <AnchorLink>Testing a PVEP</AnchorLink>\n  <AnchorLink>Updating a PVEP's definition</AnchorLink>\n</AnchorLinks>\n\n### Creating a PVEP\n\nTo publish an experiment to our registry after\n[writing a workflow](/workflow-specification), we need to create a\n_Parameterised Virtual Experiment Package_ -or PVEP for short- that defines how\nto run a virtual experiment in a particular way. `stp` can create a working\ntemplate for you with the `stp package create` command. Set the `--from` flag to\npoint to a git repository containing your experiment and optionally the\n`--manifest` flag (in case your experiment has a manifest).\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-create.mp4\"></Video>\n</Column>\n\n### Downloading a PVEP\n\n`stp` helps us programmatically download a PVEP definition via the\n`stp package download` command. If you're downloading a PVEP from a registry\nthat requires authentication, you can add the `--from-context` flag to ensure\n`stp` can authenticate correctly.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-download.mp4\"></Video>\n</Column>\n\n### Importing a PVEP\n\nST4SD provides a\n[public registry of virtual experiments](https://registry.st4sd.res.ibm.com/)\nthat you can freely import from. To help you import PVEPs from any registry to\nyour own instance, `stp` provides the `stp package import` command. Make sure\nyou add the `--from-context` flag if you're importing from a private ST4SD\ninstance to ensure `stp` can authenticate correctly.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-import.mp4\"></Video>\n</Column>\n\n### Pushing a PVEP\n\n`stp` makes it easy for you to push PVEPs to registry instances, simply run\n`stp package push` and give it the path to your PVEP for it to be added to the\nregistry from your active context.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-push.mp4\"></Video>\n</Column>\n\n### Testing a PVEP\n\n`stp` supports testing PVEP syntax locally before pushing them to the Registry.\nSimply run `stp package test` and give it the path to the PVEP you want to test.\n**NOTE: there will be no output in case of no errors**.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-test.mp4\"></Video>\n</Column>\n\n### Updating a PVEP's definition\n\nDuring development, you will likely make multiple commits to your repository,\nand if you're following the\n[best practices](/virtual-experiment-developer-best-practices) we wrote, this\nwill mean having to update the commit ID in your PVEP. For this, and for\nmodifying tags, `stp` offers the `stp package update-definition` command. Set\nthe path to the PVEP with the `--path` flag; then, the `--use-latest-commit`\nflag will update the `commit` field to the HEAD of the local repository, while\nby passing one or more `--tag` flags, you'll be able to set the tags of your\nPVEP.\n\n<InlineNotification kind=\"warning\">\n\n**NOTE:** for this command to work, the `--path` containing the PVEP must belong\nto a git repository.\n\n</InlineNotification>\n\n<InlineNotification kind=\"warning\">\n\n**NOTE:** by default, the PVEP will be overwritten, but you can pass a path to\nthe `--output` flag to change this behavior.\n\n</InlineNotification>\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-package-update-definition.mp4\"></Video>\n</Column>\n\n## Working with contexts\n\n<AnchorLinks small>\n  <AnchorLink>Showing the active context</AnchorLink>\n  <AnchorLink>Listing all the available contexts</AnchorLink>\n  <AnchorLink>Changing the active context</AnchorLink>\n  <AnchorLink>Deleting a context</AnchorLink>\n  <AnchorLink>Renaming a context</AnchorLink>\n</AnchorLinks>\n\n### Showing the active context\n\nWhen working with multiple contexts in `stp`, it can be useful to check which\none we are currently using.\n\nThis can be done with:\n\n```commandline\nstp context show\n```\n\nAdditionally, if you also want to see the URL that the context is for, you can\nadd the `--show-url` flag:\n\n```commandline\nstp context show --show-url\n```\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-show.mp4\"></Video>\n</Column>\n\n### Listing all the available contexts\n\nTo see all the contexts that are available for you in `stp`, you can use the\ncommand:\n\n```commandline\nstp context list\n```\n\nAs before, you can add the `--show-url` flag to also see the URLs the contexts\nare for:\n\n```commandline\nstp context list --show-url\n```\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-list.mp4\"></Video>\n</Column>\n\n### Changing the active context\n\nTo change the active context (the one output by `stp context show`) you can use\nthe `stp context activate` command, passing it the name of one of the available\ncontexts:\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-activate.mp4\"></Video>\n</Column>\n\n### Deleting a context\n\nTo remove a context and its associated credentials you can use the\n`stp context delete` command, passing it the name of the context you want to\ndelete.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-delete.mp4\"></Video>\n</Column>\n\n### Renaming a context\n\nIn case you don't like the name of one of the contexts, you can always rename it\nvia `stp context rename`, passing it the name of the context you want to rename\nand setting the `--to` flag to the new name.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-context-rename.mp4\"></Video>\n</Column>\n\n## Working with stack-wide settings\n\n<AnchorLinks small>\n  <AnchorLink>Listing available pull secrets</AnchorLink>\n  <AnchorLink>Adding an image pull secret</AnchorLink>\n</AnchorLinks>\n\n### Listing available pull secrets\n\nNot all images are available publicly, some may be private and require\nauthentication. When importing or pushing a package with `stp package import` or\n`stp package push`, `stp` will check for you if an image pull secret is\navailable for the registries referenced by your PVEP and emit a warning if that\nisn't the case. To see what image pull secrets are available to use in ST4SD,\nyou can use the `stp stack pull-secrets list` command.\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-list.mp4\"></Video>\n</Column>\n\n### Adding an image pull secret\n\nIf you are working with a private image registry, you will need to ensure ST4SD\nhas credentials to pull the images. To do so, you can use the\n`stp stack pull-secrets add` command: set a name for the secret with the\n`--name` flag, pass one or more registries URLs with the `--registry` flag, and\nthe username with `--username`. For the password/access token you have two\noptions: either passing it directly via the `-t` flag, or by writing it in a\nfile and using the `--token-file` flag (this will prevent leaking the credential\nin your shell history).\n\n<Column colMd={5} colLg={8}>\n  <Video src=\"../assets/videos/stp/stp-stack-pull-secrets-add.mp4\"></Video>\n</Column>","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/stp.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}