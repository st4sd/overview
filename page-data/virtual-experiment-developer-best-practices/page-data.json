{"componentChunkName":"component---src-pages-virtual-experiment-developer-best-practices-mdx","path":"/virtual-experiment-developer-best-practices/","result":{"pageContext":{"frontmatter":{"title":"Virtual Experiment Best Practices"},"relativePagePath":"/virtual-experiment-developer-best-practices.mdx","titleType":"page","MdxNode":{"id":"855a6914-34d5-54ae-9a02-467ea98b4e77","children":[],"parent":"e730d591-ae95-5cff-b8fd-042b41c1f238","internal":{"content":"---\ntitle: Virtual Experiment Best Practices\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nUse this page to learn the best practices for developing virtual experiments.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Strong versioning</AnchorLink>\n  <AnchorLink>Coding style and guidelines</AnchorLink>\n  <AnchorLink>CI/CD and testing</AnchorLink>\n  <AnchorLink>Developer metadata</AnchorLink>\n</AnchorLinks>\n\nThis page collects a set of best practices for developing virtual experiments that are driven by our experience in this field.\nWhile choosing whether to follow them or not is up to the developer, the Registry UI will test and display a status report for \nsome of the most important ones.\n\n<InlineNotification>\n\nEach of the guidelines will explicitly state whether it is tested by the Registry \nor it is just a convention that should be followed, with the emojis having the following\nmeanings:\n\n- ✅ tested by the registry now.\n\n- ☑️ will be tested by the registry in the future.\n\n- ⚠️ convention: not testable, but recommend to follow.\n\n</InlineNotification>\n\n## Strong versioning\n\nFor an experiment to be repeatable we need to ensure that the underlying pieces that make up the experiment will not change over time.\nThis translates to the following set of requirements:\n\n<Accordion>\n<AccordionItem title=\"✅ Use tagged container images\">\n\nContainer images should not use the `latest` tag (explicitly or implicitly),\nas it is more likely to be updated.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Use strong identifiers for base packages\">\n\n[Base package sources](/creating-a-parameterised-package/#sources) \nshould be hosted on a platform that supports versioning (e.g., git) \nand reference an identifier that will not change over time (e.g., a commit ID).\n  \n</AccordionItem>\n</Accordion>\n\n## Coding style and guidelines\n\nThe following guidelines ensure your virtual experiment leverage ST4SD functionalities as best they can\nwhile also providing reusability.\n\n<Accordion>\n<AccordionItem title=\"✅ Include a virtual experiment interface\">\n\nExperiments should always include an [interface](/writing-a-virtual-experiment-interface) to simplify information\nretrieval and external integrations.\n\n</AccordionItem>\n<AccordionItem title=\"✅ List workflow inputs in the inputs section\">\n\nUser-supplied data should be listed in the `inputs` section.\nNo default value for the `inputs` that sits in `data` should be set. \n\n</AccordionItem>\n<AccordionItem title=\"⚠️ Give components appropriate names\">\n\nThe name of the components should reflect at all times what they do,\neven if we are modifying an experiment that we fork.\n\n</AccordionItem>\n<AccordionItem title=\"⚠️ Use platforms for non-functional information\">\n\nPlatforms should be primarily used to encode non-functional information,\nsuch as resource limits. Read up more about platforms \n[here](/workflow-specification/#platforms). \n\n</AccordionItem>\n<AccordionItem title=\"⚠️ List component input files explicitly\">\n\nUnless a component consumes a large amount of inputs, the experiment should\nlist them one by one, instead of just the directory they are in. \n\n</AccordionItem>\n<AccordionItem title=\"☑️ Ensure the default platform works\">\n\nThe experiment should have defaults set for all options that are not `inputs`.\nThis implies that the \n[default platform](/workflow-specification/#default-platform)\nshould be runnable.\n\n</AccordionItem>\n</Accordion>\n\n## CI/CD and testing\n\nTo make sure the experiment is valid and works as expected, we suggest:\n\n<Accordion>\n\n<AccordionItem title=\"⚠️ Test the experiment in your CI\">\n\nRun \n[etest](/packaging-workflows/#testing-projects)\nat each commit for all platforms\n\n</AccordionItem>\n\n</Accordion>\n\n## Developer metadata\n\nAdding metadata to a parameterised package can greatly help other users understand what it does, \nwhat license it comes with, and is also useful for filtering purposes in the global virtual experiments registry. \nAs such, it is important for all the following fields to be populated.\n\n<Accordion>\n<AccordionItem title=\"⚠️ Set a description\">\n\nThe parameterised package should provide a description of what it does, \nin order to help other users.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Include maintainer information\">\n\nParameterised packages should specify who the maintainer is, so that \nusers can get in touch with someone in case of need.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Include a license\">\n\nParameterised packages should specify what license they are provided with, \nas this can set requirements for re-use and modifications.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Specify a tag for the parameterised package\">\n\n[Parameterised packages in the registry](/creating-a-parameterised-package/#adding-a-parameterised-package-to-a-registry)\nshould have a meaningful tag and not rely on `latest`.\n\n</AccordionItem>\n</Accordion>","type":"Mdx","contentDigest":"3cdd28b9d296c729a5f1df201a6a1b23","owner":"gatsby-plugin-mdx","counter":285},"frontmatter":{"title":"Virtual Experiment Best Practices"},"exports":{},"rawBody":"---\ntitle: Virtual Experiment Best Practices\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nUse this page to learn the best practices for developing virtual experiments.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Strong versioning</AnchorLink>\n  <AnchorLink>Coding style and guidelines</AnchorLink>\n  <AnchorLink>CI/CD and testing</AnchorLink>\n  <AnchorLink>Developer metadata</AnchorLink>\n</AnchorLinks>\n\nThis page collects a set of best practices for developing virtual experiments that are driven by our experience in this field.\nWhile choosing whether to follow them or not is up to the developer, the Registry UI will test and display a status report for \nsome of the most important ones.\n\n<InlineNotification>\n\nEach of the guidelines will explicitly state whether it is tested by the Registry \nor it is just a convention that should be followed, with the emojis having the following\nmeanings:\n\n- ✅ tested by the registry now.\n\n- ☑️ will be tested by the registry in the future.\n\n- ⚠️ convention: not testable, but recommend to follow.\n\n</InlineNotification>\n\n## Strong versioning\n\nFor an experiment to be repeatable we need to ensure that the underlying pieces that make up the experiment will not change over time.\nThis translates to the following set of requirements:\n\n<Accordion>\n<AccordionItem title=\"✅ Use tagged container images\">\n\nContainer images should not use the `latest` tag (explicitly or implicitly),\nas it is more likely to be updated.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Use strong identifiers for base packages\">\n\n[Base package sources](/creating-a-parameterised-package/#sources) \nshould be hosted on a platform that supports versioning (e.g., git) \nand reference an identifier that will not change over time (e.g., a commit ID).\n  \n</AccordionItem>\n</Accordion>\n\n## Coding style and guidelines\n\nThe following guidelines ensure your virtual experiment leverage ST4SD functionalities as best they can\nwhile also providing reusability.\n\n<Accordion>\n<AccordionItem title=\"✅ Include a virtual experiment interface\">\n\nExperiments should always include an [interface](/writing-a-virtual-experiment-interface) to simplify information\nretrieval and external integrations.\n\n</AccordionItem>\n<AccordionItem title=\"✅ List workflow inputs in the inputs section\">\n\nUser-supplied data should be listed in the `inputs` section.\nNo default value for the `inputs` that sits in `data` should be set. \n\n</AccordionItem>\n<AccordionItem title=\"⚠️ Give components appropriate names\">\n\nThe name of the components should reflect at all times what they do,\neven if we are modifying an experiment that we fork.\n\n</AccordionItem>\n<AccordionItem title=\"⚠️ Use platforms for non-functional information\">\n\nPlatforms should be primarily used to encode non-functional information,\nsuch as resource limits. Read up more about platforms \n[here](/workflow-specification/#platforms). \n\n</AccordionItem>\n<AccordionItem title=\"⚠️ List component input files explicitly\">\n\nUnless a component consumes a large amount of inputs, the experiment should\nlist them one by one, instead of just the directory they are in. \n\n</AccordionItem>\n<AccordionItem title=\"☑️ Ensure the default platform works\">\n\nThe experiment should have defaults set for all options that are not `inputs`.\nThis implies that the \n[default platform](/workflow-specification/#default-platform)\nshould be runnable.\n\n</AccordionItem>\n</Accordion>\n\n## CI/CD and testing\n\nTo make sure the experiment is valid and works as expected, we suggest:\n\n<Accordion>\n\n<AccordionItem title=\"⚠️ Test the experiment in your CI\">\n\nRun \n[etest](/packaging-workflows/#testing-projects)\nat each commit for all platforms\n\n</AccordionItem>\n\n</Accordion>\n\n## Developer metadata\n\nAdding metadata to a parameterised package can greatly help other users understand what it does, \nwhat license it comes with, and is also useful for filtering purposes in the global virtual experiments registry. \nAs such, it is important for all the following fields to be populated.\n\n<Accordion>\n<AccordionItem title=\"⚠️ Set a description\">\n\nThe parameterised package should provide a description of what it does, \nin order to help other users.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Include maintainer information\">\n\nParameterised packages should specify who the maintainer is, so that \nusers can get in touch with someone in case of need.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Include a license\">\n\nParameterised packages should specify what license they are provided with, \nas this can set requirements for re-use and modifications.\n\n</AccordionItem>\n<AccordionItem title=\"✅ Specify a tag for the parameterised package\">\n\n[Parameterised packages in the registry](/creating-a-parameterised-package/#adding-a-parameterised-package-to-a-registry)\nshould have a meaningful tag and not rely on `latest`.\n\n</AccordionItem>\n</Accordion>","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/virtual-experiment-developer-best-practices.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}