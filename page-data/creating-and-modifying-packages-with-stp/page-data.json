{"componentChunkName":"component---src-pages-creating-and-modifying-packages-with-stp-mdx","path":"/creating-and-modifying-packages-with-stp/","result":{"pageContext":{"frontmatter":{"title":"Creating and modifying packages with stp"},"relativePagePath":"/creating-and-modifying-packages-with-stp.mdx","titleType":"page","MdxNode":{"id":"39d67561-8976-502f-a66b-2cd79cbf4f7b","children":[],"parent":"107441a2-4cb8-51c5-8ac4-65cd5d8f0e43","internal":{"content":"---\ntitle: Creating and modifying packages with stp\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nA high level overview of how `stp` can help you create and modify packages.\n\n<InlineNotification kind=\"info\">\n\nYou can always use the `-h` flag to see additional help for each of the commands\nmentioned here.\n\n</InlineNotification>\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Creating PVEPs</AnchorLink>\n  <AnchorLink>Updating PVEP definitions</AnchorLink>\n  <AnchorLink>Checking PVEP syntax</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\n\n- Ensure you have correctly installed the ST4SD Runtime Core module\n  (instructions [here](/#try-it-yourself)).\n\n## Creating PVEPs\n\nParameterised Virtual Experiment Packages (PVEPs) are parameterisations of our\nexperiments that need to be created before they can be added the Registry to be\nrun or shared. `stp` can help getting started with this by generating a valid,\nhigh-level PVEP that the user can later add details to.\n\n<InlineNotification kind=\"info\">\n\nThis feature requires for the experiment to be in a git repository.\n\n</InlineNotification>\n\nAs we need a virtual experiment to test this feature, we will use the\n[nanopore-geometry-experiment](https://github.com/st4sd/nanopore-geometry-experiment)\nexperiment as our starting point. Let us start by cloning it and `cd`-ing into\nits directory:\n\n```commandline\ngit clone https://github.com/st4sd/nanopore-geometry-experiment\ncd nanopore-geometry-experiment\n```\n\nTo create the PVEP we then need to run:\n\n```commandline\nstp package create --manifest manifest.yaml\n```\n\nThe resulting PVEP can already be pushed to the Registry using the\n`stp package push` command we learned about in the\n[previous tutorial](/getting-and-adding-packages-with-stp#pushing-pveps).\n\n## Updating PVEP definitions\n\nDuring the development phase of our virtual experiments, we will regularly\ncommit changes to the git repository.\n\nIf we are following the set of\n[best practices](/virtual-experiment-developer-best-practices#strong-versioning)\nwe have defined, the commit ID will be included in our PVEP, ensuring ST4SD\nexecutes the _exact_ version of our experiment, improving results\nreproducibility. Provided is an example of how this might look like in your\nPVEP:\n\n```json\n{\n  \"name\": \"nanopore-geometry-experiment\",\n  \"source\": {\n    \"git\": {\n      \"location\": {\n        \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n        \"commit\": \"85244f5c84d6c0e02aa7a2e1685b004cd0b3cdd2\"\n      }\n    }\n  }\n}\n```\n\n`stp` makes updating the commit ID and metadata tags of our PVEP as painless as\npossible by providing the `update-definition` command. In the\n`nanopore-geometry-experiment` folder from the previous example we can run:\n\n```commandline\nstp package update-definition --path nanopore-geometry-experiment.json \\\n        --use-latest-commit \\\n        --tag latest\n```\n\nThe PVEP definition may now look similar to the following:\n\n```json\n{\n  \"base\": {\n    \"packages\": [\n      {\n        \"name\": \"nanopore-geometry-experiment\",\n        \"source\": {\n          \"git\": {\n            \"location\": {\n              \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n              \"commit\": \"1682f979531ddef602440f0a3b146edb5916c001\"\n            }\n          }\n        },\n      }\n    ]\n  },\n  \"metadata\": {\n    \"package\": {\n      ...\n      \"tags\": [\n        \"latest\"\n      ],\n    }\n  },\n}\n```\n\n## Checking PVEP syntax\n\nWhen we manually edit our PVEPs, we risk making mistakes. Fortunately, `stp`\nincludes a syntax checker that can help us identify and fix our errors. Let's\nintentionally introduce a mistake into our `nanopore-geometry-experiment` PVEP,\nwhich we obtained earlier in this tutorial, by adding a `nonexistent` field to\nthe `metadata` section.\n\nHere's how the updated section now looks:\n\n```json\n\"metadata\": {\n  \"package\": {\n    \"name\": \"nanopore-geometry-experiment\",\n    \"tags\": [],\n    \"license\": \"\",\n    \"maintainer\": \"\",\n    \"description\": \"\",\n    \"nonexistent\": true,\n    \"keywords\": []\n  }\n},\n```\n\n`stp` will point us to the error when we run `stp package test`, as such:\n\n```commandline\nstp package test nanopore-geometry-experiment.json\nValidation error in instance['metadata']['package']:\nAdditional properties are not allowed ('nonexistent' was unexpected)\n```\n\n## Next steps\n\n- Learn how to use the [ST4SD Python APIs](/running-workflows-on-openshift).\n- See all the [available stp commands](/stp).\n","type":"Mdx","contentDigest":"74d9d15d0bd127ee5b256d86155566ff","owner":"gatsby-plugin-mdx","counter":241},"frontmatter":{"title":"Creating and modifying packages with stp"},"exports":{},"rawBody":"---\ntitle: Creating and modifying packages with stp\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nA high level overview of how `stp` can help you create and modify packages.\n\n<InlineNotification kind=\"info\">\n\nYou can always use the `-h` flag to see additional help for each of the commands\nmentioned here.\n\n</InlineNotification>\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Creating PVEPs</AnchorLink>\n  <AnchorLink>Updating PVEP definitions</AnchorLink>\n  <AnchorLink>Checking PVEP syntax</AnchorLink>\n</AnchorLinks>\n\n## Prerequisites\n\n- Ensure you have correctly installed the ST4SD Runtime Core module\n  (instructions [here](/#try-it-yourself)).\n\n## Creating PVEPs\n\nParameterised Virtual Experiment Packages (PVEPs) are parameterisations of our\nexperiments that need to be created before they can be added the Registry to be\nrun or shared. `stp` can help getting started with this by generating a valid,\nhigh-level PVEP that the user can later add details to.\n\n<InlineNotification kind=\"info\">\n\nThis feature requires for the experiment to be in a git repository.\n\n</InlineNotification>\n\nAs we need a virtual experiment to test this feature, we will use the\n[nanopore-geometry-experiment](https://github.com/st4sd/nanopore-geometry-experiment)\nexperiment as our starting point. Let us start by cloning it and `cd`-ing into\nits directory:\n\n```commandline\ngit clone https://github.com/st4sd/nanopore-geometry-experiment\ncd nanopore-geometry-experiment\n```\n\nTo create the PVEP we then need to run:\n\n```commandline\nstp package create --manifest manifest.yaml\n```\n\nThe resulting PVEP can already be pushed to the Registry using the\n`stp package push` command we learned about in the\n[previous tutorial](/getting-and-adding-packages-with-stp#pushing-pveps).\n\n## Updating PVEP definitions\n\nDuring the development phase of our virtual experiments, we will regularly\ncommit changes to the git repository.\n\nIf we are following the set of\n[best practices](/virtual-experiment-developer-best-practices#strong-versioning)\nwe have defined, the commit ID will be included in our PVEP, ensuring ST4SD\nexecutes the _exact_ version of our experiment, improving results\nreproducibility. Provided is an example of how this might look like in your\nPVEP:\n\n```json\n{\n  \"name\": \"nanopore-geometry-experiment\",\n  \"source\": {\n    \"git\": {\n      \"location\": {\n        \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n        \"commit\": \"85244f5c84d6c0e02aa7a2e1685b004cd0b3cdd2\"\n      }\n    }\n  }\n}\n```\n\n`stp` makes updating the commit ID and metadata tags of our PVEP as painless as\npossible by providing the `update-definition` command. In the\n`nanopore-geometry-experiment` folder from the previous example we can run:\n\n```commandline\nstp package update-definition --path nanopore-geometry-experiment.json \\\n        --use-latest-commit \\\n        --tag latest\n```\n\nThe PVEP definition may now look similar to the following:\n\n```json\n{\n  \"base\": {\n    \"packages\": [\n      {\n        \"name\": \"nanopore-geometry-experiment\",\n        \"source\": {\n          \"git\": {\n            \"location\": {\n              \"url\": \"https://github.com/st4sd/nanopore-geometry-experiment\",\n              \"commit\": \"1682f979531ddef602440f0a3b146edb5916c001\"\n            }\n          }\n        },\n      }\n    ]\n  },\n  \"metadata\": {\n    \"package\": {\n      ...\n      \"tags\": [\n        \"latest\"\n      ],\n    }\n  },\n}\n```\n\n## Checking PVEP syntax\n\nWhen we manually edit our PVEPs, we risk making mistakes. Fortunately, `stp`\nincludes a syntax checker that can help us identify and fix our errors. Let's\nintentionally introduce a mistake into our `nanopore-geometry-experiment` PVEP,\nwhich we obtained earlier in this tutorial, by adding a `nonexistent` field to\nthe `metadata` section.\n\nHere's how the updated section now looks:\n\n```json\n\"metadata\": {\n  \"package\": {\n    \"name\": \"nanopore-geometry-experiment\",\n    \"tags\": [],\n    \"license\": \"\",\n    \"maintainer\": \"\",\n    \"description\": \"\",\n    \"nonexistent\": true,\n    \"keywords\": []\n  }\n},\n```\n\n`stp` will point us to the error when we run `stp package test`, as such:\n\n```commandline\nstp package test nanopore-geometry-experiment.json\nValidation error in instance['metadata']['package']:\nAdditional properties are not allowed ('nonexistent' was unexpected)\n```\n\n## Next steps\n\n- Learn how to use the [ST4SD Python APIs](/running-workflows-on-openshift).\n- See all the [available stp commands](/stp).\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/creating-and-modifying-packages-with-stp.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}