{"componentChunkName":"component---src-pages-key-features-md","path":"/key-features/","result":{"pageContext":{"frontmatter":{"title":"Key Features"},"relativePagePath":"/key-features.md","titleType":"page","MdxNode":{"id":"d55dcd26-bff2-5224-b973-12322341e638","children":[],"parent":"c7c212c0-5540-534d-8fbf-d7f5337bd372","internal":{"content":"---\ntitle: Key Features\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nExplore the key features that ST4SD provides\n\n</PageDescription>\n\nST4SD's aim is to provide a virtual experiment execution runtime with\ndifferentiating technology that supports computational workflows and\ncomputational workflow developers.\n\n<Accordion>\n\n<AccordionItem title=\"Eliminating Failure Cases: Robust Execution Support\">\n\n- **Problem**: _Failure of large-scale , long-time campaign executions, often\n  deep into execution, due to identifiable errors at or before submission time_\n- **Solution**: From many years running large virtual experiment campaigns we've\n  learned a number of hard lessons about ensuring robust execution. We've\n  captured these in the runtime with features including image checking, image\n  pinning, unstable filesystem identification and enhanced exit-code handling.\n  We also developed an automatic test-harness generation tool for\n  virtual experiments to further help identify errors quickly\n\n- **More Information**:\n\n  - See how these features relate to [controlling restart behaviour](/restart)\n  - Coming soon: We will release our tool for automated testing of virtual experiments\n\n</AccordionItem>\n<AccordionItem title=\"Reusing Calculations: Memoization\">\n\n- **Problem**: _Repeating expensive calculations due to lack of knowledge of\n  existing results or the difficulty in incorporating existing results into a\n  new virtual experiment execution which could potentially use them_\n- **Solution**: We provide a fast, high-fidelity method for identifying if a\n  task in a virtual experiment has already been executed and reusing those\n  results instead of re-executing the same task again. It works across clusters\n  and architectures and addresses issues in existing similar implementations.\n- **More Information**:\n  - Read [our documentation](/memoization) for using this capability\n  - Read [our paper](https://ieeexplore.ieee.org/document/9860151) on this topic\n\n</AccordionItem>\n\n <AccordionItem title=\"Moving from Classic HPC to Cloud: Pluggable Backends\">\n\n- **Problem**: _Cloud technologies are being rapidly adopted across many domains\n  but for many researchers the large compute resource they require is currently\n  managed by a classic HPC stack that is not accessible from a cloud-platform.\n  How can they leverage the resources they have access to now while also\n  preparing for future compute environments? _\n\n- **Solution**: The ST4SD Runtime solves this issue by abstracting the execution\n  backend e.g. LSF or Kubernetes from the virtual experiment description. This\n  allows a researcher to initially write a virtual experiment that runs on LSF\n  and later easily move it to Kubernetes. To do this, the same\n  virtual experiment code is enhanced with some extra information for\n  Kubernetes - which can be as little as a couple of lines - the rest of the\n  virtual experiment logic stays the same.\n\n- **More Information**:\n  - See [here](/installation#install-on-classic-hpc) for how to install\n    `st4sd-runtime-core` on a classic LSF managed cluster\n  - This capability leverages _Reducing Complexity: Simple Specification, Smart\n    Runtime_ and can also use _Simplifying Multi-Environment Deployments:\n    Platform Layers_. See those feature descriptions for more details.\n  - Coming soon: Detailed example of building a virtual experiment that can run\n    on an LSF based HPC cluster and OpenShift\n\n</AccordionItem>\n\n<AccordionItem title=\"Reducing Time-to-Insight: Analytics Co-processing\">\n\n- **Problem**: _Many computational workflows, for example in particle\n  simulation, consist of a long-simulation followed by expensive analysis over\n  each step of the simulation. These computations could be overlapped to save\n  time and also to provide quicker feedback for decision making_\n\n- **Solution**: The ST4SD Runtime provides the capability to run analytics in\n  parallel with the simulation so it can e.g. consume steps from simulation in\n  batches. This reduces time-to-insight as most of the analytics workload is\n  performed concurrently with the simulation, allowing it to complete shortly\n  after it. This feature also allows much quicker feedback on simulation\n  behaviour which can be used by external entities to make decisions like\n  stopping an experiment when they see an answer is accurate enough.\n- **More Information**:\n  - Read [our tutorial](/tutorial) for examples of how to use this capability\n  - Many studies using ST4SD, for example on\n    [computational force-field training](https://dx.doi.org/10.1021/acs.jpcb.0c06132)\n    and\n    [worm-like micelle identification](https://dx.doi.org/10.1021/acs.jctc.0c00311)\n    used this capability heavily\n\n</AccordionItem>\n\n<AccordionItem title=\"Simplifying Multi-Environment Deployments: Platform Layers\">\n\n- **Problem**: _As researchers we often ran into issues maintaining\n  virtual experiments across different hardware platforms e.g. Intel v Power, or\n  different deployment environments e.g. dev and production, which required\n  different settings._\n\n- **Solution**: The ST4SD Runtime solves this issue by enabling a virtual\n  experiment to define named sets of variables and environments, a.k.a.\n  platforms, that can be selected at runtime to customize execution for a\n  particular environment. Further, when a virtual experiment is added to a\n  `st4sd-runtime-service` registry a default platform can be set. Thus, for\n  example, for production environments you can ensure that everyone will use\n  production platform values when executing a particular experiment.\n\n- **More Information**:\n  - See the\n    [virtual experiment specification](/workflow-specification#blueprints) for\n    examples of how to use this capability\n\n</AccordionItem>\n\n<AccordionItem title=\"Reducing Complexity: Simple Specification, Smart Runtime\">\n\n- **Problem**: _Reduce the execution management burden on virtual experiment\n  developers, enable them to focus on the computational process._\n- **Solution**: We aim to reduce this burden by moving as many execution\n  management details as possible to the ST4SD Runtime. For example our\n  specification does not require users to handle data-storage or transfer,\n  exit-codes, restart behaviour, memoization metadata, or know backend-specific\n  execution details. This also enables all virtual experiments to potentially\n  benefit out-of-the-box when we add new features to the ST4SD Runtime.\n\n* **More Information**:\n\n  - See [virtual experiment specification](/workflow-specification) for more\n    details\n\n</AccordionItem>\n\n<AccordionItem title=\"Securing Execution: Registry Secrets and Encrypted Env-Vars\">\n\n- **Problem**: _Virtual experiments may require various values which should\n  remain secured - for example tokens for accessing private image registries -\n  but these can be leaked via notebooks, execution scripts, inside\n  virtual experiment specifications or metadata databases_\n- **Solution**: `st4sd-runtime-service` addresses these issues by allowing users\n  to specify image pull secrets a single time when adding a virtual experiment\n  to an `st4sd-runtime-service` registry. The secrets are then encrypted and\n  used for subsequent executions, not appearing in any metadata. The ST4SD\n  Runtime also enables sensitive data to be passed to virtual experiments as\n  secure environment-variables. Such variables are encrypted on submission and\n  cannot be accessed via any queries, metadata etc.\n\n</AccordionItem>\n\n<AccordionItem title=\"Capturing Data: The ST4SD Datastore\">\n\n- **Problem**: _How can scientists easily access and perform powerful queries on\n  the virtual experiments they have run_\n- **Solution**: The `st4sd-datastore` automatically captures information on\n  executed virtual experiments and enables retrieval of workflow data. It is\n  based on MongoDB, allowing flexible and powerful queries and supports\n  retrieving outputs, and intermediate data, that workflow instances generate. A\n  Python API makes operations simple to carry out.\n- **More Information**:\n  - [This notebook](https://github.com/st4sd/st4sd-examples/blob/main/notebooks/ST4SD%20Datastore%20-%20Common%20Query%20Examples.ipynb)\n    in our\n    [quickstart notebook collection](https://github.com/st4sd/st4sd-examples/)\n    gives many examples of how to use the `st4sd-datastore`.\n\n</AccordionItem>\n\n</Accordion>\n","type":"Mdx","contentDigest":"196f6cab3adf2ffc31816cf4624ee543","owner":"gatsby-plugin-mdx","counter":276},"frontmatter":{"title":"Key Features"},"exports":{},"rawBody":"---\ntitle: Key Features\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nExplore the key features that ST4SD provides\n\n</PageDescription>\n\nST4SD's aim is to provide a virtual experiment execution runtime with\ndifferentiating technology that supports computational workflows and\ncomputational workflow developers.\n\n<Accordion>\n\n<AccordionItem title=\"Eliminating Failure Cases: Robust Execution Support\">\n\n- **Problem**: _Failure of large-scale , long-time campaign executions, often\n  deep into execution, due to identifiable errors at or before submission time_\n- **Solution**: From many years running large virtual experiment campaigns we've\n  learned a number of hard lessons about ensuring robust execution. We've\n  captured these in the runtime with features including image checking, image\n  pinning, unstable filesystem identification and enhanced exit-code handling.\n  We also developed an automatic test-harness generation tool for\n  virtual experiments to further help identify errors quickly\n\n- **More Information**:\n\n  - See how these features relate to [controlling restart behaviour](/restart)\n  - Coming soon: We will release our tool for automated testing of virtual experiments\n\n</AccordionItem>\n<AccordionItem title=\"Reusing Calculations: Memoization\">\n\n- **Problem**: _Repeating expensive calculations due to lack of knowledge of\n  existing results or the difficulty in incorporating existing results into a\n  new virtual experiment execution which could potentially use them_\n- **Solution**: We provide a fast, high-fidelity method for identifying if a\n  task in a virtual experiment has already been executed and reusing those\n  results instead of re-executing the same task again. It works across clusters\n  and architectures and addresses issues in existing similar implementations.\n- **More Information**:\n  - Read [our documentation](/memoization) for using this capability\n  - Read [our paper](https://ieeexplore.ieee.org/document/9860151) on this topic\n\n</AccordionItem>\n\n <AccordionItem title=\"Moving from Classic HPC to Cloud: Pluggable Backends\">\n\n- **Problem**: _Cloud technologies are being rapidly adopted across many domains\n  but for many researchers the large compute resource they require is currently\n  managed by a classic HPC stack that is not accessible from a cloud-platform.\n  How can they leverage the resources they have access to now while also\n  preparing for future compute environments? _\n\n- **Solution**: The ST4SD Runtime solves this issue by abstracting the execution\n  backend e.g. LSF or Kubernetes from the virtual experiment description. This\n  allows a researcher to initially write a virtual experiment that runs on LSF\n  and later easily move it to Kubernetes. To do this, the same\n  virtual experiment code is enhanced with some extra information for\n  Kubernetes - which can be as little as a couple of lines - the rest of the\n  virtual experiment logic stays the same.\n\n- **More Information**:\n  - See [here](/installation#install-on-classic-hpc) for how to install\n    `st4sd-runtime-core` on a classic LSF managed cluster\n  - This capability leverages _Reducing Complexity: Simple Specification, Smart\n    Runtime_ and can also use _Simplifying Multi-Environment Deployments:\n    Platform Layers_. See those feature descriptions for more details.\n  - Coming soon: Detailed example of building a virtual experiment that can run\n    on an LSF based HPC cluster and OpenShift\n\n</AccordionItem>\n\n<AccordionItem title=\"Reducing Time-to-Insight: Analytics Co-processing\">\n\n- **Problem**: _Many computational workflows, for example in particle\n  simulation, consist of a long-simulation followed by expensive analysis over\n  each step of the simulation. These computations could be overlapped to save\n  time and also to provide quicker feedback for decision making_\n\n- **Solution**: The ST4SD Runtime provides the capability to run analytics in\n  parallel with the simulation so it can e.g. consume steps from simulation in\n  batches. This reduces time-to-insight as most of the analytics workload is\n  performed concurrently with the simulation, allowing it to complete shortly\n  after it. This feature also allows much quicker feedback on simulation\n  behaviour which can be used by external entities to make decisions like\n  stopping an experiment when they see an answer is accurate enough.\n- **More Information**:\n  - Read [our tutorial](/tutorial) for examples of how to use this capability\n  - Many studies using ST4SD, for example on\n    [computational force-field training](https://dx.doi.org/10.1021/acs.jpcb.0c06132)\n    and\n    [worm-like micelle identification](https://dx.doi.org/10.1021/acs.jctc.0c00311)\n    used this capability heavily\n\n</AccordionItem>\n\n<AccordionItem title=\"Simplifying Multi-Environment Deployments: Platform Layers\">\n\n- **Problem**: _As researchers we often ran into issues maintaining\n  virtual experiments across different hardware platforms e.g. Intel v Power, or\n  different deployment environments e.g. dev and production, which required\n  different settings._\n\n- **Solution**: The ST4SD Runtime solves this issue by enabling a virtual\n  experiment to define named sets of variables and environments, a.k.a.\n  platforms, that can be selected at runtime to customize execution for a\n  particular environment. Further, when a virtual experiment is added to a\n  `st4sd-runtime-service` registry a default platform can be set. Thus, for\n  example, for production environments you can ensure that everyone will use\n  production platform values when executing a particular experiment.\n\n- **More Information**:\n  - See the\n    [virtual experiment specification](/workflow-specification#blueprints) for\n    examples of how to use this capability\n\n</AccordionItem>\n\n<AccordionItem title=\"Reducing Complexity: Simple Specification, Smart Runtime\">\n\n- **Problem**: _Reduce the execution management burden on virtual experiment\n  developers, enable them to focus on the computational process._\n- **Solution**: We aim to reduce this burden by moving as many execution\n  management details as possible to the ST4SD Runtime. For example our\n  specification does not require users to handle data-storage or transfer,\n  exit-codes, restart behaviour, memoization metadata, or know backend-specific\n  execution details. This also enables all virtual experiments to potentially\n  benefit out-of-the-box when we add new features to the ST4SD Runtime.\n\n* **More Information**:\n\n  - See [virtual experiment specification](/workflow-specification) for more\n    details\n\n</AccordionItem>\n\n<AccordionItem title=\"Securing Execution: Registry Secrets and Encrypted Env-Vars\">\n\n- **Problem**: _Virtual experiments may require various values which should\n  remain secured - for example tokens for accessing private image registries -\n  but these can be leaked via notebooks, execution scripts, inside\n  virtual experiment specifications or metadata databases_\n- **Solution**: `st4sd-runtime-service` addresses these issues by allowing users\n  to specify image pull secrets a single time when adding a virtual experiment\n  to an `st4sd-runtime-service` registry. The secrets are then encrypted and\n  used for subsequent executions, not appearing in any metadata. The ST4SD\n  Runtime also enables sensitive data to be passed to virtual experiments as\n  secure environment-variables. Such variables are encrypted on submission and\n  cannot be accessed via any queries, metadata etc.\n\n</AccordionItem>\n\n<AccordionItem title=\"Capturing Data: The ST4SD Datastore\">\n\n- **Problem**: _How can scientists easily access and perform powerful queries on\n  the virtual experiments they have run_\n- **Solution**: The `st4sd-datastore` automatically captures information on\n  executed virtual experiments and enables retrieval of workflow data. It is\n  based on MongoDB, allowing flexible and powerful queries and supports\n  retrieving outputs, and intermediate data, that workflow instances generate. A\n  Python API makes operations simple to carry out.\n- **More Information**:\n  - [This notebook](https://github.com/st4sd/st4sd-examples/blob/main/notebooks/ST4SD%20Datastore%20-%20Common%20Query%20Examples.ipynb)\n    in our\n    [quickstart notebook collection](https://github.com/st4sd/st4sd-examples/)\n    gives many examples of how to use the `st4sd-datastore`.\n\n</AccordionItem>\n\n</Accordion>\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/key-features.md"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}