{"componentChunkName":"component---src-pages-writing-a-virtual-experiment-interface-mdx","path":"/writing-a-virtual-experiment-interface/","result":{"pageContext":{"frontmatter":{"title":"Writing a Virtual Experiment Interface"},"relativePagePath":"/writing-a-virtual-experiment-interface.mdx","titleType":"page","MdxNode":{"id":"0a3d07dd-2307-5286-833d-4a40289eb357","children":[],"parent":"58dfc5ad-44f5-5bb7-9d01-6435d0827f57","internal":{"content":"---\ntitle: Writing a Virtual Experiment Interface\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nUse this page to learn how to write a virtual experiment interface.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Interface Definition</AnchorLink>\n  <AnchorLink>Input Extraction Methods</AnchorLink>\n  <AnchorLink>Property Extraction Methods</AnchorLink>\n  <AnchorLink>Example</AnchorLink>\n</AnchorLinks>\n\nA core-concept in ST4SD is a virtual experiment. This is a computational workflow that takes as input one or more systems of a given type, and produces as output values of `properties` of those systems.\n\nThis document descries how ST4SD developers can describe this information in their virtual experiments via an `interface`\n\nThe `interface` of a virtual experiment defines:\n\n- The specification used to describe `input` systems it processes e.g. SMILEs for small molecules\n- Instructions to extract the `input` systems from input data\n- Instructions to extract the values of `properties` that the virtual experiment computes\n\nOnce a virtual experiment has an `interface`  ST4SD can return a `pandas.DataFrame`  containing the properties calculated by instances of the virtual experiment, as well as the ids of the `input` systems that an instance processed. This functionality is provided via the `st4sd-datastore` API and the `st4sd-runtime-service` API. See [using a virtual experiment interface](/using-a-virtual-experiment-interface) for further information. \n\n## Interface Definition\n\nAn `interface` is an optional top-level `FlowIR` key which describes what `input` and `properties` of a virtual experiment, as well as how to extract their values. \n\n<InlineNotification>\n\nSee the [tutorial](/tutorial) for a refresher on virtual experiment definitions and FlowIR.\n\n</InlineNotification>\n\nThe general scheme of an `interface` is  \n\n```yaml\ninterface:\n  description: #A description of the virtual experiment. Optional\n  inputSpec:\n    namingScheme: #The scheme/specification used to define your inputs e.g. SMILES\n    inputExtractionMethod: \n      $INPUT_EXTRACTION_METHOD_NAME: #The name of an input extraction method - see \"Input Extraction Method\" section for possibilities\n        source:  #Optional source method used to provide input to the extraction method.. See the \"Source Methods\" section for potential values.\n          ...\n        args: #Optional arguments for the extraction method\n          ...\n  propertiesSpec: # A list of properties to extract\n  - name: #The name of the property\n    propertyExtractionMethod:\n      $PROPERTY_EXTRACTION_METHOD_NAME: #The name of a property extraction method - see the \"Property Extraction Method\" section for possibilities\n        source:  #Optional source method used to provide input to the extraction method. See the \"Source Methods\" section for potential values.\n          ...\n        args: #Optional arguments for the extraction method\n          ...\n```\n\n\n\nThe 2 main fields are:\n\n- `interface.inputSpec`: A dictionary that describes the inputs of the virtual experiment and how to extract them\n- `interface.propertiesSpec`: An array of dictionaries (one per `property`) that describes how to extract the values of the `property`\n\nWithin both fields the developer defines  extraction methods which tell ST4SD how to extract values that the virtual experiment reads (`input` ids) and writes (`property` values). \n\n- See [input extraction methods](#input-extraction-methods) for details on choices for that field\n- See [property extraction methods](#property-extraction-methods) for details on choices for that field\n\nBoth input extraction methods and property extraction methods can have 2 sub-fields, `source` and `args` which may be optional.  If the `source` method is present it must be one of the options outlined in [source methods](#source-methods)\n\n\n## Input Extraction Methods\n\nInput extraction methods are used by to retrieve a list of the input system ids\n\n### csvColumn\n\nUse the `csvColumn` extraction method if the input ids of your experiment are defined in a column of an input CSV file **which has column headers**.\n\n#### Options\n\n```yaml\nsource:\n  path: #The path SOURCE-METHOD. See source-methods for more\nargs:\n  column: #The name of the column in the CSV file containing the ids (the column header)\n```\n\n#### Example\n\n```YAML\ninterface:\n  inputSpec:\n    namingScheme: 'SMILES'\n    inputExtractionMethod: \n      csvColumn:\n        source:\n          path: 'input/input_smiles.csv'\n        args:\n          column: \"SMILES\"\n```\n\n\n\n\n\n### hookGetInputIds\n\nUse `hookGetInputIds` when you want to provide your own python function for getting the input ids.\n\n<InlineNotification>\n\nTo use this method the developer must provide an implementation of the following python function and place it in a file called `interface.py` in the `hooks` directory of their virtual experiment. Note: this file can contain other functions also.\n\n</InlineNotification>\n\n```python\ndef get_input_ids(input_id_file: str, variables: Dict[str, str]) -> List[str]:\n   '''\n       Params: \n            input_id_file (str): The path to the location of the file that contains input ids of the inputs systems. This comes from the `source.path` option in the interface YAML.\n            variables (dict): A dictionary of the global and user variables passed to the virtual experiment instance\n            \n       Returns: \n            A list of strings each of which is the id of an input system\n   '''\n     pass\n```\n\n#### Options\n\n\n\n```yaml\nsource:\n  path: #A path relative to the root directory of the virtual experiment instance. It points to the CSV file that contains the `input-ids`.\n```\n\n#### Example\n\n\n\n```yaml\ninterface:\n  inputSpec:\n    namingScheme: 'SMILES'\n    inputExtractionMethod: \n      hookGetInputIds:\n        source:\n          path: 'input/input_smiles.csv'\n```\n\n<InlineNotification>\n\nThe [band-gap-gamess](https://github.com/st4sd/band-gap-gamess) virtual experiment uses `hookGetInputIds` to describe the extraction of input ids.\n\n</InlineNotification>\n\n## Property Extraction Methods\n\nProperty extraction methods conceptually produce a properties table which contains at least 2 columns: `(input-id, $propertyName)`where $propertyName is the name of the property in the `propertiesSpec` element using the extraction method. Note: in practice `propertyName` will be transformed to lowercase.\n\n### csvDataFrame\n\nUse this method if \n\n* there is a single CSV file to extract the values of a particular property from for all input\n* The properties are stored in a column of this CSV file\n* The input ids are stored in a column of this CSV file\n\n**Note:**\n\nThe table created by this method must have column headers `input-id` and $PROPERTYNAME.  The `csvDataFrame` property extractor can change the column names to these correct values using the `renameColumns` option (see Example)\n\n#### Options\n\n\n\n```yaml\nsource:\n   $SOURCE_METHOD_NAME # Name of the source methods and its options. See below. \nargs:\n   renameColumns: #Optional: Dictionary whose keys are column names in the CSV file and values are the names to rename the associated key columns. Output column names are implicitly converted to `lowercase`\n   `${name}: ${value}`: #(Optional) Arguments to the `pandas.read_csv()` method. The default arguments are `engine=\"python\"` and `sep=None`.\n```\n\n#### Example\n\n\n\n```yaml\npropertiesSpec:\n- name: 'band-gap'\n  propertyExtractionMethod:\n    csvDataFrame:\n      source:\n        keyOutput: 'FinalEnergies'\n      args:\n        renameColumns:\n          SMILE: \"input-id\"\n        usecols:\n        - \"SMILE\"\n        - \"band-gap\"\n```\n\n\n\n### hookGetProperties\n\nUse`hookGetProperties` when you want to provide your own python function for getting the property values. \n\n<InlineNotification>\n\nTo use this method the developer must provide an implementation of the following python function and place it in a file called `interface.py` in the `hooks` directory of their virtual experiment. Note: this file can contain other functions also.\n\n</InlineNotification>\n\n```python\ndef get_properties(property_name:str, property_output_file: str, input_id_file: str, variables: Dict[str, str]) -> pandas.DataFrame\n   '''\n       Params: \n            property_name (str): The name of the property the function should return the values of.  \n            property_output_file (str): The path to the file containing the properties \n            input_id_file (str): The path to the file containing the input_ids\n            variables (dict): A dictionary of the global and user variables passed to the virtual experiment instance\n            \n       Returns: \n            A `pandas.DataFrame` that contains at least 2 columns: `input-id`, `${propertyName}`. \n   '''\n     pass\n```\n\nIf `hookGetProperties` is defined as the propertyExtractionMethod for property `idx` the values passed to the parameters of this function are determined as follows\n\n* `property_name` : The value of `interface.propertiesSpec[idx].name`\n* `property_output_file`: The value returned by the`interface.propertiesSpec[idx].propertyExtractionMethod.hookGetProperties.source` method\n* `input_id_file`:  The value of `interface.inputSpec.inputExtractionMethod.$METHOD.source`\n\nNote: The column headers in the returned pandas DataFrame will be converted to lowercase by ST4SD. \n\n#### Options\n\n\n\n```yaml\nhookGetInputIds:\n  source: #A source method - see below for details\n```\n\n#### Example\n\n\n```yaml\npropertiesSpec:\n- name: 'band-gap'\n  propertyExtractionMethod:\n    hookGetProperties:\n      source:\n        keyOutput: 'FinalEnergies'\n```\n\n<InlineNotification>\n\nThe [band-gap-gamess](https://github.com/st4sd/band-gap-gamess) virtual experiment uses `hookGetProperties` to describe the extraction of properties.\n\n</InlineNotification>\n\n## Source methods\n\nSource methods define different ways of defining a source file-path that is used by input or property extraction methods\n\n### path\n\nUse this method if you know the full path of the source file. \n\n#### Options\n\n\n\n```YAML\npath: $PATH #A path relative to the root directory of the virtual experiment instance. It points to the CSV file that contains the `input-ids`.\n```\n\n#### Example\n\n\n\n```YAML\npropertyExtractionMethod:\n  hookGetProperties:\n    source:\n      path: \"stages/stage1/EnergiesExtraction/energies.csv\"\n```\n\n\n\n### keyOutput\n\nUse this method if the properties are in a key-output of the experiment. This method avoids having to know the path to the file (which could change if storage methods change)\n\n#### Options\n\n\n\n```YAML\n# The name of a key-output in the experiment.\n# These are keys of the top-level FlowIR field `output`.\nkeyOutput: $KEYOUTPUT\n```\n\n#### Example\n\n\n\n```YAML\npropertyExtractionMethod:\n  hookGetProperties:\n    source:\n      keyOutput: \"FinalEnergies\"\n```\n\n\n\n## Example\n\nIn this example we have a simple virtual experiment that counts vowels and letters in strings. Here is the FlowIR definition:\n\n```yaml\noutput:\n  vowels:\n    data-in: stage0.count-vowels/vowels.csv:ref\n  letters:\n    data-in: stage0.count-letters/letters.csv:ref\n\ncomponents:\n- name: count-vowels\n  references:\n  - input/words.csv:ref\n  command:\n    executable: bin/count_vowels.py\n    arguments: input/words.csv:ref\n\n- name: count-letters\n  references:\n  - input/words.csv:ref\n  command:\n    executable: bin/count_letters.py\n    arguments: input/words.csv:ref\n```\n\nHere is an input `words.csv` file:\n\n```\nword;\nhello;\nawesome;\nworld;\n```\n\nWhen we process the above `input` file with this workflow we get 2 outputs:\n\nThe output `vowels` contains the CSV file:\n\n```\na;e;i;o;u;word;vowels\n0;1;0;1;0;hello;2\n1;2;0;1;0;awesome;4\n0;0;0;1;0;world;1\n```\n\nThe output `letters` contains the CSV file:\n\n```\nword;letters\nhello;5\nawesome;7\nworld;5\n```\n\n### Interface\n\nAn interface to this experiment is shown below. This interface used `csvColumn` input extraction method and the `csvDataFrame` property extraction method. These methods mean the developer does not have to write any other code. \n\n\n```yaml\ninterface:\n  description: Counts vowels in words\n  inputSpec:\n    namingScheme: words\n    inputExtractionMethod:\n      csvColumn:\n        source:\n          path: input/words.csv\n        args:\n          column: word\n  propertiesSpec:\n  - name: Vowels\n    propertyExtractionMethod:\n      csvDataFrame:\n        source:\n          keyOutput: vowels\n        args:\n          renameColumns:\n            word: input-id\n          usecols:\n          - word\n          - vowels\n  - name: Letters\n    propertyExtractionMethod:\n      csvDataFrame:\n        source:\n          keyOutput: letters\n        args:\n          renameColumns:\n            word: input-id\n          usecols:\n          - word\n          - letters\n```\n\n\n\n### Run Details\n\nAdding the `interface` definition will cause instances of the virtual experiment to generate 2 new files:\n\n - `${INSTANCE_DIR}/output/properties.csv`: This is a `;` delimited `CSV` file that contains the `properties` columns produced by each property defined in `propertySpec`.\n - `${INSTANCE_DIR}/outputs/input-ids.json`: A JSON file that contains an array of strings. Each string is the id of an input system.\n\nFor the above example we would get the following in  `${INSTANCE_DIR}/output/properties.csv`:\n\n```\ninput-id;vowels;letters\nhello;2;5\nawesome;4;7\nworld;1;5\n```\n\nThe input ids file (`${INSTANCE_DIR}/outputs/input-ids.json`) looks like this:\n\n```json\n[\n    \"hello\",\n    \"awesome\",\n    \"world\"\n]\n```\n\n\n","type":"Mdx","contentDigest":"42ac3fd34befad8ac2e5bfc8d9797186","owner":"gatsby-plugin-mdx","counter":255},"frontmatter":{"title":"Writing a Virtual Experiment Interface"},"exports":{},"rawBody":"---\ntitle: Writing a Virtual Experiment Interface\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nUse this page to learn how to write a virtual experiment interface.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Interface Definition</AnchorLink>\n  <AnchorLink>Input Extraction Methods</AnchorLink>\n  <AnchorLink>Property Extraction Methods</AnchorLink>\n  <AnchorLink>Example</AnchorLink>\n</AnchorLinks>\n\nA core-concept in ST4SD is a virtual experiment. This is a computational workflow that takes as input one or more systems of a given type, and produces as output values of `properties` of those systems.\n\nThis document descries how ST4SD developers can describe this information in their virtual experiments via an `interface`\n\nThe `interface` of a virtual experiment defines:\n\n- The specification used to describe `input` systems it processes e.g. SMILEs for small molecules\n- Instructions to extract the `input` systems from input data\n- Instructions to extract the values of `properties` that the virtual experiment computes\n\nOnce a virtual experiment has an `interface`  ST4SD can return a `pandas.DataFrame`  containing the properties calculated by instances of the virtual experiment, as well as the ids of the `input` systems that an instance processed. This functionality is provided via the `st4sd-datastore` API and the `st4sd-runtime-service` API. See [using a virtual experiment interface](/using-a-virtual-experiment-interface) for further information. \n\n## Interface Definition\n\nAn `interface` is an optional top-level `FlowIR` key which describes what `input` and `properties` of a virtual experiment, as well as how to extract their values. \n\n<InlineNotification>\n\nSee the [tutorial](/tutorial) for a refresher on virtual experiment definitions and FlowIR.\n\n</InlineNotification>\n\nThe general scheme of an `interface` is  \n\n```yaml\ninterface:\n  description: #A description of the virtual experiment. Optional\n  inputSpec:\n    namingScheme: #The scheme/specification used to define your inputs e.g. SMILES\n    inputExtractionMethod: \n      $INPUT_EXTRACTION_METHOD_NAME: #The name of an input extraction method - see \"Input Extraction Method\" section for possibilities\n        source:  #Optional source method used to provide input to the extraction method.. See the \"Source Methods\" section for potential values.\n          ...\n        args: #Optional arguments for the extraction method\n          ...\n  propertiesSpec: # A list of properties to extract\n  - name: #The name of the property\n    propertyExtractionMethod:\n      $PROPERTY_EXTRACTION_METHOD_NAME: #The name of a property extraction method - see the \"Property Extraction Method\" section for possibilities\n        source:  #Optional source method used to provide input to the extraction method. See the \"Source Methods\" section for potential values.\n          ...\n        args: #Optional arguments for the extraction method\n          ...\n```\n\n\n\nThe 2 main fields are:\n\n- `interface.inputSpec`: A dictionary that describes the inputs of the virtual experiment and how to extract them\n- `interface.propertiesSpec`: An array of dictionaries (one per `property`) that describes how to extract the values of the `property`\n\nWithin both fields the developer defines  extraction methods which tell ST4SD how to extract values that the virtual experiment reads (`input` ids) and writes (`property` values). \n\n- See [input extraction methods](#input-extraction-methods) for details on choices for that field\n- See [property extraction methods](#property-extraction-methods) for details on choices for that field\n\nBoth input extraction methods and property extraction methods can have 2 sub-fields, `source` and `args` which may be optional.  If the `source` method is present it must be one of the options outlined in [source methods](#source-methods)\n\n\n## Input Extraction Methods\n\nInput extraction methods are used by to retrieve a list of the input system ids\n\n### csvColumn\n\nUse the `csvColumn` extraction method if the input ids of your experiment are defined in a column of an input CSV file **which has column headers**.\n\n#### Options\n\n```yaml\nsource:\n  path: #The path SOURCE-METHOD. See source-methods for more\nargs:\n  column: #The name of the column in the CSV file containing the ids (the column header)\n```\n\n#### Example\n\n```YAML\ninterface:\n  inputSpec:\n    namingScheme: 'SMILES'\n    inputExtractionMethod: \n      csvColumn:\n        source:\n          path: 'input/input_smiles.csv'\n        args:\n          column: \"SMILES\"\n```\n\n\n\n\n\n### hookGetInputIds\n\nUse `hookGetInputIds` when you want to provide your own python function for getting the input ids.\n\n<InlineNotification>\n\nTo use this method the developer must provide an implementation of the following python function and place it in a file called `interface.py` in the `hooks` directory of their virtual experiment. Note: this file can contain other functions also.\n\n</InlineNotification>\n\n```python\ndef get_input_ids(input_id_file: str, variables: Dict[str, str]) -> List[str]:\n   '''\n       Params: \n            input_id_file (str): The path to the location of the file that contains input ids of the inputs systems. This comes from the `source.path` option in the interface YAML.\n            variables (dict): A dictionary of the global and user variables passed to the virtual experiment instance\n            \n       Returns: \n            A list of strings each of which is the id of an input system\n   '''\n     pass\n```\n\n#### Options\n\n\n\n```yaml\nsource:\n  path: #A path relative to the root directory of the virtual experiment instance. It points to the CSV file that contains the `input-ids`.\n```\n\n#### Example\n\n\n\n```yaml\ninterface:\n  inputSpec:\n    namingScheme: 'SMILES'\n    inputExtractionMethod: \n      hookGetInputIds:\n        source:\n          path: 'input/input_smiles.csv'\n```\n\n<InlineNotification>\n\nThe [band-gap-gamess](https://github.com/st4sd/band-gap-gamess) virtual experiment uses `hookGetInputIds` to describe the extraction of input ids.\n\n</InlineNotification>\n\n## Property Extraction Methods\n\nProperty extraction methods conceptually produce a properties table which contains at least 2 columns: `(input-id, $propertyName)`where $propertyName is the name of the property in the `propertiesSpec` element using the extraction method. Note: in practice `propertyName` will be transformed to lowercase.\n\n### csvDataFrame\n\nUse this method if \n\n* there is a single CSV file to extract the values of a particular property from for all input\n* The properties are stored in a column of this CSV file\n* The input ids are stored in a column of this CSV file\n\n**Note:**\n\nThe table created by this method must have column headers `input-id` and $PROPERTYNAME.  The `csvDataFrame` property extractor can change the column names to these correct values using the `renameColumns` option (see Example)\n\n#### Options\n\n\n\n```yaml\nsource:\n   $SOURCE_METHOD_NAME # Name of the source methods and its options. See below. \nargs:\n   renameColumns: #Optional: Dictionary whose keys are column names in the CSV file and values are the names to rename the associated key columns. Output column names are implicitly converted to `lowercase`\n   `${name}: ${value}`: #(Optional) Arguments to the `pandas.read_csv()` method. The default arguments are `engine=\"python\"` and `sep=None`.\n```\n\n#### Example\n\n\n\n```yaml\npropertiesSpec:\n- name: 'band-gap'\n  propertyExtractionMethod:\n    csvDataFrame:\n      source:\n        keyOutput: 'FinalEnergies'\n      args:\n        renameColumns:\n          SMILE: \"input-id\"\n        usecols:\n        - \"SMILE\"\n        - \"band-gap\"\n```\n\n\n\n### hookGetProperties\n\nUse`hookGetProperties` when you want to provide your own python function for getting the property values. \n\n<InlineNotification>\n\nTo use this method the developer must provide an implementation of the following python function and place it in a file called `interface.py` in the `hooks` directory of their virtual experiment. Note: this file can contain other functions also.\n\n</InlineNotification>\n\n```python\ndef get_properties(property_name:str, property_output_file: str, input_id_file: str, variables: Dict[str, str]) -> pandas.DataFrame\n   '''\n       Params: \n            property_name (str): The name of the property the function should return the values of.  \n            property_output_file (str): The path to the file containing the properties \n            input_id_file (str): The path to the file containing the input_ids\n            variables (dict): A dictionary of the global and user variables passed to the virtual experiment instance\n            \n       Returns: \n            A `pandas.DataFrame` that contains at least 2 columns: `input-id`, `${propertyName}`. \n   '''\n     pass\n```\n\nIf `hookGetProperties` is defined as the propertyExtractionMethod for property `idx` the values passed to the parameters of this function are determined as follows\n\n* `property_name` : The value of `interface.propertiesSpec[idx].name`\n* `property_output_file`: The value returned by the`interface.propertiesSpec[idx].propertyExtractionMethod.hookGetProperties.source` method\n* `input_id_file`:  The value of `interface.inputSpec.inputExtractionMethod.$METHOD.source`\n\nNote: The column headers in the returned pandas DataFrame will be converted to lowercase by ST4SD. \n\n#### Options\n\n\n\n```yaml\nhookGetInputIds:\n  source: #A source method - see below for details\n```\n\n#### Example\n\n\n```yaml\npropertiesSpec:\n- name: 'band-gap'\n  propertyExtractionMethod:\n    hookGetProperties:\n      source:\n        keyOutput: 'FinalEnergies'\n```\n\n<InlineNotification>\n\nThe [band-gap-gamess](https://github.com/st4sd/band-gap-gamess) virtual experiment uses `hookGetProperties` to describe the extraction of properties.\n\n</InlineNotification>\n\n## Source methods\n\nSource methods define different ways of defining a source file-path that is used by input or property extraction methods\n\n### path\n\nUse this method if you know the full path of the source file. \n\n#### Options\n\n\n\n```YAML\npath: $PATH #A path relative to the root directory of the virtual experiment instance. It points to the CSV file that contains the `input-ids`.\n```\n\n#### Example\n\n\n\n```YAML\npropertyExtractionMethod:\n  hookGetProperties:\n    source:\n      path: \"stages/stage1/EnergiesExtraction/energies.csv\"\n```\n\n\n\n### keyOutput\n\nUse this method if the properties are in a key-output of the experiment. This method avoids having to know the path to the file (which could change if storage methods change)\n\n#### Options\n\n\n\n```YAML\n# The name of a key-output in the experiment.\n# These are keys of the top-level FlowIR field `output`.\nkeyOutput: $KEYOUTPUT\n```\n\n#### Example\n\n\n\n```YAML\npropertyExtractionMethod:\n  hookGetProperties:\n    source:\n      keyOutput: \"FinalEnergies\"\n```\n\n\n\n## Example\n\nIn this example we have a simple virtual experiment that counts vowels and letters in strings. Here is the FlowIR definition:\n\n```yaml\noutput:\n  vowels:\n    data-in: stage0.count-vowels/vowels.csv:ref\n  letters:\n    data-in: stage0.count-letters/letters.csv:ref\n\ncomponents:\n- name: count-vowels\n  references:\n  - input/words.csv:ref\n  command:\n    executable: bin/count_vowels.py\n    arguments: input/words.csv:ref\n\n- name: count-letters\n  references:\n  - input/words.csv:ref\n  command:\n    executable: bin/count_letters.py\n    arguments: input/words.csv:ref\n```\n\nHere is an input `words.csv` file:\n\n```\nword;\nhello;\nawesome;\nworld;\n```\n\nWhen we process the above `input` file with this workflow we get 2 outputs:\n\nThe output `vowels` contains the CSV file:\n\n```\na;e;i;o;u;word;vowels\n0;1;0;1;0;hello;2\n1;2;0;1;0;awesome;4\n0;0;0;1;0;world;1\n```\n\nThe output `letters` contains the CSV file:\n\n```\nword;letters\nhello;5\nawesome;7\nworld;5\n```\n\n### Interface\n\nAn interface to this experiment is shown below. This interface used `csvColumn` input extraction method and the `csvDataFrame` property extraction method. These methods mean the developer does not have to write any other code. \n\n\n```yaml\ninterface:\n  description: Counts vowels in words\n  inputSpec:\n    namingScheme: words\n    inputExtractionMethod:\n      csvColumn:\n        source:\n          path: input/words.csv\n        args:\n          column: word\n  propertiesSpec:\n  - name: Vowels\n    propertyExtractionMethod:\n      csvDataFrame:\n        source:\n          keyOutput: vowels\n        args:\n          renameColumns:\n            word: input-id\n          usecols:\n          - word\n          - vowels\n  - name: Letters\n    propertyExtractionMethod:\n      csvDataFrame:\n        source:\n          keyOutput: letters\n        args:\n          renameColumns:\n            word: input-id\n          usecols:\n          - word\n          - letters\n```\n\n\n\n### Run Details\n\nAdding the `interface` definition will cause instances of the virtual experiment to generate 2 new files:\n\n - `${INSTANCE_DIR}/output/properties.csv`: This is a `;` delimited `CSV` file that contains the `properties` columns produced by each property defined in `propertySpec`.\n - `${INSTANCE_DIR}/outputs/input-ids.json`: A JSON file that contains an array of strings. Each string is the id of an input system.\n\nFor the above example we would get the following in  `${INSTANCE_DIR}/output/properties.csv`:\n\n```\ninput-id;vowels;letters\nhello;2;5\nawesome;4;7\nworld;1;5\n```\n\nThe input ids file (`${INSTANCE_DIR}/outputs/input-ids.json`) looks like this:\n\n```json\n[\n    \"hello\",\n    \"awesome\",\n    \"world\"\n]\n```\n\n\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/writing-a-virtual-experiment-interface.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}