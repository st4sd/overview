{"componentChunkName":"component---src-pages-cloud-manage-users-mdx","path":"/cloud-manage-users/","result":{"pageContext":{"frontmatter":{"title":"Manage ST4SD users"},"relativePagePath":"/cloud-manage-users.mdx","titleType":"page","MdxNode":{"id":"d8d5c1a2-2797-5375-8f65-503cd8029d25","children":[],"parent":"13f8f19e-3326-57fb-b505-0e6354ffe266","internal":{"content":"---\ntitle: Manage ST4SD users\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nManage the access rights of users in your ST4SD deployment on OpenShift.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Give a group of users full access to the ST4SD namespace</AnchorLink>\n  <AnchorLink>Give a group of users access to just the ST4SD microservices</AnchorLink>\n  <AnchorLink>Role objects that ST4SD creates in its namespace</AnchorLink>\n</AnchorLinks>\n\n\nWe recommend grouping your users based on their intended access level to your ST4SD deployment and then using a RoleBinding to configure the Role Based Access Control (RBAC) settings of the Group object.\n\n\n## Give a group of users full access to the ST4SD namespace\n\nFor example, if you wish to configure the RBAC of the users `A` and `B` so that they have full access to the ST4SD microservices and the objects in the same namespace. Put the following in a file called `group-full-access.yaml`:\n\n\n```yaml\nkind: Group\napiVersion: user.openshift.io/v1\nmetadata:\n  name: st4sd-full-access-<namespace-you-deployed-st4sd-in>\nusers:\n  - Account name of user A\n  - Account name of user B\n```\n\nThen create the following file `rolebinding-full-access.yaml`:\n\n```yaml\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: st4sd-full-access\n  namespace: <namespace-you-deployed-st4sd-in>\nsubjects:\n  - kind: Group\n    apiGroup: rbac.authorization.k8s.io\n    name: st4sd-full-access-<namespace-you-deployed-st4sd-in>\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: workflow-user\n```\n\nNow, make sure that you:\n\n1. have replaced `<namespace-you-deployed-st4sd-in>` in the 2 files with the namespace that you deployed ST4SD in.\n2. have written down the correct account name of your users.\n    1. Login to your OpenShift Web Console as an Administrator.\n    2. On the left pane expand the `User Management` menu\n    3. Click on the `Users` entry\n    4. Locate the users `A` and `B` in the list and copy the values that you find for them under the `Name` column\n\nRun `oc create -f group-full-access.yaml && oc create -f rolebinding-full-access.yaml`. The users `A` and `B` may now access your ST4SD instance.\n\n## Give a group of users access to just the ST4SD microservices\n\nYou may want to enable two users `A` and `B` to use the ST4SD microservices but be unable to interact with OpenShift in any meaningful way. In this case, put the following in a file called `microservices-only.yaml`:\n\n\n```yaml\nkind: Group\napiVersion: user.openshift.io/v1\nmetadata:\n  name: st4sd-microservices-only-<namespace-you-deployed-st4sd-in>\nusers:\n  - Account name of user A\n  - Account name of user B\n```\n\nThen create the following file `rolebinding-microservices-only.yaml`:\n\n```yaml\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: st4sd-microservices-only\n  namespace: <namespace-you-deployed-st4sd-in>\nsubjects:\n  - kind: Group\n    apiGroup: rbac.authorization.k8s.io\n    name: st4sd-microservices-only-<namespace-you-deployed-st4sd-in>\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: st4sd-authenticate-microservices\n```\n\nNow, make sure that you:\n\n1. have replaced `<namespace-you-deployed-st4sd-in>` in the 2 files with the namespace that you deployed ST4SD in.\n2. have written down the correct account name of your users.\n    1. Login to your OpenShift Web Console as an Administrator.\n    2. On the left pane expand the `User Management` menu\n    3. Click on the `Users` entry\n    4. Locate the users `A` and `B` in the list and copy the values that you find for them under the `Name` column\n\nRun `oc create -f microservices-only.yaml && oc create -f rolebinding-microservices-only.yaml`. The users `A` and `B` may now access your ST4SD instance.\n\n\n## Role objects that ST4SD creates in its namespace\n\nDeployments of ST4SD on OpenShift contain:\n\n- Several ST4SD Microservices (st4sd-runtime-service, st4sd-registry-ui, st4sd-datastore)\n- The ST4SD Workflow Operator (st4sd-runtime-k8s)\n- A Database backend (mongodb)\n\nAs a cluster administrator, you can install ST4SD multiple times on your cluster. Each ST4SD deployment is contained to a single namespace. Users of one ST4DS deployment do not necessarily have access to other deployments. The cluster administrator, configures the Role Based Access Control (RBAC) of users to configure which user can access which ST4SD instance.\n\nInstalling ST4D in a namespace creates the following 2 Role objects in the same namespace:\n\n1. `st4sd-authenticate-microservices`: Assigning this role to a user enables them to `get` Service objects in the same namespace as ST4SD. This is the minimum RBAC that a user requires to be able to authenticate to the ST4SD microservices. However, they do not get enough permissions to interact directly with the ST4SD Workflow Operator or other namespaced objects in the same OpenShift project.\n2. `workflow-user`: Assigning this role to a user enables them to authenticate against the ST4SD microservices. Additionally, it gives them Create Read Update Delete (CRUD) permissions to interact with namespaced objects in the same namespace. This includes the namespaced objects that the ST4SD workflow operator interacts with.\n\n\n<InlineNotification kind=\"info\">\nThe 2 roles above do not enable users to modify the \"simulationtoolkit\" CustomResource objects that st4sd-olm monitors to control the deployment of the ST4SD instance in the namespace.\n</InlineNotification>\n\n","type":"Mdx","contentDigest":"5fae4daaf8ae7e24081a465654eec75c","owner":"gatsby-plugin-mdx","counter":192},"frontmatter":{"title":"Manage ST4SD users"},"exports":{},"rawBody":"---\ntitle: Manage ST4SD users\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nManage the access rights of users in your ST4SD deployment on OpenShift.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Give a group of users full access to the ST4SD namespace</AnchorLink>\n  <AnchorLink>Give a group of users access to just the ST4SD microservices</AnchorLink>\n  <AnchorLink>Role objects that ST4SD creates in its namespace</AnchorLink>\n</AnchorLinks>\n\n\nWe recommend grouping your users based on their intended access level to your ST4SD deployment and then using a RoleBinding to configure the Role Based Access Control (RBAC) settings of the Group object.\n\n\n## Give a group of users full access to the ST4SD namespace\n\nFor example, if you wish to configure the RBAC of the users `A` and `B` so that they have full access to the ST4SD microservices and the objects in the same namespace. Put the following in a file called `group-full-access.yaml`:\n\n\n```yaml\nkind: Group\napiVersion: user.openshift.io/v1\nmetadata:\n  name: st4sd-full-access-<namespace-you-deployed-st4sd-in>\nusers:\n  - Account name of user A\n  - Account name of user B\n```\n\nThen create the following file `rolebinding-full-access.yaml`:\n\n```yaml\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: st4sd-full-access\n  namespace: <namespace-you-deployed-st4sd-in>\nsubjects:\n  - kind: Group\n    apiGroup: rbac.authorization.k8s.io\n    name: st4sd-full-access-<namespace-you-deployed-st4sd-in>\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: workflow-user\n```\n\nNow, make sure that you:\n\n1. have replaced `<namespace-you-deployed-st4sd-in>` in the 2 files with the namespace that you deployed ST4SD in.\n2. have written down the correct account name of your users.\n    1. Login to your OpenShift Web Console as an Administrator.\n    2. On the left pane expand the `User Management` menu\n    3. Click on the `Users` entry\n    4. Locate the users `A` and `B` in the list and copy the values that you find for them under the `Name` column\n\nRun `oc create -f group-full-access.yaml && oc create -f rolebinding-full-access.yaml`. The users `A` and `B` may now access your ST4SD instance.\n\n## Give a group of users access to just the ST4SD microservices\n\nYou may want to enable two users `A` and `B` to use the ST4SD microservices but be unable to interact with OpenShift in any meaningful way. In this case, put the following in a file called `microservices-only.yaml`:\n\n\n```yaml\nkind: Group\napiVersion: user.openshift.io/v1\nmetadata:\n  name: st4sd-microservices-only-<namespace-you-deployed-st4sd-in>\nusers:\n  - Account name of user A\n  - Account name of user B\n```\n\nThen create the following file `rolebinding-microservices-only.yaml`:\n\n```yaml\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: st4sd-microservices-only\n  namespace: <namespace-you-deployed-st4sd-in>\nsubjects:\n  - kind: Group\n    apiGroup: rbac.authorization.k8s.io\n    name: st4sd-microservices-only-<namespace-you-deployed-st4sd-in>\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: st4sd-authenticate-microservices\n```\n\nNow, make sure that you:\n\n1. have replaced `<namespace-you-deployed-st4sd-in>` in the 2 files with the namespace that you deployed ST4SD in.\n2. have written down the correct account name of your users.\n    1. Login to your OpenShift Web Console as an Administrator.\n    2. On the left pane expand the `User Management` menu\n    3. Click on the `Users` entry\n    4. Locate the users `A` and `B` in the list and copy the values that you find for them under the `Name` column\n\nRun `oc create -f microservices-only.yaml && oc create -f rolebinding-microservices-only.yaml`. The users `A` and `B` may now access your ST4SD instance.\n\n\n## Role objects that ST4SD creates in its namespace\n\nDeployments of ST4SD on OpenShift contain:\n\n- Several ST4SD Microservices (st4sd-runtime-service, st4sd-registry-ui, st4sd-datastore)\n- The ST4SD Workflow Operator (st4sd-runtime-k8s)\n- A Database backend (mongodb)\n\nAs a cluster administrator, you can install ST4SD multiple times on your cluster. Each ST4SD deployment is contained to a single namespace. Users of one ST4DS deployment do not necessarily have access to other deployments. The cluster administrator, configures the Role Based Access Control (RBAC) of users to configure which user can access which ST4SD instance.\n\nInstalling ST4D in a namespace creates the following 2 Role objects in the same namespace:\n\n1. `st4sd-authenticate-microservices`: Assigning this role to a user enables them to `get` Service objects in the same namespace as ST4SD. This is the minimum RBAC that a user requires to be able to authenticate to the ST4SD microservices. However, they do not get enough permissions to interact directly with the ST4SD Workflow Operator or other namespaced objects in the same OpenShift project.\n2. `workflow-user`: Assigning this role to a user enables them to authenticate against the ST4SD microservices. Additionally, it gives them Create Read Update Delete (CRUD) permissions to interact with namespaced objects in the same namespace. This includes the namespaced objects that the ST4SD workflow operator interacts with.\n\n\n<InlineNotification kind=\"info\">\nThe 2 roles above do not enable users to modify the \"simulationtoolkit\" CustomResource objects that st4sd-olm monitors to control the deployment of the ST4SD instance in the namespace.\n</InlineNotification>\n\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/cloud-manage-users.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}