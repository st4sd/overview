{"componentChunkName":"component---src-pages-build-experiments-registry-ui-mdx","path":"/build-experiments-registry-ui/","result":{"pageContext":{"frontmatter":{"title":"Building experiment using your browser"},"relativePagePath":"/build-experiments-registry-ui.mdx","titleType":"page","MdxNode":{"id":"203d66c6-5413-5707-9913-6cd4a3171c1d","children":[],"parent":"d7e367cb-4ec4-5043-b082-9c9f68b2b798","internal":{"content":"---\ntitle: Building experiment using your browser\n---\n\nimport { Tools } from \"@carbon/pictograms-react\";\nimport { ServerOperatingSystems } from '@carbon/pictograms-react';\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThis page gives an overview of the functionality to build or modify experiments\nin a browser using the Build Canvas and Graph Library features of the ST4SD\nVirtual Experiments Registry UI.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Create experiments via the Build Canvas</AnchorLink>\n  <AnchorLink>The Graph Library</AnchorLink>\n</AnchorLinks>\n\n## Create experiments via the Build Canvas\n\nThe Build Canvas enables users to create new experiments and modify existing\nones. With this feature, users can create Workflows and Components from scratch\nor reuse those that have already been saved in the Graph Library. When you first\nstart using ST4SD, your Graph Library will be empty, but you can easily add to\nit as you create and save new experiments.\n\nTo access the Build Canvas, you have two options:\n\n- To create a new experiment, click the \"Build an experiment\" link at the top\n  left corner of the ST4SD Registry UI webpage.\n- To modify an existing experiment, go to the main page of the experiment you\n  want to modify and click the \"Edit experiment\" button.\n\nThe Build Canvas looks like this:\n\n![The Canvas interface for building and modifying experiments](../assets/images/canvas/build-canvas.png)\n\nThe Build Canvas is divided into two main sections:\n\n### Workspace\n\nThe Template Workspace is the side panel on the right-hand side of the Build\nCanvas. It contains a library of Templates that users can drag and drop onto the\nWorkspace area to speed up their experiment creation process. The Template\nWorkspace acts as a temporary scratch space where users can have a list of\nWorkflow and Component templates.\n\nWhen users first open the Build Canvas, the Template Workspace on the left will\nbe populated with items from the Graph Library. The entries in the side panel\nare organized as follows:\n\n- Workflows (graph templates) are indicated by a green background.\n- Components (individual task templates) have a white background.\n- Entries with a `(*)` suffix indicate that they have not been saved to the\n  Graph Library yet.\n\n## Building the graph of an experiment\n\nYou can create the main Graph of your virtual experiment by nesting Components\n(individual tasks) and other Workflows (sub-graphs) inside a Workflow. Both\nWorkflows and Components share a common interface, which consists of a signature\nwith name and parameters and a set of implicit outputs.\n\nThe outputs of a Workflow are its nested steps, while the outputs of a Component\nare the paths that it generates when it executes. Since Workflows and Components\nhave the same interface, we can use the term \"Template\" to refer to either of\nthem.\n\nA Template's parameters must receive a value, which can come from one of three\nsources:\n\n1. The output of a different Component.\n2. The value of a parameter of the parent Workflow.\n3. If neither of the above, the default value of the template's parameter.\n\nTo nest a template inside a Workflow, simply drag and drop a template from\neither the Template Workspace side panel or the main Workspace onto the\nWorkflow. Next, enter the name of the step that will execute the child template\nin the form that appears. Ensure that the name is unique among the children of\nthe parent Workflow you selected.\n\nNext, provide the values of the parameters for the child template. You have a\nfew options for setting the parameters:\n\n- Set parameters of the child template to literal values by editing the child\n  template directly.\n- Set the child parameters to parameters of the parent by connecting the\n  parent's parameters to those of the child. To do this, drag the anchor at the\n  bottom of the parent workflow inputs to the top anchor point of the child\n  template. Then, assign values to the child parameters in the new form that\n  appears.\n- Configure the child step to consume outputs of its siblings. To do this, drag\n  the bottom anchor point of a sibling step to the top anchor point of this\n  child step. Then, assign values to the child parameters in the new form that\n  appears.\n\nThe Build Canvas creates experiments that adhere to version 2.0 of the ST4SD\nWorkflow Specification (i.e. DSL 2.0). You can find more information on DSL 2.0\nat the [Workflow Specification 2.0 page](/workflow-specification-dsl).\n\nHere are a few example videos that demonstrate how to use the Build Canvas:\n\n<Tabs>\n\n<Tab label=\"Hello world from scratch\">\n\nSimple hello world example:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/create-hello-world.mp4\"></Video>\n\n<br />\n\nThe `hello-world` Workflow includes a parameter called `greetings` of type\n`executionOptions` that can be modified by users during the experiment launch.\nThis parameter influences the message printed by the workflow's single\ncomponent, which utilizes the `echo` command. The value of `greetings` is\npropagated from the parent workflow to the child component, determining the\nmessage that is printed.\n\n</Tab>\n\n<Tab label=\"Edit existing experiments\">\n\nYou can edit the graph of experiments you create using the Build Canvas:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/edit-experiment.mp4\"></Video>\n\n<br />\n\nTo modify an experiment, simply navigate to its page and click the \"Edit\nexperiment\" button. This will allow you to use the Build Canvas to make changes\nto the experiment's graph. For example, in the \"hello-world\" experiment, we can\nadd two \"executionOption\" variables: \"greeting\" and \"name\". The \"greeting\"\nvariable can take on the values \"hello\" or \"goodbye\", while the \"name\" variable\ncan be any string. With these changes, the updated \"hello-world\" experiment can\nnow print \"hello $name\" or \"goodbye $name\".\n\n</Tab>\n\n<Tab label=\"Syntax check errors during building\">\n\n<br />\n\nExperiments undergo syntax checking **before** going into the experiment\ncatalog:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/syntax-checks.mp4\"></Video>\n\n<br />\n\nWhen you click the \"Register experiment\" button, the runtime service will check\nthe experiment for errors. If any errors are found, the service will reject the\nexperiment and provide a list of errors that need to be fixed before it can be\nregistered again. This list of errors can also be accessed while editing\nworkflows and components, and you can re-run the validation logic to refresh the\nlist of errors.\n\n<br />\n\nWhen building graphs keep the following in mind:\n\n<br />\n\n- The parameters of the entrypoint workflow must either be input files\n  (indicated by names starting with `input.`) or have default values assigned to\n  them.\n- A step in a workflow can only use the parameters of that workflow or the\n  outputs of other steps within the same workflow.\n- Circular dependencies are not allowed.\n- Each component must have an executable associated with it.\n\n<br />\n\nYou can find more information regarding DSL 2.0 at the\n[Workflow Specification 2.0 page](/workflow-specification-dsl).\n\n</Tab>\n\n<Tab label=\"Consume output of component\">\n\nProvide the path to the file `results.dat` that the `simulation` component\nproduces to the `analysis` component:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/wire-components.mp4\"></Video>\n\n<br />\n\nThe runtime will prefix the path `/results.dat` with the path to the working\ndirectory of `simulation`. Then it will apply the `:ref` method to produce the\nabsolute path to the `results.dat` path. This is the value that will propagate\nto the `data` parameter of the `analysis` component.\n\n</Tab>\n\n<Tab label=\"Run a custom python script\">\n\nFirst containerize your python script and then use it in a component with the\n`kubernetes` backend:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/use-image.mp4\"></Video>\n\n<br />\n\nTo containerize your python application you can follow the\n`How to use this image` tutorial of the `python` image that the Docker community\nmaintains here: <https://hub.docker.com/_/python>. You may then upload the\ncontainer to a Container registry that you have access.\n\n<br />\n\nThe above example uses the image `quay.io/ibmvassiliad/sum:latest`. The image\nconsists of just 3 files:\n\n<br />\n\n<details><summary>sum.py</summary>\n\n```python\n#!/usr/bin/env python\n\nimport numpy as np\nimport sys\n\n# calculate the sum of N floats\nprint(np.sum([float(x) for x in sys.argv[1:]]))\n```\n\n</details>\n\n<details><summary>requirements.txt</summary>\n\n```\nnumpy==1.26.3\n```\n\n</details>\n\n<details><summary>Dockerfile</summary>\n\n```docker\nFROM python:3.11-slim\n\nRUN    apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Make sure that files under /app are part of $PATH\nENV PATH=$PATH:/app\nWORKDIR /app\n\nCOPY requirements.txt /app/requirements.txt\n\nRUN pip install -r requirements.txt\n\nCOPY sum.py /app/sum.py\n\n# Make the sum.py file executable\nchmod +x /app/sum.py\n```\n\n<br />\n\nTo build and push the container place all 3 files in the same directory and then\nin a terminal inside that directory execute:\n\n<br />\n\n```\npodman build --platform linux/amd64 -f Dockerfile -t <your registry>/sum:latest\npodman push <your registry>/sum:latest\n```\n\n</details>\n\n</Tab>\n\n</Tabs>\n\n## The Graph Library\n\nThe Graph Library is a collection of reusable Workflow recipes that the Build\nCanvas uses to populate the `Template Workspace` side-panel. New installations\nof ST4SD come with an empty library, and users can manage the library's contents\nvia the Build Canvas.\n\nThe Graph Library has several properties:\n\n- Each entry is a workflow, and if a user registers a Component template, the\n  library automatically wraps it in a single-step Workflow container.\n- Entries are identified by the name of their top-level workflow.\n- Entries are immutable, meaning that to modify one, you must first delete it\n  and then add a new graph with the same name.\n- Entries are syntactically valid, and if a user attempts to add a\n  Workflow/Component with errors, they will receive error messages listing the\n  problems. The user must fix the errors before adding the template to the Graph\n  Library.\n\nUsers can manage the Graph Library via the Template Workspace side-panel UI\nelement of the Build Canvas. To access the Build Canvas, click the\n`Build experiment` button in the top left corner of the ST4SD Registry UI\nWebPage or the `Edit experiment` button in the main page of one of your\nexperiments.\n\nThe Build Canvas starts by loading the Graph Library's contents and displaying\nthem in the Template Workspace side-panel UI element. Users can move templates\nbetween the Workspace and the Template Workspace, as well as between the\nTemplate Workspace and the Graph Library. Entries that are in the Template\nWorkspace but have not been stored in the Graph Library have a `(*)` suffix in\ntheir name.\n\nThe following videos demonstrate the core operations of the Graph Library:\n\n<Tabs>\n\n<!--\nVV: Bug is currently preventing this from working\n\n<Tab label=\"Glance at metadata of a Graph\">\n\nYou can see the name, description, and parameters of a Graph.\n\n<br/>\n\n<br/>\n\nTo see the full implementation details (i.e. nested steps etc) of the Graph simply drag and drop the template from the Template Workspace into the Workspace.\n\n</Tab>\n-->\n\n<Tab label=\"Use a Graph\">\n\nSimply drag and drop an entry of the Template Workspace into the Workspace:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/import-template.mp4\"></Video>\n\n<br />\n\nYou can see the full implementation details of the imported template after you\ndrag it from the Template Workspace into the Workspace. The template will then\nbehave as if you had just created it from scratch. For example you can modify as\npart of editing the graph of your experiment.\n\n</Tab>\n\n<Tab label=\"Persist a new Graph\">\n\nYou can store Graphs (Workflows and Components) in the Graph Library via the\nTemplate Workspace:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/persist-template.mp4\"></Video>\n\n<br />\n\nTo add a Workflow or Component template to the Graph Library, start by locating\nthe template in your Workspace. Double-click on the template to open a pop-up\nwindow, and then scroll to the bottom of the window to find the \"Add to Template\nWorkspace\" button. Clicking this button will create an entry for the template in\nthe Template Workspace. If the template is a Workflow, all of its nested\nchildren will be packaged into a single Graph and stored in the Graph Library.\n\n<br />\n\nWhen you click the `Share` button you will notice a few changes taking place at\nthe same time:\n\n<br />\n\n- the suffix `(*)` in the entry's name will go away as the template is stored in\n  the Graph Library\n- if the template was a Component (i.e. it had a white background) it will\n  automatically be wrapped inside a single-step Workflow (i.e. it will turn\n  green)\n\n</Tab>\n\n<Tab label=\"Delete a Graph\">\n\nDouble click on an entry in the Template Workspace and click the `Delete`\nbutton:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/delete-template.mp4\"></Video>\n\n<br />\n\nNote that this operation cannot be undone.\n\n</Tab>\n\n<Tab label=\"Modify a Graph\">\n\nHere is how to modify an existing Graph:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/modify-template.mp4\"></Video>\n\n<br />\n\nNotice that we drop the Graph into the Workspace so that we can modify it. Then\nwe remove the entry from the Graph Library and edit the Graph (i.e. remove some\nparts of it). Finally, we just add it back into the Graph Library.\n\n</Tab>\n\n</Tabs>\n\n## Learn more\n\n<div className=\"expressive-content-list-group\">\n\n  <ExpressiveList \n    title=\"Mastering stp\"\n    background=\"true\"\n    pictogram={<Tools />}\n  >\n\nLearn how to master [our command line tool](/stp), `stp`, for creating and\nmanaging virtual experiment packages.\n\n  </ExpressiveList>\n\n  <ExpressiveList\n    title=\"Use the APIs\"\n    background=\"true\"\n    pictogram={<ServerOperatingSystems />}\n  >\n\n[Learn](/running-workflows-on-openshift) how to use the ST4SD python client API\nto run, query, and interact with virtual experiments. The APIs also offer access\nto a trove of experiment metadata and files such as logs and outputs. You can\nfind more examples in our Jupyter Notebooks\n[example repository](https://github.com/st4sd/st4sd-examples).\n\n  </ExpressiveList>\n  \n</div>\n","type":"Mdx","contentDigest":"6376a6cae73383d53a9ef9ddc10942dc","owner":"gatsby-plugin-mdx","counter":245},"frontmatter":{"title":"Building experiment using your browser"},"exports":{},"rawBody":"---\ntitle: Building experiment using your browser\n---\n\nimport { Tools } from \"@carbon/pictograms-react\";\nimport { ServerOperatingSystems } from '@carbon/pictograms-react';\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThis page gives an overview of the functionality to build or modify experiments\nin a browser using the Build Canvas and Graph Library features of the ST4SD\nVirtual Experiments Registry UI.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Create experiments via the Build Canvas</AnchorLink>\n  <AnchorLink>The Graph Library</AnchorLink>\n</AnchorLinks>\n\n## Create experiments via the Build Canvas\n\nThe Build Canvas enables users to create new experiments and modify existing\nones. With this feature, users can create Workflows and Components from scratch\nor reuse those that have already been saved in the Graph Library. When you first\nstart using ST4SD, your Graph Library will be empty, but you can easily add to\nit as you create and save new experiments.\n\nTo access the Build Canvas, you have two options:\n\n- To create a new experiment, click the \"Build an experiment\" link at the top\n  left corner of the ST4SD Registry UI webpage.\n- To modify an existing experiment, go to the main page of the experiment you\n  want to modify and click the \"Edit experiment\" button.\n\nThe Build Canvas looks like this:\n\n![The Canvas interface for building and modifying experiments](../assets/images/canvas/build-canvas.png)\n\nThe Build Canvas is divided into two main sections:\n\n### Workspace\n\nThe Template Workspace is the side panel on the right-hand side of the Build\nCanvas. It contains a library of Templates that users can drag and drop onto the\nWorkspace area to speed up their experiment creation process. The Template\nWorkspace acts as a temporary scratch space where users can have a list of\nWorkflow and Component templates.\n\nWhen users first open the Build Canvas, the Template Workspace on the left will\nbe populated with items from the Graph Library. The entries in the side panel\nare organized as follows:\n\n- Workflows (graph templates) are indicated by a green background.\n- Components (individual task templates) have a white background.\n- Entries with a `(*)` suffix indicate that they have not been saved to the\n  Graph Library yet.\n\n## Building the graph of an experiment\n\nYou can create the main Graph of your virtual experiment by nesting Components\n(individual tasks) and other Workflows (sub-graphs) inside a Workflow. Both\nWorkflows and Components share a common interface, which consists of a signature\nwith name and parameters and a set of implicit outputs.\n\nThe outputs of a Workflow are its nested steps, while the outputs of a Component\nare the paths that it generates when it executes. Since Workflows and Components\nhave the same interface, we can use the term \"Template\" to refer to either of\nthem.\n\nA Template's parameters must receive a value, which can come from one of three\nsources:\n\n1. The output of a different Component.\n2. The value of a parameter of the parent Workflow.\n3. If neither of the above, the default value of the template's parameter.\n\nTo nest a template inside a Workflow, simply drag and drop a template from\neither the Template Workspace side panel or the main Workspace onto the\nWorkflow. Next, enter the name of the step that will execute the child template\nin the form that appears. Ensure that the name is unique among the children of\nthe parent Workflow you selected.\n\nNext, provide the values of the parameters for the child template. You have a\nfew options for setting the parameters:\n\n- Set parameters of the child template to literal values by editing the child\n  template directly.\n- Set the child parameters to parameters of the parent by connecting the\n  parent's parameters to those of the child. To do this, drag the anchor at the\n  bottom of the parent workflow inputs to the top anchor point of the child\n  template. Then, assign values to the child parameters in the new form that\n  appears.\n- Configure the child step to consume outputs of its siblings. To do this, drag\n  the bottom anchor point of a sibling step to the top anchor point of this\n  child step. Then, assign values to the child parameters in the new form that\n  appears.\n\nThe Build Canvas creates experiments that adhere to version 2.0 of the ST4SD\nWorkflow Specification (i.e. DSL 2.0). You can find more information on DSL 2.0\nat the [Workflow Specification 2.0 page](/workflow-specification-dsl).\n\nHere are a few example videos that demonstrate how to use the Build Canvas:\n\n<Tabs>\n\n<Tab label=\"Hello world from scratch\">\n\nSimple hello world example:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/create-hello-world.mp4\"></Video>\n\n<br />\n\nThe `hello-world` Workflow includes a parameter called `greetings` of type\n`executionOptions` that can be modified by users during the experiment launch.\nThis parameter influences the message printed by the workflow's single\ncomponent, which utilizes the `echo` command. The value of `greetings` is\npropagated from the parent workflow to the child component, determining the\nmessage that is printed.\n\n</Tab>\n\n<Tab label=\"Edit existing experiments\">\n\nYou can edit the graph of experiments you create using the Build Canvas:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/edit-experiment.mp4\"></Video>\n\n<br />\n\nTo modify an experiment, simply navigate to its page and click the \"Edit\nexperiment\" button. This will allow you to use the Build Canvas to make changes\nto the experiment's graph. For example, in the \"hello-world\" experiment, we can\nadd two \"executionOption\" variables: \"greeting\" and \"name\". The \"greeting\"\nvariable can take on the values \"hello\" or \"goodbye\", while the \"name\" variable\ncan be any string. With these changes, the updated \"hello-world\" experiment can\nnow print \"hello $name\" or \"goodbye $name\".\n\n</Tab>\n\n<Tab label=\"Syntax check errors during building\">\n\n<br />\n\nExperiments undergo syntax checking **before** going into the experiment\ncatalog:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/syntax-checks.mp4\"></Video>\n\n<br />\n\nWhen you click the \"Register experiment\" button, the runtime service will check\nthe experiment for errors. If any errors are found, the service will reject the\nexperiment and provide a list of errors that need to be fixed before it can be\nregistered again. This list of errors can also be accessed while editing\nworkflows and components, and you can re-run the validation logic to refresh the\nlist of errors.\n\n<br />\n\nWhen building graphs keep the following in mind:\n\n<br />\n\n- The parameters of the entrypoint workflow must either be input files\n  (indicated by names starting with `input.`) or have default values assigned to\n  them.\n- A step in a workflow can only use the parameters of that workflow or the\n  outputs of other steps within the same workflow.\n- Circular dependencies are not allowed.\n- Each component must have an executable associated with it.\n\n<br />\n\nYou can find more information regarding DSL 2.0 at the\n[Workflow Specification 2.0 page](/workflow-specification-dsl).\n\n</Tab>\n\n<Tab label=\"Consume output of component\">\n\nProvide the path to the file `results.dat` that the `simulation` component\nproduces to the `analysis` component:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/wire-components.mp4\"></Video>\n\n<br />\n\nThe runtime will prefix the path `/results.dat` with the path to the working\ndirectory of `simulation`. Then it will apply the `:ref` method to produce the\nabsolute path to the `results.dat` path. This is the value that will propagate\nto the `data` parameter of the `analysis` component.\n\n</Tab>\n\n<Tab label=\"Run a custom python script\">\n\nFirst containerize your python script and then use it in a component with the\n`kubernetes` backend:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/use-image.mp4\"></Video>\n\n<br />\n\nTo containerize your python application you can follow the\n`How to use this image` tutorial of the `python` image that the Docker community\nmaintains here: <https://hub.docker.com/_/python>. You may then upload the\ncontainer to a Container registry that you have access.\n\n<br />\n\nThe above example uses the image `quay.io/ibmvassiliad/sum:latest`. The image\nconsists of just 3 files:\n\n<br />\n\n<details><summary>sum.py</summary>\n\n```python\n#!/usr/bin/env python\n\nimport numpy as np\nimport sys\n\n# calculate the sum of N floats\nprint(np.sum([float(x) for x in sys.argv[1:]]))\n```\n\n</details>\n\n<details><summary>requirements.txt</summary>\n\n```\nnumpy==1.26.3\n```\n\n</details>\n\n<details><summary>Dockerfile</summary>\n\n```docker\nFROM python:3.11-slim\n\nRUN    apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Make sure that files under /app are part of $PATH\nENV PATH=$PATH:/app\nWORKDIR /app\n\nCOPY requirements.txt /app/requirements.txt\n\nRUN pip install -r requirements.txt\n\nCOPY sum.py /app/sum.py\n\n# Make the sum.py file executable\nchmod +x /app/sum.py\n```\n\n<br />\n\nTo build and push the container place all 3 files in the same directory and then\nin a terminal inside that directory execute:\n\n<br />\n\n```\npodman build --platform linux/amd64 -f Dockerfile -t <your registry>/sum:latest\npodman push <your registry>/sum:latest\n```\n\n</details>\n\n</Tab>\n\n</Tabs>\n\n## The Graph Library\n\nThe Graph Library is a collection of reusable Workflow recipes that the Build\nCanvas uses to populate the `Template Workspace` side-panel. New installations\nof ST4SD come with an empty library, and users can manage the library's contents\nvia the Build Canvas.\n\nThe Graph Library has several properties:\n\n- Each entry is a workflow, and if a user registers a Component template, the\n  library automatically wraps it in a single-step Workflow container.\n- Entries are identified by the name of their top-level workflow.\n- Entries are immutable, meaning that to modify one, you must first delete it\n  and then add a new graph with the same name.\n- Entries are syntactically valid, and if a user attempts to add a\n  Workflow/Component with errors, they will receive error messages listing the\n  problems. The user must fix the errors before adding the template to the Graph\n  Library.\n\nUsers can manage the Graph Library via the Template Workspace side-panel UI\nelement of the Build Canvas. To access the Build Canvas, click the\n`Build experiment` button in the top left corner of the ST4SD Registry UI\nWebPage or the `Edit experiment` button in the main page of one of your\nexperiments.\n\nThe Build Canvas starts by loading the Graph Library's contents and displaying\nthem in the Template Workspace side-panel UI element. Users can move templates\nbetween the Workspace and the Template Workspace, as well as between the\nTemplate Workspace and the Graph Library. Entries that are in the Template\nWorkspace but have not been stored in the Graph Library have a `(*)` suffix in\ntheir name.\n\nThe following videos demonstrate the core operations of the Graph Library:\n\n<Tabs>\n\n<!--\nVV: Bug is currently preventing this from working\n\n<Tab label=\"Glance at metadata of a Graph\">\n\nYou can see the name, description, and parameters of a Graph.\n\n<br/>\n\n<br/>\n\nTo see the full implementation details (i.e. nested steps etc) of the Graph simply drag and drop the template from the Template Workspace into the Workspace.\n\n</Tab>\n-->\n\n<Tab label=\"Use a Graph\">\n\nSimply drag and drop an entry of the Template Workspace into the Workspace:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/import-template.mp4\"></Video>\n\n<br />\n\nYou can see the full implementation details of the imported template after you\ndrag it from the Template Workspace into the Workspace. The template will then\nbehave as if you had just created it from scratch. For example you can modify as\npart of editing the graph of your experiment.\n\n</Tab>\n\n<Tab label=\"Persist a new Graph\">\n\nYou can store Graphs (Workflows and Components) in the Graph Library via the\nTemplate Workspace:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/persist-template.mp4\"></Video>\n\n<br />\n\nTo add a Workflow or Component template to the Graph Library, start by locating\nthe template in your Workspace. Double-click on the template to open a pop-up\nwindow, and then scroll to the bottom of the window to find the \"Add to Template\nWorkspace\" button. Clicking this button will create an entry for the template in\nthe Template Workspace. If the template is a Workflow, all of its nested\nchildren will be packaged into a single Graph and stored in the Graph Library.\n\n<br />\n\nWhen you click the `Share` button you will notice a few changes taking place at\nthe same time:\n\n<br />\n\n- the suffix `(*)` in the entry's name will go away as the template is stored in\n  the Graph Library\n- if the template was a Component (i.e. it had a white background) it will\n  automatically be wrapped inside a single-step Workflow (i.e. it will turn\n  green)\n\n</Tab>\n\n<Tab label=\"Delete a Graph\">\n\nDouble click on an entry in the Template Workspace and click the `Delete`\nbutton:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/delete-template.mp4\"></Video>\n\n<br />\n\nNote that this operation cannot be undone.\n\n</Tab>\n\n<Tab label=\"Modify a Graph\">\n\nHere is how to modify an existing Graph:\n\n<br />\n\n<Video src=\"../assets/videos/canvas/modify-template.mp4\"></Video>\n\n<br />\n\nNotice that we drop the Graph into the Workspace so that we can modify it. Then\nwe remove the entry from the Graph Library and edit the Graph (i.e. remove some\nparts of it). Finally, we just add it back into the Graph Library.\n\n</Tab>\n\n</Tabs>\n\n## Learn more\n\n<div className=\"expressive-content-list-group\">\n\n  <ExpressiveList \n    title=\"Mastering stp\"\n    background=\"true\"\n    pictogram={<Tools />}\n  >\n\nLearn how to master [our command line tool](/stp), `stp`, for creating and\nmanaging virtual experiment packages.\n\n  </ExpressiveList>\n\n  <ExpressiveList\n    title=\"Use the APIs\"\n    background=\"true\"\n    pictogram={<ServerOperatingSystems />}\n  >\n\n[Learn](/running-workflows-on-openshift) how to use the ST4SD python client API\nto run, query, and interact with virtual experiments. The APIs also offer access\nto a trove of experiment metadata and files such as logs and outputs. You can\nfind more examples in our Jupyter Notebooks\n[example repository](https://github.com/st4sd/st4sd-examples).\n\n  </ExpressiveList>\n  \n</div>\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/build-experiments-registry-ui.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}