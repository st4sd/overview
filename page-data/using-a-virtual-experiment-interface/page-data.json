{"componentChunkName":"component---src-pages-using-a-virtual-experiment-interface-md","path":"/using-a-virtual-experiment-interface/","result":{"pageContext":{"frontmatter":{"title":"Using a virtual experiment interface"},"relativePagePath":"/using-a-virtual-experiment-interface.md","titleType":"page","MdxNode":{"id":"83469f66-7802-53c1-b7a0-1b2532a7d407","children":[],"parent":"65fe3218-6805-5414-ae8e-3feacf30c78e","internal":{"content":"---\ntitle: Using a virtual experiment interface\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nLearn how to use a virtual experiment interface\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Checking if a Virtual Experiment has an interface</AnchorLink>\n  <AnchorLink>Accessing Interface Metadata</AnchorLink>\n  <AnchorLink>Getting the Properties</AnchorLink>\n  <AnchorLink>Handling errors</AnchorLink>\n</AnchorLinks>\n\nSome virtual experiments define interfaces which make it simpler for users to retrieve the input systems and measured properties from executions of that virtual experiment\n\n![image-20220915212832988](../assets/images/using-a-virtual-experiment-interface/image-20220915212832988.png)\n\n## Checking if a Virtual Experiment has an interface\n\n<AnchorLinks small>\n  <AnchorLink>Check the global registry</AnchorLink>\n  <AnchorLink>Check your local registry from a iPython notebook</AnchorLink>\n  <AnchorLink>Check the return value of api_rest_uid_status</AnchorLink>\n</AnchorLinks>\n\n<InlineNotification>\n\nCheck the [accompanying python notebook](https://github.com/st4sd/st4sd-examples/blob/main/notebooks/ST4SD%20Runtime%20API%20Property%20Retrieval.ipynb) for examples of all the features and code described here .\n\n</InlineNotification>\n\n### Check the global registry\n\nIf you got the virtual experiment package from the [global registry](https://registry.st4sd.res.ibm.com/), go to the global registry entry and check if it has a *Virtual Experiment Interface* section.\n\n### Check your local registry from a iPython notebook\n\nIf you know the id of the virtual experiment package execute the following - it will print `True` if the experiment has an `interface`.\n\n```python\npackage = api.api_experiment_get('toxicity-prediction-nb')\nif package['metadata']['registry']['interface']:\n    print(True)\n```\n\n### Check the return value of `api_rest_uid_status`\n\nIf you've launched a run of a virtual experiment you can check runs status document to see if it has an interface. For example:\n\n```python\nstatus = api.api_rest_uid_status(rest_uid)\nif status['experiment']['metadata']['registry']['interface']:\n\tprint(True)\n```\n\n<InlineNotification>\n\nThe `status['experiment']` and `package` above have the same schema. The difference is that `status['experiment']` contains additional information that ST4SD discovers after it executes the instructions in the `package`. For example, the input-ids that the virtual experiment processed (in `experiment.metadata.registry.interface.inputs`).\n\n</InlineNotification>\n\n## Accessing Interface Metadata\n\nWhen you run a virtual experiment with an `interface` there are two ways to retrieve it using the instances `rest_uid` - both return the same data.\n\nThe interface contains a description of the virtual experiment along with information on the inputs, the input spec and the names of the properties measured by the virtual experiment\n\n#### Using the st4sd-runtime-service API\n\nFrom the instances status `json` e.g.\n\n```python\nstatus = api.api_rest_uid_status(rest_uid)\nprint(status['experiment']['metadata']['registry']['interface'])\n```\n\n#### Using the st4sd-datastore API\n\nFrom the instances experiment document e.g.\n\n```python\nexp_doc = api.cdb_get_document_experiment_for_rest_uid(\n        rest_uid,\n        include_properties=['*'])\nprint(exp_doc['interface'])\n```\n\n<InlineNotification>\n\nThe method `api.cdb_get_document_experiment_for_rest_uid()` raises an exception if the virtual experiment has not produced properties.\n\n</InlineNotification>\n\n## Getting the Inputs\n\nThe list of input system ids are available in the `status` and `experiment` documents by default\n\n#### Using the st4sd-runtime-service API\n\nThe inputs are stored at `['experiment']['metadata']['registry']['interface']['inputs']` in the instances status `json`:\n\n```python\nprint(status['experiment']['metadata']['registry']['interface']['inputs'])\n```\n\n#### Using the st4sd-datastore API\n\nThe inputs are stored at `['interface']['inputs']` in the instances experiment document e.g.\n\n```python\nprint(exp_doc['interface']['inputs'])\n```\n\n## Getting the Properties\n\nThe property-table of a virtual experiment run can be obtained in a number of ways. In all cases the property-table is returned as a `dict` that can be used to instantiate a `pandas.DataFrame`.\n\n#### Using the st4sd-runtime-service API\n\nThere are two options\n\n##### Option One: With instance status\n\nAdd the `include_properties` keyword parameter to the `api_rest_uid_status` call. Its value should be one of\n\n- `['*']` if you want all the properties\n- A list of valid property-names (as defined in the interface) if you want a selection\n\nThe property table is then available at the key-path `status['experiment']['metadata']['registry']['interface']['propertyTable']` e.g.\n\n```python\nstatus = api.api_rest_uid_status(rest_uid, include_properties=['*'])\ninterface = status['experiment']['metadata']['registry']['interface']\ndf = pandas.DataFrame.from_dict(interface['propertyTable'])\ndf\n```\n\n##### Option Two: Direct REST-API call\n\nYou can make a direct request to get the full property table using the `instances/{restUID}/properties` route e.g.\n\n```python\nproperties_dict = api.api_request_get(f'instances/{restUID}/properties')\ndf = pd.DataFrame.from_dict(properties_dict)\ndf\n```\n\nYou can also select properties using `includeProperties` as a query parameter to the route e.g. `instances/{restUID}/properties?includeProperties=$VALUE`where $VALUE is a comma separated list of property names\n\n```python\nproperties_dict  = api.api_request_get(f'instances/{restUID}/properties?includeProperties=logp')\ndf = pd.DataFrame.from_dict(properties_dict )\ndf\n```\n\n#### Using the st4sd-datastore API\n\nAdd the `include_properties` keyword parameter to the `cdb_get_document_experiment_for_rest_uid` call. Its value should one of\n\n- `['*']` if you want all the properties\n- A list of valid property-names (as defined in the interface) if you want a selection\n\nThe property table is then available at the key-path `exp_doc['interface']['propertyTable']` e.g.\n\n```python\nexp_doc = api.cdb_get_document_experiment_for_rest_uid(\n        rest_uid,\n        include_properties=['*'])\ndf = pandas.DataFrame.from_dict(exp_doc['interface']['propertyTable'])\ndf\n```\n\n## Handling Errors\n\n<InlineNotification kind=\"warning\"> Asking for properties before the experiment instance has produced them returns a HTTP status code 400. Asking for properties which do not exist returns a HTTP status code 404. </InlineNotification>\n\nBelow is an example of handling errors from requests for properties:\n\n```python\nimport experiment.service.db.errors\nimport experiment.service.db\nimport pandas.DataFrame\n\n# After the virtual experiment instance terminates\ntry:\n    # Here we request all ('*') properties that the `rest_uid` instance measured\n    status = api.api_rest_uid_status(rest_uid, include_properties=['*'])\n    df: pandas.DataFrame = pandas.DataFrame.from_dict(\n        status['experiment']['interface']['propertyTable'])\nexcept experiment.errors.InvalidHttpRequest as e:\n    print(\"Got invalid HTTP status code\", e.response.status_code)\n    error_info = e.response.json()\n    if 'unknownRestUID' in error_info:\n        print(\"There is no such rest-uid\")\n    elif 'propertiesNotAvailableYet' in error_info:\n        print(\"Experiment has not produced properties yet - try again later\")\n    elif 'unknownProperties' in error_info):\n        print(f\"Experiment has no properties: {error_info['unknownProperties']}\")\n    else:\n        print(f\"Unknown HTTP problem {e}\")\n        raise\n```\n","type":"Mdx","contentDigest":"6e78bfb2806a82e9dc270bf9709aab6e","owner":"gatsby-plugin-mdx","counter":289},"frontmatter":{"title":"Using a virtual experiment interface"},"exports":{},"rawBody":"---\ntitle: Using a virtual experiment interface\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nLearn how to use a virtual experiment interface\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Checking if a Virtual Experiment has an interface</AnchorLink>\n  <AnchorLink>Accessing Interface Metadata</AnchorLink>\n  <AnchorLink>Getting the Properties</AnchorLink>\n  <AnchorLink>Handling errors</AnchorLink>\n</AnchorLinks>\n\nSome virtual experiments define interfaces which make it simpler for users to retrieve the input systems and measured properties from executions of that virtual experiment\n\n![image-20220915212832988](../assets/images/using-a-virtual-experiment-interface/image-20220915212832988.png)\n\n## Checking if a Virtual Experiment has an interface\n\n<AnchorLinks small>\n  <AnchorLink>Check the global registry</AnchorLink>\n  <AnchorLink>Check your local registry from a iPython notebook</AnchorLink>\n  <AnchorLink>Check the return value of api_rest_uid_status</AnchorLink>\n</AnchorLinks>\n\n<InlineNotification>\n\nCheck the [accompanying python notebook](https://github.com/st4sd/st4sd-examples/blob/main/notebooks/ST4SD%20Runtime%20API%20Property%20Retrieval.ipynb) for examples of all the features and code described here .\n\n</InlineNotification>\n\n### Check the global registry\n\nIf you got the virtual experiment package from the [global registry](https://registry.st4sd.res.ibm.com/), go to the global registry entry and check if it has a *Virtual Experiment Interface* section.\n\n### Check your local registry from a iPython notebook\n\nIf you know the id of the virtual experiment package execute the following - it will print `True` if the experiment has an `interface`.\n\n```python\npackage = api.api_experiment_get('toxicity-prediction-nb')\nif package['metadata']['registry']['interface']:\n    print(True)\n```\n\n### Check the return value of `api_rest_uid_status`\n\nIf you've launched a run of a virtual experiment you can check runs status document to see if it has an interface. For example:\n\n```python\nstatus = api.api_rest_uid_status(rest_uid)\nif status['experiment']['metadata']['registry']['interface']:\n\tprint(True)\n```\n\n<InlineNotification>\n\nThe `status['experiment']` and `package` above have the same schema. The difference is that `status['experiment']` contains additional information that ST4SD discovers after it executes the instructions in the `package`. For example, the input-ids that the virtual experiment processed (in `experiment.metadata.registry.interface.inputs`).\n\n</InlineNotification>\n\n## Accessing Interface Metadata\n\nWhen you run a virtual experiment with an `interface` there are two ways to retrieve it using the instances `rest_uid` - both return the same data.\n\nThe interface contains a description of the virtual experiment along with information on the inputs, the input spec and the names of the properties measured by the virtual experiment\n\n#### Using the st4sd-runtime-service API\n\nFrom the instances status `json` e.g.\n\n```python\nstatus = api.api_rest_uid_status(rest_uid)\nprint(status['experiment']['metadata']['registry']['interface'])\n```\n\n#### Using the st4sd-datastore API\n\nFrom the instances experiment document e.g.\n\n```python\nexp_doc = api.cdb_get_document_experiment_for_rest_uid(\n        rest_uid,\n        include_properties=['*'])\nprint(exp_doc['interface'])\n```\n\n<InlineNotification>\n\nThe method `api.cdb_get_document_experiment_for_rest_uid()` raises an exception if the virtual experiment has not produced properties.\n\n</InlineNotification>\n\n## Getting the Inputs\n\nThe list of input system ids are available in the `status` and `experiment` documents by default\n\n#### Using the st4sd-runtime-service API\n\nThe inputs are stored at `['experiment']['metadata']['registry']['interface']['inputs']` in the instances status `json`:\n\n```python\nprint(status['experiment']['metadata']['registry']['interface']['inputs'])\n```\n\n#### Using the st4sd-datastore API\n\nThe inputs are stored at `['interface']['inputs']` in the instances experiment document e.g.\n\n```python\nprint(exp_doc['interface']['inputs'])\n```\n\n## Getting the Properties\n\nThe property-table of a virtual experiment run can be obtained in a number of ways. In all cases the property-table is returned as a `dict` that can be used to instantiate a `pandas.DataFrame`.\n\n#### Using the st4sd-runtime-service API\n\nThere are two options\n\n##### Option One: With instance status\n\nAdd the `include_properties` keyword parameter to the `api_rest_uid_status` call. Its value should be one of\n\n- `['*']` if you want all the properties\n- A list of valid property-names (as defined in the interface) if you want a selection\n\nThe property table is then available at the key-path `status['experiment']['metadata']['registry']['interface']['propertyTable']` e.g.\n\n```python\nstatus = api.api_rest_uid_status(rest_uid, include_properties=['*'])\ninterface = status['experiment']['metadata']['registry']['interface']\ndf = pandas.DataFrame.from_dict(interface['propertyTable'])\ndf\n```\n\n##### Option Two: Direct REST-API call\n\nYou can make a direct request to get the full property table using the `instances/{restUID}/properties` route e.g.\n\n```python\nproperties_dict = api.api_request_get(f'instances/{restUID}/properties')\ndf = pd.DataFrame.from_dict(properties_dict)\ndf\n```\n\nYou can also select properties using `includeProperties` as a query parameter to the route e.g. `instances/{restUID}/properties?includeProperties=$VALUE`where $VALUE is a comma separated list of property names\n\n```python\nproperties_dict  = api.api_request_get(f'instances/{restUID}/properties?includeProperties=logp')\ndf = pd.DataFrame.from_dict(properties_dict )\ndf\n```\n\n#### Using the st4sd-datastore API\n\nAdd the `include_properties` keyword parameter to the `cdb_get_document_experiment_for_rest_uid` call. Its value should one of\n\n- `['*']` if you want all the properties\n- A list of valid property-names (as defined in the interface) if you want a selection\n\nThe property table is then available at the key-path `exp_doc['interface']['propertyTable']` e.g.\n\n```python\nexp_doc = api.cdb_get_document_experiment_for_rest_uid(\n        rest_uid,\n        include_properties=['*'])\ndf = pandas.DataFrame.from_dict(exp_doc['interface']['propertyTable'])\ndf\n```\n\n## Handling Errors\n\n<InlineNotification kind=\"warning\"> Asking for properties before the experiment instance has produced them returns a HTTP status code 400. Asking for properties which do not exist returns a HTTP status code 404. </InlineNotification>\n\nBelow is an example of handling errors from requests for properties:\n\n```python\nimport experiment.service.db.errors\nimport experiment.service.db\nimport pandas.DataFrame\n\n# After the virtual experiment instance terminates\ntry:\n    # Here we request all ('*') properties that the `rest_uid` instance measured\n    status = api.api_rest_uid_status(rest_uid, include_properties=['*'])\n    df: pandas.DataFrame = pandas.DataFrame.from_dict(\n        status['experiment']['interface']['propertyTable'])\nexcept experiment.errors.InvalidHttpRequest as e:\n    print(\"Got invalid HTTP status code\", e.response.status_code)\n    error_info = e.response.json()\n    if 'unknownRestUID' in error_info:\n        print(\"There is no such rest-uid\")\n    elif 'propertiesNotAvailableYet' in error_info:\n        print(\"Experiment has not produced properties yet - try again later\")\n    elif 'unknownProperties' in error_info):\n        print(f\"Experiment has no properties: {error_info['unknownProperties']}\")\n    else:\n        print(f\"Unknown HTTP problem {e}\")\n        raise\n```\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/using-a-virtual-experiment-interface.md"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}