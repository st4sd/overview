{"componentChunkName":"component---src-pages-runtime-service-mdx","path":"/runtime-service/","result":{"pageContext":{"frontmatter":{"title":"ST4SD Runtime Service API"},"relativePagePath":"/runtime-service.mdx","titleType":"page","MdxNode":{"id":"0f0973c7-e540-5a72-9549-774104017ec5","children":[],"parent":"038aeee2-61ef-5e66-a229-8fa3155339d6","internal":{"content":"---\ntitle: ST4SD Runtime Service API\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\nThe ST4SD runtime service ([swagger available here](/api-docs/openapi/st4sd-runtime-service/st4sd-runtime-service.openapi.html)) supports adding virtual experiment entries to a catalog and interacting with them, including:\n\n1. launching virtual experiment instances\n2. monitoring virtual experiment instances\n3. downloading outputs and measured properties of virtual experiment instances\n\nST4SD provides a python client for the ST4SD runtime service REST-API. The python client is currently part of `st4sd-runtime-core`. You can find instructions for installing the `local client` [here](/installation#set-up-local-client).\n\nThe FAQ below assumes:\n1. you have already installed a local client.\n\n## How do I connect to the ST4SD runtime service?\n\nFirst, you need to get the URL to the ST4SD runtime service endpoint. Ask the administrator of the ST4SD instance to provide this URL to you. They will also need to create an account for you on their ST4SD instance and configure RBAC so that your account can read `Service` objects in the namespace that ST4SD is installed in.\n\nIf the ST4SD instance is on IBM Cloud you will need to login to the OpenShift Web Console once so that IBM Cloud completes the setup of your account.\n\n### Connect to the ST4SD runtime service using an oauth-token\n\nYou need to obtain an `auth-token`. the python code below will open a URL in your browser. The web-page will ask you to login to ST4SD typically by delegating the authentication to the OpenShift server hosting ST4SD. If this is the very first time you login to this ST4SD URL you may be asked for your permission to allow ST4SD to know that you are logging in.\n\nAfter you log in you will be presented with a page that contains your `auth-token`, copy it and return to this document. By default, this token expires every 168 hours (1 week).\n\n```python\nimport webbrowser\n# enter the https:// ST4SD url below\nurl=\"https://${your ST4SD url}\"\n\nif url.endswith(\"/\"):\n    url = url[:-1]\n\nurl = '/'.join([url, \"authorisation/token\"])\n\nwebbrowser.open(url)\n```\n\nYou should now have an `auth-token`. Use it below to login to ST4SD.\n\n```python\nimport experiment.service.db\n\n# enter the https:// ST4SD url below\nurl=\"https://${your ST4SD url}\"\n\n# enter your auth-token below\nauth_token=\"put your authentication/token - do not share it with anyone\"\n\napi=experiment.service.db.ExperimentRestAPI(url, cc_auth_token=auth_token)\n```\n\nThe `ExperimentRestAPI` initializer validates the authentication token you provided and will raise an exception if it is invalid. If you do not get an Exception that means you can use `api` to interact with the `st4sd-runtime-service` and `st4sd-datastore` REST-APIs.\n\n### Connect to the ST4SD runtime service using an api-token\n\nYou can use the token that OpenShift associates with ServiceAccounts in the same namespace as your ST4SD to access the ST4SD microservices. You may want to use a API-key over an authorisation token if you need a way to authenticate to ST4SD that does not have an expiration date. For example if you build a MicroService that accesses the ST4SD microservices.\n\nGenerate an API-key using an OpenShift ServiceAccount:\n\n  1.  Create a new ServiceAccount on the same namespace as your ST4SD instance:\n        - ``` \n          oc project <NAMESPACE_THAT_HOSTS_ST4SD>\n        - ```\n          oc create serviceaccount <SERVICE_ACCOUNT_NAME> (e.g. oc create serviceaccount sa-auth-st4sd)\n          ```\n\n  2.  OpenShift creates 2 Secret objects for the ServiceAccount\n        - `<SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric>`:\n\n          This is an OpenShift token that you can use to impersonate the ServiceAccount and log on the OpenShift cluster.\n        - `<SERVICE_ACCOUNT_NAME>.dockercfg` or `<SERVICE_ACCOUNT_NAME>.dockerconfigjson`:\n        \n          That contains docker registry credentials and is used for pulling images from the private container registry of your OpenShift cluster - Openshift Image Registry.\n\n  3.  Bind the ServiceAccount `<SERVICE_ACCOUNT_NAME>` to the namespaced role `st4sd-authenticate-microservice` - we have configured oauth-proxy to authorize OpenShift users that can get services in the same namespace as the st4sd deployment. For that you can use the following snippet in a new `role_binding.yaml` file:\n        ```yaml \n        apiVersion: rbac.authorization.k8s.io/v1\n        kind: RoleBinding\n        metadata:\n          name: st4sd-custom-authenticated\n          namespace: <NAMESPACE_THAT_HOSTS_ST4SD>\n        roleRef:\n          apiGroup: rbac.authorization.k8s.io\n          kind: Role\n          name: st4sd-authenticate-microservices\n        subjects:\n        - kind: ServiceAccount\n          name: <SERVICE_ACCOUNT_NAME>\n          namespace: <NAMESPACE_THAT_HOSTS_ST4SD>\n        ```\n      Create the new RoleBinding object:\n        ```\n        oc create -f role_binding.yaml\n        ```\n\n  4.  Extract the token of of the `<SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric>` Secret. The secret may include the `ca.crt` and `service-ca.crt` fields that contain the CA certificate used for validating the OpenShift API server's TLS certificate. However the token we want to extract is under the `token` field. The token in the Secret is base64 encoded meaning that you need to decode to its raw value after you extract it.\n      - ```\n        oc get secret <SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric> -o jsonpath='{.data.token}' | base64 --decode | sed 's/$/\\n/'\n        ```\n      - Save the raw value of the token in a bearer_key variable in your python code.\n\n  5.  Use your API-key to access ST4SD:\n      ```python \n        import experiment.service.db\n\n        # enter the https:// ST4SD url below\n        url=\"https://${your ST4SD url}\"\n\n        bearer_key=\"<THE_SERVICEACCOUNT_KEY_YOU_EXTRACTED_ABOVE>\"\n        api=experiment.service.db.ExperimentRestAPI(url, cc_bearer_key=bearer_key)\n        ```\n\n\nBest practices:\n  - Store the API-key in a secure way, immediately revoke it if it leaks.\n    - You can revoke a API-key by deleting the Secret associated with that ServiceAccount and Openshift will auto-generate a new Secret to replace it.\n  - Use each API-key in just one place.\n    - For example, if you build 2 microservices and wish for both of them to have access to the ST4SD microservices you should repeat the above steps twice, once for each microservice.\n\n\n## How do I get the status of a virtual experiment instance?\n\nFirst, instantiate `experiment.service.db.ExperimentRestAPI` before you continue ay further. See [How do I connect to the ST4SD runtime service?](#how-do-i-connect-to-the-st4sd-runtime-service) for instructions.\n\n\nAll virtual experiment instances have a unique REST-API identifier. We use the term `rest_uid` to refer such identifiers.\n\n```python\n# put here the rest_uid of the virtual experiment instance\nrest_uid = \"toxicity-predictions-trol7a\"\n\nstatus = api.api_rest_uid_status(rest_uid)\n```\n\nThe variable `status` contains a plethora of information including metadata about the status of the virtual experiment instance and its outputs. Here, we will focus on the status.\n\nLet's try printing this information to get a better look:\n\n```python\nimport json\nprint(json.dumps(status['status'], indent=2))\n```\n\nHere is an example:\n\n```json\n{\n  \"experiment-state\": \"finished\",\n  \"total-progress\": 1.0,\n  \"exit-status\": \"Success\",\n  \"stages\": [\n    \"Toxicity-prediction\"\n  ],\n  \"current-stage\": \"Toxicity-prediction\",\n  \"stage-state\": \"finished\",\n  \"stage-progress\": 1.0,\n  \"error-description\": \"\",\n  \"meta\": { ... omitted ... }\n}\n```\n\nThe virtual experiment instance above reports that:\n\n1. The orchestrator observed that the virtual experiment instance terminated (`experiment-state` = `finished`)\n2. The virtual experiment instance has produced all its outputs (`total-progress` = `1.0`)\n3. The virtual experiment instance completed successfully (`exit-status` = `Success`)\n4. The experiment had 1 stage (`stages` = `[\"Toxicity-prediction\"]`)\n5. `Toxicity-prediction` was the most recently executed stage with the lowest stage index (`current-stage` = `Toxicity-prediction`).\n   1. All its tasks terminated and they were all successful (`stage-state` = `finished`)\n   2. It reached its max progress (`stage-progress` = `1.0`)\n6. The virtual experiment instance did not raise any errors (`error-description` = `\"\"`)\n\n<details><summary>Click to show the full specification of the status dictionary</summary>\n\n\n- `exit-status`: The status of the completed experiment. This receives its final value *after* `experiment-state` transitions to either `finished` or `failed`. Value is one of `[\"Success\", \"Failed\", \"Stopped\", \"\"]`. Value may be empty while Kubernetes initializes objects.\n- `experiment-state`: Indicates the state of the orchestrator that is executing the experiment tasks. **Not** to be confused with status of experiment (`exit-status`). For example, an experiment status can have `experiment-state=finished` with `exit-status=failed`. This means that the experiment completed with a failure. The value of `experiment-state` is one of `[\"unscheduled\", \"running\", \"finished\", \"failed\", \"unschedulable\", \"\"]`. Value may be empty while Kubernetes initializes objects.\n- `stage-state`: Indicates the state of the active stage in the experiment with the lowest stage index. Value is one of `[\"Initializing\", \"finished\", \"waiting_on_resource\",\"running\", \"component_shutdown\", \"failed\"]`\n- `error-description`: A string, which when printed is a human readable description that explains why `exit-status` is `Failed`.\n- `total-progress`: A number in [0.0, 1.0] indicating the progress of the experiment. Note that workflow developers may decide to control this value.\n- `stage-progress`: A number in [0.0, 1.0] indicating the progress of the active stage with the lowest stage index. Note that workflow developers may decide to control this value.\n- `stages`: A list of human-readable stage names\n- `current-stage`: UID of stage (e.g. `stage0`)\n- `meta`: This is a nested dictionary\n  - `arguments`: The command-line of the orchestrator\n  - `data`: The list of files that override data files\n  - `input`: The list of input files\n  - `pid`: The process ID of the st4sd orchestrator\n  - `platform`: The name of the platform that the virtual experiment instance executes\n  - `userVariables`: User provided variables, the schema is  `{'global':{name:value}, 'stages':{index:{name:value}}}`\n  - `variables`: Global and stage variables active in the `platform`-scope that the virtual experiment executes. The schema is `{'global':{name:value}, 'stages':{index:{name:value}}}`\n  - `hybridPlatform`: Name of hybrid-platform for communicating with LSF (can be None),\n  - `userMetadata`: A dictionary with `key(str): Any` value pairs that users can provide\n  - `instanceName`: The name of the directory containing the virtual experiment instance.\n  - `version`: The version of the st4sd orchestrator\n\n\n</details>","type":"Mdx","contentDigest":"905713d7101c68a5ac02a3d85b7e04b2","owner":"gatsby-plugin-mdx","counter":233},"frontmatter":{"title":"ST4SD Runtime Service API"},"exports":{},"rawBody":"---\ntitle: ST4SD Runtime Service API\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\nThe ST4SD runtime service ([swagger available here](/api-docs/openapi/st4sd-runtime-service/st4sd-runtime-service.openapi.html)) supports adding virtual experiment entries to a catalog and interacting with them, including:\n\n1. launching virtual experiment instances\n2. monitoring virtual experiment instances\n3. downloading outputs and measured properties of virtual experiment instances\n\nST4SD provides a python client for the ST4SD runtime service REST-API. The python client is currently part of `st4sd-runtime-core`. You can find instructions for installing the `local client` [here](/installation#set-up-local-client).\n\nThe FAQ below assumes:\n1. you have already installed a local client.\n\n## How do I connect to the ST4SD runtime service?\n\nFirst, you need to get the URL to the ST4SD runtime service endpoint. Ask the administrator of the ST4SD instance to provide this URL to you. They will also need to create an account for you on their ST4SD instance and configure RBAC so that your account can read `Service` objects in the namespace that ST4SD is installed in.\n\nIf the ST4SD instance is on IBM Cloud you will need to login to the OpenShift Web Console once so that IBM Cloud completes the setup of your account.\n\n### Connect to the ST4SD runtime service using an oauth-token\n\nYou need to obtain an `auth-token`. the python code below will open a URL in your browser. The web-page will ask you to login to ST4SD typically by delegating the authentication to the OpenShift server hosting ST4SD. If this is the very first time you login to this ST4SD URL you may be asked for your permission to allow ST4SD to know that you are logging in.\n\nAfter you log in you will be presented with a page that contains your `auth-token`, copy it and return to this document. By default, this token expires every 168 hours (1 week).\n\n```python\nimport webbrowser\n# enter the https:// ST4SD url below\nurl=\"https://${your ST4SD url}\"\n\nif url.endswith(\"/\"):\n    url = url[:-1]\n\nurl = '/'.join([url, \"authorisation/token\"])\n\nwebbrowser.open(url)\n```\n\nYou should now have an `auth-token`. Use it below to login to ST4SD.\n\n```python\nimport experiment.service.db\n\n# enter the https:// ST4SD url below\nurl=\"https://${your ST4SD url}\"\n\n# enter your auth-token below\nauth_token=\"put your authentication/token - do not share it with anyone\"\n\napi=experiment.service.db.ExperimentRestAPI(url, cc_auth_token=auth_token)\n```\n\nThe `ExperimentRestAPI` initializer validates the authentication token you provided and will raise an exception if it is invalid. If you do not get an Exception that means you can use `api` to interact with the `st4sd-runtime-service` and `st4sd-datastore` REST-APIs.\n\n### Connect to the ST4SD runtime service using an api-token\n\nYou can use the token that OpenShift associates with ServiceAccounts in the same namespace as your ST4SD to access the ST4SD microservices. You may want to use a API-key over an authorisation token if you need a way to authenticate to ST4SD that does not have an expiration date. For example if you build a MicroService that accesses the ST4SD microservices.\n\nGenerate an API-key using an OpenShift ServiceAccount:\n\n  1.  Create a new ServiceAccount on the same namespace as your ST4SD instance:\n        - ``` \n          oc project <NAMESPACE_THAT_HOSTS_ST4SD>\n        - ```\n          oc create serviceaccount <SERVICE_ACCOUNT_NAME> (e.g. oc create serviceaccount sa-auth-st4sd)\n          ```\n\n  2.  OpenShift creates 2 Secret objects for the ServiceAccount\n        - `<SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric>`:\n\n          This is an OpenShift token that you can use to impersonate the ServiceAccount and log on the OpenShift cluster.\n        - `<SERVICE_ACCOUNT_NAME>.dockercfg` or `<SERVICE_ACCOUNT_NAME>.dockerconfigjson`:\n        \n          That contains docker registry credentials and is used for pulling images from the private container registry of your OpenShift cluster - Openshift Image Registry.\n\n  3.  Bind the ServiceAccount `<SERVICE_ACCOUNT_NAME>` to the namespaced role `st4sd-authenticate-microservice` - we have configured oauth-proxy to authorize OpenShift users that can get services in the same namespace as the st4sd deployment. For that you can use the following snippet in a new `role_binding.yaml` file:\n        ```yaml \n        apiVersion: rbac.authorization.k8s.io/v1\n        kind: RoleBinding\n        metadata:\n          name: st4sd-custom-authenticated\n          namespace: <NAMESPACE_THAT_HOSTS_ST4SD>\n        roleRef:\n          apiGroup: rbac.authorization.k8s.io\n          kind: Role\n          name: st4sd-authenticate-microservices\n        subjects:\n        - kind: ServiceAccount\n          name: <SERVICE_ACCOUNT_NAME>\n          namespace: <NAMESPACE_THAT_HOSTS_ST4SD>\n        ```\n      Create the new RoleBinding object:\n        ```\n        oc create -f role_binding.yaml\n        ```\n\n  4.  Extract the token of of the `<SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric>` Secret. The secret may include the `ca.crt` and `service-ca.crt` fields that contain the CA certificate used for validating the OpenShift API server's TLS certificate. However the token we want to extract is under the `token` field. The token in the Secret is base64 encoded meaning that you need to decode to its raw value after you extract it.\n      - ```\n        oc get secret <SERVICE_ACCOUNT_NAME>-token-<random-alphanumeric> -o jsonpath='{.data.token}' | base64 --decode | sed 's/$/\\n/'\n        ```\n      - Save the raw value of the token in a bearer_key variable in your python code.\n\n  5.  Use your API-key to access ST4SD:\n      ```python \n        import experiment.service.db\n\n        # enter the https:// ST4SD url below\n        url=\"https://${your ST4SD url}\"\n\n        bearer_key=\"<THE_SERVICEACCOUNT_KEY_YOU_EXTRACTED_ABOVE>\"\n        api=experiment.service.db.ExperimentRestAPI(url, cc_bearer_key=bearer_key)\n        ```\n\n\nBest practices:\n  - Store the API-key in a secure way, immediately revoke it if it leaks.\n    - You can revoke a API-key by deleting the Secret associated with that ServiceAccount and Openshift will auto-generate a new Secret to replace it.\n  - Use each API-key in just one place.\n    - For example, if you build 2 microservices and wish for both of them to have access to the ST4SD microservices you should repeat the above steps twice, once for each microservice.\n\n\n## How do I get the status of a virtual experiment instance?\n\nFirst, instantiate `experiment.service.db.ExperimentRestAPI` before you continue ay further. See [How do I connect to the ST4SD runtime service?](#how-do-i-connect-to-the-st4sd-runtime-service) for instructions.\n\n\nAll virtual experiment instances have a unique REST-API identifier. We use the term `rest_uid` to refer such identifiers.\n\n```python\n# put here the rest_uid of the virtual experiment instance\nrest_uid = \"toxicity-predictions-trol7a\"\n\nstatus = api.api_rest_uid_status(rest_uid)\n```\n\nThe variable `status` contains a plethora of information including metadata about the status of the virtual experiment instance and its outputs. Here, we will focus on the status.\n\nLet's try printing this information to get a better look:\n\n```python\nimport json\nprint(json.dumps(status['status'], indent=2))\n```\n\nHere is an example:\n\n```json\n{\n  \"experiment-state\": \"finished\",\n  \"total-progress\": 1.0,\n  \"exit-status\": \"Success\",\n  \"stages\": [\n    \"Toxicity-prediction\"\n  ],\n  \"current-stage\": \"Toxicity-prediction\",\n  \"stage-state\": \"finished\",\n  \"stage-progress\": 1.0,\n  \"error-description\": \"\",\n  \"meta\": { ... omitted ... }\n}\n```\n\nThe virtual experiment instance above reports that:\n\n1. The orchestrator observed that the virtual experiment instance terminated (`experiment-state` = `finished`)\n2. The virtual experiment instance has produced all its outputs (`total-progress` = `1.0`)\n3. The virtual experiment instance completed successfully (`exit-status` = `Success`)\n4. The experiment had 1 stage (`stages` = `[\"Toxicity-prediction\"]`)\n5. `Toxicity-prediction` was the most recently executed stage with the lowest stage index (`current-stage` = `Toxicity-prediction`).\n   1. All its tasks terminated and they were all successful (`stage-state` = `finished`)\n   2. It reached its max progress (`stage-progress` = `1.0`)\n6. The virtual experiment instance did not raise any errors (`error-description` = `\"\"`)\n\n<details><summary>Click to show the full specification of the status dictionary</summary>\n\n\n- `exit-status`: The status of the completed experiment. This receives its final value *after* `experiment-state` transitions to either `finished` or `failed`. Value is one of `[\"Success\", \"Failed\", \"Stopped\", \"\"]`. Value may be empty while Kubernetes initializes objects.\n- `experiment-state`: Indicates the state of the orchestrator that is executing the experiment tasks. **Not** to be confused with status of experiment (`exit-status`). For example, an experiment status can have `experiment-state=finished` with `exit-status=failed`. This means that the experiment completed with a failure. The value of `experiment-state` is one of `[\"unscheduled\", \"running\", \"finished\", \"failed\", \"unschedulable\", \"\"]`. Value may be empty while Kubernetes initializes objects.\n- `stage-state`: Indicates the state of the active stage in the experiment with the lowest stage index. Value is one of `[\"Initializing\", \"finished\", \"waiting_on_resource\",\"running\", \"component_shutdown\", \"failed\"]`\n- `error-description`: A string, which when printed is a human readable description that explains why `exit-status` is `Failed`.\n- `total-progress`: A number in [0.0, 1.0] indicating the progress of the experiment. Note that workflow developers may decide to control this value.\n- `stage-progress`: A number in [0.0, 1.0] indicating the progress of the active stage with the lowest stage index. Note that workflow developers may decide to control this value.\n- `stages`: A list of human-readable stage names\n- `current-stage`: UID of stage (e.g. `stage0`)\n- `meta`: This is a nested dictionary\n  - `arguments`: The command-line of the orchestrator\n  - `data`: The list of files that override data files\n  - `input`: The list of input files\n  - `pid`: The process ID of the st4sd orchestrator\n  - `platform`: The name of the platform that the virtual experiment instance executes\n  - `userVariables`: User provided variables, the schema is  `{'global':{name:value}, 'stages':{index:{name:value}}}`\n  - `variables`: Global and stage variables active in the `platform`-scope that the virtual experiment executes. The schema is `{'global':{name:value}, 'stages':{index:{name:value}}}`\n  - `hybridPlatform`: Name of hybrid-platform for communicating with LSF (can be None),\n  - `userMetadata`: A dictionary with `key(str): Any` value pairs that users can provide\n  - `instanceName`: The name of the directory containing the virtual experiment instance.\n  - `version`: The version of the st4sd orchestrator\n\n\n</details>","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/runtime-service.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}