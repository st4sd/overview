{"componentChunkName":"component---src-pages-using-runtime-policies-mdx","path":"/using-runtime-policies/","result":{"pageContext":{"frontmatter":{"title":"Using runtime policies"},"relativePagePath":"/using-runtime-policies.mdx","titleType":"page","MdxNode":{"id":"1daf1b14-0eed-556d-aa33-add675cec86a","children":[],"parent":"bf2c353d-d020-52b0-b3d8-5c076bde4277","internal":{"content":"---\ntitle: Using runtime policies\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nUse this page to learn how to use the ST4SD runtime policies, for example to execute parameterised packages that contain surrogate models.\n\n</PageDescription>\n\n\n<AnchorLinks>\n  <AnchorLink>What is a runtime policy?</AnchorLink>\n  <AnchorLink>How to use a runtime policy?</AnchorLink>\n  <AnchorLink>Policy: prefer-surrogate</AnchorLink>\n  <AnchorLink>Policy: random-canary-surrogate</AnchorLink>\n</AnchorLinks>\n\n\n## What is a runtime policy?\n\nRuntime policies are algorithms which modify the default behaviour of ST4SD when its asked to run a parameterised package.\n\n\n## How to use a runtime policy?\n\nYou can use a runtime policy by configuring the `runtimePolicy` field of the `api_experiment_start()` [payload](/running-workflows-on-openshift#running-a-virtual-experiment).\n\n### Example\n\n```python\nfrom __future__ import typing\nimport json\ndef experiment_start(api: experiment.service.db.ExperimentRestAPI) -> str:\n    \"\"\"Start an experiment that uses the prefer-surrogate runtime policy\n\n    Arguments:\n      api: An instance of ExperimentRestAPI that has connected to your\n           private ST4SD registry\n\n    Notes:\n\n      The method expects that you have already created the band-gap-dft-gamess-us\n      parameterised package on your ST4SD registry and have synthesized (or imported)\n      a surrogate parameterised package that can substitute band-gap-dft-gamess-us.\n\n    Returns:\n        The UID of the resulting instance\n    \"\"\"\n\n    payload = {\n        \"inputs\": [\n            {\"filename\": \"input_smiles.csv\", \"content\": \"label,smiles\\nmy_molecule,CCC\"}\n        ],\n        \"runtimePolicy\": {\n          \"name\": \"prefer-surrogate\"\n        }\n    }\n\n    return api.api_experiment_start(\n        # the identifier of the parameterised virtual experiment package\n        \"band-gap-dft-gamess-us\",\n        payload)\n```\n\n## Policy: prefer-surrogate\n\nThe algorithm of the policy is:\n\n1. Find a suitable surrogate package of the requested parameterised package in the `api_experiment_start()` payload\n   1. Find parameterised packages that are the result of synthesizing a [transformation relationship](/using-graph-relationships#automatically-synthesize-new-parameterised-packages), AND\n   2. The [outputGraph](/using-graph-relationships#structure-of-a-relationship) of the associated `transformation relationship` matches a subGraph of the requested parameterised package.\n1. If there is a suitable surrogate parameterised package then start it and return the UID of the resulting run.\n1. Otherwise, start and return the UID of the requested parameterised packages.\n\nThe schema of the `runtimePolicy` field in the `api_experiment_start()` payload (in `YAML` format) is:\n\n```yaml\nruntimePolicy:\n  name: prefer-surrogate\n```\n\n## Policy: random-canary-surrogate\n\nIn a future version the runtime system will automatically invoke this runtime-policy. However, users can also switch it on manually for their virtual experiment runs.\n\nThe algorithm of the policy is:\n\n1. Toss a weighted coin which shows heads with probability `probabilitySurrogate`. If the coin shows heads when it lands then attempt to start 2 virtual experiment instances. The requested one AND a surrogate of the requested one (if available).\n   1. If coin shows `heads`: then attempt to start 2 virtual experiment instances. An instance using the requested parameterised package from the `api_experiment_start()` payload and a second one of a suitable surrogate parameterised package (if present). If there is no suitable surrogate parameterised package then start just one run of the requested parameterised package.\n   1. Use the same logic as the \"prefer-surrogate\" to identify one surrogate parameterised package.\n2. If the coin shows `tails` then start just the requested parameterised package\n3. Return the UID of the instance for the parameterised package.\n\n\nThe schema of the `runtimePolicy` field in the `api_experiment_start()` payload (in `YAML` format) is:\n\n\n```yaml\nruntimePolicy:\n  name: random-canary-surrogate\n  config: # optional\n    probabilitySurrogate: float from 0.0 to 1.0 (optional, default is 0.5)\n```\n\n","type":"Mdx","contentDigest":"bc5c4bce601c09f8da733f2f663e745b","owner":"gatsby-plugin-mdx","counter":287},"frontmatter":{"title":"Using runtime policies"},"exports":{},"rawBody":"---\ntitle: Using runtime policies\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nUse this page to learn how to use the ST4SD runtime policies, for example to execute parameterised packages that contain surrogate models.\n\n</PageDescription>\n\n\n<AnchorLinks>\n  <AnchorLink>What is a runtime policy?</AnchorLink>\n  <AnchorLink>How to use a runtime policy?</AnchorLink>\n  <AnchorLink>Policy: prefer-surrogate</AnchorLink>\n  <AnchorLink>Policy: random-canary-surrogate</AnchorLink>\n</AnchorLinks>\n\n\n## What is a runtime policy?\n\nRuntime policies are algorithms which modify the default behaviour of ST4SD when its asked to run a parameterised package.\n\n\n## How to use a runtime policy?\n\nYou can use a runtime policy by configuring the `runtimePolicy` field of the `api_experiment_start()` [payload](/running-workflows-on-openshift#running-a-virtual-experiment).\n\n### Example\n\n```python\nfrom __future__ import typing\nimport json\ndef experiment_start(api: experiment.service.db.ExperimentRestAPI) -> str:\n    \"\"\"Start an experiment that uses the prefer-surrogate runtime policy\n\n    Arguments:\n      api: An instance of ExperimentRestAPI that has connected to your\n           private ST4SD registry\n\n    Notes:\n\n      The method expects that you have already created the band-gap-dft-gamess-us\n      parameterised package on your ST4SD registry and have synthesized (or imported)\n      a surrogate parameterised package that can substitute band-gap-dft-gamess-us.\n\n    Returns:\n        The UID of the resulting instance\n    \"\"\"\n\n    payload = {\n        \"inputs\": [\n            {\"filename\": \"input_smiles.csv\", \"content\": \"label,smiles\\nmy_molecule,CCC\"}\n        ],\n        \"runtimePolicy\": {\n          \"name\": \"prefer-surrogate\"\n        }\n    }\n\n    return api.api_experiment_start(\n        # the identifier of the parameterised virtual experiment package\n        \"band-gap-dft-gamess-us\",\n        payload)\n```\n\n## Policy: prefer-surrogate\n\nThe algorithm of the policy is:\n\n1. Find a suitable surrogate package of the requested parameterised package in the `api_experiment_start()` payload\n   1. Find parameterised packages that are the result of synthesizing a [transformation relationship](/using-graph-relationships#automatically-synthesize-new-parameterised-packages), AND\n   2. The [outputGraph](/using-graph-relationships#structure-of-a-relationship) of the associated `transformation relationship` matches a subGraph of the requested parameterised package.\n1. If there is a suitable surrogate parameterised package then start it and return the UID of the resulting run.\n1. Otherwise, start and return the UID of the requested parameterised packages.\n\nThe schema of the `runtimePolicy` field in the `api_experiment_start()` payload (in `YAML` format) is:\n\n```yaml\nruntimePolicy:\n  name: prefer-surrogate\n```\n\n## Policy: random-canary-surrogate\n\nIn a future version the runtime system will automatically invoke this runtime-policy. However, users can also switch it on manually for their virtual experiment runs.\n\nThe algorithm of the policy is:\n\n1. Toss a weighted coin which shows heads with probability `probabilitySurrogate`. If the coin shows heads when it lands then attempt to start 2 virtual experiment instances. The requested one AND a surrogate of the requested one (if available).\n   1. If coin shows `heads`: then attempt to start 2 virtual experiment instances. An instance using the requested parameterised package from the `api_experiment_start()` payload and a second one of a suitable surrogate parameterised package (if present). If there is no suitable surrogate parameterised package then start just one run of the requested parameterised package.\n   1. Use the same logic as the \"prefer-surrogate\" to identify one surrogate parameterised package.\n2. If the coin shows `tails` then start just the requested parameterised package\n3. Return the UID of the instance for the parameterised package.\n\n\nThe schema of the `runtimePolicy` field in the `api_experiment_start()` payload (in `YAML` format) is:\n\n\n```yaml\nruntimePolicy:\n  name: random-canary-surrogate\n  config: # optional\n    probabilitySurrogate: float from 0.0 to 1.0 (optional, default is 0.5)\n```\n\n","fileAbsolutePath":"/Users/vassiliad/projects/st4sd/overview/src/pages/using-runtime-policies.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}