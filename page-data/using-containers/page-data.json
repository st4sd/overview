{"componentChunkName":"component---src-pages-using-containers-mdx","path":"/using-containers/","result":{"pageContext":{"frontmatter":{"title":"Using containers"},"relativePagePath":"/using-containers.mdx","titleType":"page","MdxNode":{"id":"a4da4c8b-78d1-53c4-87b7-2d0ea55f5206","children":[],"parent":"c9366e5d-ca96-5590-a6e8-747b7a496c34","internal":{"content":"---\ntitle: Using containers\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThis page will teach you how to write and run a workflow that uses application containers via a toy-example.\nWe advise users becoming familiar with the [component specification](/workflow-specification#component) before continuing.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Using containers locally</AnchorLink>\n  <AnchorLink>Using containers on Kubernetes</AnchorLink>\n  <AnchorLink>Using containers in multi-platform workflows</AnchorLink>\n</AnchorLinks>\n\n\n[**ST4SD core**](/st4sd-core-getting-started) supports using application containers to execute component tasks.\nApplication containers enable developers to have reproducible experiments that they can share with their community.\n\n\n## Using containers locally\n\nWorkflows can use `docker`-like runtimes (e.g. [docker](https://www.docker.com/), [podman](https://podman.io/))\nfor components which execute containerized applications.\n\nHere is a minimal example:\n\n```yaml\ncomponents:\n- name: hello\n  command:\n    executable: python3\n    arguments: -c \"print('Hello world!')\"\n    expandArguments: none\n  resourceManager:\n    config:\n      backend: docker\n    docker:\n      image: quay.io/fedora/python-311\n```\n\nCheck out the [component specification](/workflow-specification#component) for the full schema of component definition.\nBy default, ST4SD will use `docker` to execute components whose `resourceManager.config.backend` is set to `docker`.\nUse the `elaunch.py` parameter `--dockerExecutableOverride` to use a different `docker`-like backend.\nFor example, if the `$PATH` environment variable on your terminal is configured such that you can run the `podman`\nexecutable you can use it for your `docker` components by setting `--dockerExecutableOverride=podman`.\nIf the executable is not in `$PATH` you can still use it, you just need to use the full path to it when you set\nthe value of the `--dockerExecutableOverride` parameter.\n\n\nAdditionally, ST4SD mounts the instance directory in containers it executes.\nYou may need to configure your container runtime system to have read/write access to the instance directory (e.g. by enabling read/write access to the parent directory of the workflow instance).\n\n\n## Using containers on Kubernetes\n\nWorkflows which are running on a Kubernetes environment (e.g. [**ST4SD Cloud**](/st4sd-cloud-getting-started) on OpenShift)  can use the `kubernetes` backend to run containers.\n\nHere is a minimal example:\n\n```yaml\ncomponents:\n- name: hello\n  command:\n    executable: python3\n    arguments: -c \"print('Hello world')\"\n    expandArguments: none\n  resourceManager:\n    config:\n      backend: kubernetes\n    kubernetes:\n      image: quay.io/fedora/python-311\n```\n\nTo run this, deploy [**ST4SD Cloud**](/st4sd-cloud-getting-started) then use the [Python client API](/running-workflows-on-openshift/) to execute the experiment.\n\n## Using containers in multi-platform workflows\n\nOften, workflows have support for multiple execution environments such as Cloud (e.g. Kubernetes/OpenShift), HPC, or even personal devices like laptops.\nST4SD uses the concept of [platforms](/workflow-specification#platforms) to help workflow developers define how their workflows should execute under different execution environments.\nTypically developers use a [variable](/workflow-specification#variables) as the value of the field `resourceManager.config.backend`.\nAt execution time, a user configures the workflow to run using one of the available `platforms` by specifying the\n`--platform` parameter to `elaunch.py`.\nThe components then use the appropriate backend for the desired `platform`.\n\nFor example, here is a single workflow that uses a backend based on the platform that the user decides at execution time:\n\n ```yaml\nvariables:\n  # The \"default\" platform configures the component to use the \"docker\" backend\n  default:\n    global:\n      backend: docker\n      # All platforms inherit variables of \"default\" and may override their value\n      image: quay.io/fedora/python-311\n  # The k8s platform has the component use the \"kubernetes\" backend\n  k8s:\n    global:\n      backend: kubernetes\n\ncomponents:\n- name: hello\n  command:\n    executable: python3\n    arguments: -c \"print('Hello world')\"\n    expandArguments: none\n  resourceManager:\n    config:\n      backend: \"%(backend)s\"\n    docker:\n      image: \"%(image-python)s\"\n    kubernetes:\n      image: \"%(image-python)s\"\n```\n\nTo run this on a laptop, place the above in a file called `workflow.yaml`.\n\nNext, `pip install \"st4sd-runtime-core[develop]\"` and then execute:\n\n```bash\nelaunch.py -l40 --platform default workflow.yaml\n```\n","type":"Mdx","contentDigest":"25d2fc7cc421cd4236cb5cc7635af32e","owner":"gatsby-plugin-mdx","counter":272},"frontmatter":{"title":"Using containers"},"exports":{},"rawBody":"---\ntitle: Using containers\n---\n\n<!--\n\n  Copyright IBM Inc. All Rights Reserved.\n  SPDX-License-Identifier: Apache-2.0\n\n-->\n\n<PageDescription>\n\nThis page will teach you how to write and run a workflow that uses application containers via a toy-example.\nWe advise users becoming familiar with the [component specification](/workflow-specification#component) before continuing.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Using containers locally</AnchorLink>\n  <AnchorLink>Using containers on Kubernetes</AnchorLink>\n  <AnchorLink>Using containers in multi-platform workflows</AnchorLink>\n</AnchorLinks>\n\n\n[**ST4SD core**](/st4sd-core-getting-started) supports using application containers to execute component tasks.\nApplication containers enable developers to have reproducible experiments that they can share with their community.\n\n\n## Using containers locally\n\nWorkflows can use `docker`-like runtimes (e.g. [docker](https://www.docker.com/), [podman](https://podman.io/))\nfor components which execute containerized applications.\n\nHere is a minimal example:\n\n```yaml\ncomponents:\n- name: hello\n  command:\n    executable: python3\n    arguments: -c \"print('Hello world!')\"\n    expandArguments: none\n  resourceManager:\n    config:\n      backend: docker\n    docker:\n      image: quay.io/fedora/python-311\n```\n\nCheck out the [component specification](/workflow-specification#component) for the full schema of component definition.\nBy default, ST4SD will use `docker` to execute components whose `resourceManager.config.backend` is set to `docker`.\nUse the `elaunch.py` parameter `--dockerExecutableOverride` to use a different `docker`-like backend.\nFor example, if the `$PATH` environment variable on your terminal is configured such that you can run the `podman`\nexecutable you can use it for your `docker` components by setting `--dockerExecutableOverride=podman`.\nIf the executable is not in `$PATH` you can still use it, you just need to use the full path to it when you set\nthe value of the `--dockerExecutableOverride` parameter.\n\n\nAdditionally, ST4SD mounts the instance directory in containers it executes.\nYou may need to configure your container runtime system to have read/write access to the instance directory (e.g. by enabling read/write access to the parent directory of the workflow instance).\n\n\n## Using containers on Kubernetes\n\nWorkflows which are running on a Kubernetes environment (e.g. [**ST4SD Cloud**](/st4sd-cloud-getting-started) on OpenShift)  can use the `kubernetes` backend to run containers.\n\nHere is a minimal example:\n\n```yaml\ncomponents:\n- name: hello\n  command:\n    executable: python3\n    arguments: -c \"print('Hello world')\"\n    expandArguments: none\n  resourceManager:\n    config:\n      backend: kubernetes\n    kubernetes:\n      image: quay.io/fedora/python-311\n```\n\nTo run this, deploy [**ST4SD Cloud**](/st4sd-cloud-getting-started) then use the [Python client API](/running-workflows-on-openshift/) to execute the experiment.\n\n## Using containers in multi-platform workflows\n\nOften, workflows have support for multiple execution environments such as Cloud (e.g. Kubernetes/OpenShift), HPC, or even personal devices like laptops.\nST4SD uses the concept of [platforms](/workflow-specification#platforms) to help workflow developers define how their workflows should execute under different execution environments.\nTypically developers use a [variable](/workflow-specification#variables) as the value of the field `resourceManager.config.backend`.\nAt execution time, a user configures the workflow to run using one of the available `platforms` by specifying the\n`--platform` parameter to `elaunch.py`.\nThe components then use the appropriate backend for the desired `platform`.\n\nFor example, here is a single workflow that uses a backend based on the platform that the user decides at execution time:\n\n ```yaml\nvariables:\n  # The \"default\" platform configures the component to use the \"docker\" backend\n  default:\n    global:\n      backend: docker\n      # All platforms inherit variables of \"default\" and may override their value\n      image: quay.io/fedora/python-311\n  # The k8s platform has the component use the \"kubernetes\" backend\n  k8s:\n    global:\n      backend: kubernetes\n\ncomponents:\n- name: hello\n  command:\n    executable: python3\n    arguments: -c \"print('Hello world')\"\n    expandArguments: none\n  resourceManager:\n    config:\n      backend: \"%(backend)s\"\n    docker:\n      image: \"%(image-python)s\"\n    kubernetes:\n      image: \"%(image-python)s\"\n```\n\nTo run this on a laptop, place the above in a file called `workflow.yaml`.\n\nNext, `pip install \"st4sd-runtime-core[develop]\"` and then execute:\n\n```bash\nelaunch.py -l40 --platform default workflow.yaml\n```\n","fileAbsolutePath":"/home/travis/build/st4sd/overview/src/pages/using-containers.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}