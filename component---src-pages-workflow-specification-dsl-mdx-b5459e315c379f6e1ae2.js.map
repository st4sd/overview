{"version":3,"file":"component---src-pages-workflow-specification-dsl-mdx-b5459e315c379f6e1ae2.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/workflow-specification-dsl.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/travis/build/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this page to learn about the new Domain Specific Language (DSL 2.0) of ST4SD and how it works.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n    <AnchorLink mdxType=\"AnchorLink\">Namespace</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Entrypoint</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Workflow</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Component</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Assigning values to parameters</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">OutputReference</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Example</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Differences between DSL 2.0 and FlowIR</AnchorLink>\n    </AnchorLinks>\n    <p>{`DSL 2.0 is the new (and beta) way to define the computational graphs of ST4SD workflows.`}</p>\n    <h2>{`Namespace`}</h2>\n    <p>{`In DSL 2.0, a Computational Graph consists of Components which can be grouped under Workflow containers.\nIt also has an Entrypoint which points to the root node of the graph, which is an instance of a Component or Workflow template.`}</p>\n    <p>{`A Namespace is simply a container for the Component, Workflow, and Entrypoint definitions which represent the Computational Graph of one ST4SD workflow. `}</p>\n    <p>{`Below is an example of a Namespace containing a single component that prints the message `}<inlineCode parentName=\"p\">{`Hello world`}</inlineCode>{` to the terminal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: print\n  execute:\n  - target: \"<entry-instance>\"\n    args:\n      message: Hello world\ncomponents:\n- signature:\n    name: print\n    parameters:\n      name: message\n  command:\n    executable: echo\n    arguments: \"%(message)s\"\n`}</code></pre>\n    <h2>{`Entrypoint`}</h2>\n    <p>{`The Optional Entrypoint serves a single purpose. Describe how to execute root Template instance of the Computational Graph.`}</p>\n    <p>{`Its schema is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# This executes an instance of $template which is called \"<entry-instance>\"\nentry-instance: $template # name of a Component or Workflow template\nexecute: # an array with exactly 1 entry\n- target: <entry-instance> # which instance of a Template to execute.\n                           # In this scope there is only <entry-instance>\n  args:\n    $paramName: $value # one for each parameter of the template that\n                       # the \"target\" points to\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`entry-instance`}</inlineCode>{` field receives the name of a Template and creates an instance of it called `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{`.\nThe `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` field then describes how to “execute” the `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{` i.e. how to populate the arguments of the associated Template.`}</p>\n    <p>{`In `}<inlineCode parentName=\"p\">{`execute[].args`}</inlineCode>{` you:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`must`}</strong>{` provide values for any parameters in the child `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which do not have default values`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` override the value of the parameters in `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which have default values`}</li>\n    </ul>\n    <p>{`The Template instance that the entrypoint points to can have special parameters which are data references to paths that are external to the workflow.\nThese parameters must be called `}<inlineCode parentName=\"p\">{`input.$filename`}</inlineCode>{` and they must not have default values in the signature of the Template definition.\nThe entrypoint `}<strong parentName=\"p\">{`may`}</strong>{` not explicitly override the values of said parameters, the runtime system will auto-generate them.`}</p>\n    <p>{`Consider a scenario where the Template that the `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{` step points to has a parameter called `}<inlineCode parentName=\"p\">{`input.my-input.db`}</inlineCode>{`.\nThe runtime will post-process the `}<inlineCode parentName=\"p\">{`entrypoint.execute[0].args`}</inlineCode>{` dictionary to include the following key-value pair:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`input.my-input.db: \"input/my-input.db\"\n`}</code></pre>\n    <p>{`In `}<a parentName=\"p\" {...{\n        \"href\": \"#assigning-values-to-parameters\"\n      }}>{`Assigning values to parameters`}</a>{` we describe in more detail how to assign values to parameters of Template instances in general.`}</p>\n    <h2>{`Workflow`}</h2>\n    <p>{`A Workflow is a Template that describes how to `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` a number of Template instances called `}<inlineCode parentName=\"p\">{`steps`}</inlineCode>{`.\nIt has a `}<inlineCode parentName=\"p\">{`signature`}</inlineCode>{` that consists of a unique `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{` list.\nEach such step can consume the outputs of a sibling step, or the parameters of the parent Workflow.`}</p>\n    <p>{`The outputs of a workflow are its `}<inlineCode parentName=\"p\">{`steps`}</inlineCode>{`. The schema of Workflow is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`signature:\n  name: $Template # the name of this Workflow Template - must be unique\n  parameters:\n    - name: $paramName\n      # optional default value\n      default: $value # str, number, or dictionary of {str: str/number}\nsteps: # which steps to instantiate\n  $stepName: $Template # for example child: simulation-code\nexecute: # how to execute the steps - one for each entry of steps\n- target: <$stepName> # for example <child> or <child/grandchild>\n  args:\n    $paramName: $value # one for each parameter of the Template that\n                       # .target points to\n`}</code></pre>\n    <p>{`In `}<a parentName=\"p\" {...{\n        \"href\": \"#assigning-values-to-parameters\"\n      }}>{`Assigning values to parameters`}</a>{` we describe how to assign values to parameters of Template instances.`}</p>\n    <h2>{`Component`}</h2>\n    <p>{`A Component describes how to `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` a task.\nJust like a Workflow Template, it has a `}<inlineCode parentName=\"p\">{`signature`}</inlineCode>{` that consists of a `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{` list. `}</p>\n    <p>{`The outputs of a Component are the paths under its working directory. `}</p>\n    <p>{`The schema of a Component is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`signature:\n  name: $Template # the name of this Component Template - must be unique\n  parameters:\n    - name: $paramName\n      # optional default value\n      default: $value # str, number, or dictionary of {str: str/number}\n# All the FlowIR fields, except for stage, name, references, and override\ncommand:\n  executable: str\n  arguments: str\n  environment: (null, str)\nworkflowAttributes:\n  aggregate: bool\n  replicate: (int, null, str containing %(value-reference)s)\nresourceRequest:\n  numberProcesses: (int, str containing %(value-reference)s)\n  numberThreads: (int, str containing %(value-reference)s)\n  ranksPerNode: (int, str containing %(value-reference)s)\n  threadsPerCore: (int, str containing %(value-reference)s)\n  memory: (int (size in bytes), str containing %(value-reference)s or Mib/Kib bytes )\n  gpus: (int, str containing %(value-reference)s)\nresourceManager:\n  config:\n    backend: (name of backend e.g local, kubernetes, lsf, docker)\n    walltime: (in minutes, valid for \"kubernetes\" and \"lsf\" backends, float)\n  docker:\n    image: str\n    imagePullPolicy: (Optional) one of Always (default), Never, IfNotPresent\n  kubernetes:\n    image: str\n  lsf:\n    queue: str\nvariables:\n  <variable name:str>: <value: str, int, bool, float>\n`}</code></pre>\n    <p>{`The above fields are the same as those in the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification/#component\"\n      }}>{`Component section of the Workflow Specification in FlowIR`}</a>{`.`}</p>\n    <p>{`For more information, read our documentation on the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification#description-of-basic-flowir-component-fields\"\n      }}>{`basic FlowIR component fields`}</a>{`.`}</p>\n    <h2>{`Assigning values to parameters`}</h2>\n    <p>{`Both Component and Workflow templates are instantiated in the same way:\nby declaring them as a `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` and adding an entry to an `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` block which assigns values to the Template’s parameters.`}</p>\n    <p>{`The value of a parameter can be a number, string, or a key: value dictionary.\nThe body of a Template can reference its parameters like so `}<inlineCode parentName=\"p\">{`%(parameterName)s`}</inlineCode>{`.`}</p>\n    <p>{`When assigning a value to the parameters of a template via the `}<inlineCode parentName=\"p\">{`execute[].args`}</inlineCode>{` dictionary`}</p>\n    <p>{`In `}<inlineCode parentName=\"p\">{`execute[].args`}</inlineCode>{` you:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`must`}</strong>{` provide values for any parameters in the child `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which do not have default values`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` override the value of the parameters in `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which have default values`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use `}<inlineCode parentName=\"li\">{`OutputReferences`}</inlineCode>{` to indicate dependencies to steps (definition follows this bullet list)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use `}<inlineCode parentName=\"li\">{`%(parentParameter)s`}</inlineCode>{` to indicate a dependency to the value that the parent parameter has. In turn that can be a dependency to the output of a Template instance or an input file or it might just be a literal constant`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use a `}<inlineCode parentName=\"li\">{`$key: $value`}</inlineCode>{` dictionary to propagate a dictionary-type value. At the moment Template can only reference this kind of parameters to set the value of the `}<inlineCode parentName=\"li\">{`command.environment`}</inlineCode>{` field of Components`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use `}<inlineCode parentName=\"li\">{`%(input.$filename)s`}</inlineCode>{`to propagate an input file reference from a parent to a step. `}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Eventually a step must apply a `}<a parentName=\"li\" {...{\n              \"href\": \"/overview/workflow-specification/#datareference\"\n            }}>{`DataReferences`}</a>{` `}<inlineCode parentName=\"li\">{`:$method`}</inlineCode>{` to the parameter to indicates it wishes to consume the input file`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Wanna find out more? Check out our `}<a parentName=\"p\" {...{\n        \"href\": \"#example\"\n      }}>{`example`}</a>{`.`}</p>\n    <h3>{`OutputReference`}</h3>\n    <p>{`The format of an `}<inlineCode parentName=\"p\">{`OutputReference`}</inlineCode>{` is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<$stepId>/$optionalPath:$optionalMethod\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`$stepId`}</inlineCode>{` is a `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` separated array of `}<inlineCode parentName=\"p\">{`stepNames`}</inlineCode>{` starting from the scope of the current workflow. For example, the OutputReference `}<inlineCode parentName=\"p\">{`<one/child>/file.txt:ref`}</inlineCode>{` resolves to the absolute path of the file `}<inlineCode parentName=\"p\">{`file.txt`}</inlineCode>{` that the component `}<inlineCode parentName=\"p\">{`child`}</inlineCode>{` produces under the sibling step `}<inlineCode parentName=\"p\">{`one`}</inlineCode>{` which is an instance of a Workflow template. You can find more reference `}<inlineCode parentName=\"p\">{`methods`}</inlineCode>{` in our `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification/#datareference\"\n      }}>{`DataReferences`}</a>{` docs.`}</p>\n    <h1>{`Example`}</h1>\n    <p>{`Here is a simple example which uses one Workflow and one Component template two run 2 tasks.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`consume-input: prints the contents of an input file called `}<inlineCode parentName=\"li\">{`my-input.db`}</inlineCode></li>\n      <li parentName=\"ul\">{`consume-sibling: prints the text “my sibling said” followed by stdout of the sibling step `}<inlineCode parentName=\"li\">{`<consume-input>`}</inlineCode>{` `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: main\n  execute:\n  - target: <entry-instance>\nworkflows:\n- signature:\n    name: main\n    parameters:\n    # special variable with auto-populated value\n    - name: input.my-input.db\n  steps:\n    consume-input: echo\n    consume-sibling: echo\n  execute:\n    - target: <consume-input>\n      args:\n        # resolves to the contents of the file \n        # that input.my-input-d points to\n        message: \"%(input.my-input.db)s:output\"\n    - target: <consume-sibling>\n      args:\n        # resolves to the stdout of step consume-input\n        message: \"my sibling said <consume-input>:output\"\ncomponents:\n- signature:\n    name: echo\n    parameters:\n      - name: message\n  command:\n    executable: \"echo\"\n    arguments: \"%(message)s\"\n`}</code></pre>\n    <p>{`To try it out, store the above DSL in a file called `}<inlineCode parentName=\"p\">{`dsl-params.yaml`}</inlineCode>{` and run`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`pip install \"st4sd-runtime-core[develop]\"\n`}</code></pre>\n    <p>{`which installs the command-line-tool elaunch.py, followed by:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo \"hello world\" >my-input.db\nelaunch.py -i my-input.db --failSafeDelays=no -l40 dsl-params.yaml\n`}</code></pre>\n    <h2>{`Differences between DSL 2.0 and FlowIR`}</h2>\n    <p>{`There are some differences between DSL 2.0 and `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification\"\n      }}>{`FlowIR`}</a>{`.`}</p>\n    <p>{`In the current version (0.1.x) of DSL 2.0:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`we offer support for natural composition of Computational Graphs using Workflow and Component templates`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`signature`}</inlineCode>{` field replaces the `}<inlineCode parentName=\"li\">{`stage`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`references`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`override`}</inlineCode>{` fields of the component specification in FlowIR`}</li>\n      <li parentName=\"ul\">{`settings and inputs flow through parameters, we do not support global/stage environments or variables`}</li>\n      <li parentName=\"ul\">{`the fields of components can only contain `}<inlineCode parentName=\"li\">{`%(parameter)s`}</inlineCode>{` references, in the future we are adding support for references to the component `}<inlineCode parentName=\"li\">{`%(variable)s`}</inlineCode>{` too`}</li>\n      <li parentName=\"ul\">{`dependencies between components are defined by referencing the output of a producer component in one parameter of the consumer component - `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/workflow-specification/#datareference\"\n        }}>{`DataReferences`}</a>{` are reserved for referencing input files only`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`the equivalent of a DataReference for Template instances is an OutputReference`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`DSL 2.0 will eventually contain a superset of the FlowIR features. However, the current beta version of DSL 2.0 does not support:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`using variables in the body of a component template`}</li>\n      <li parentName=\"ul\">{`FlowIR platforms`}</li>\n      <li parentName=\"ul\">{`defining Key Outputs or Interface and Property extraction methods`}</li>\n      <li parentName=\"ul\">{`application-dependencies, data files, and manifests`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","isMDXComponent"],"sourceRoot":""}