"use strict";(self.webpackChunkst4sd_overview=self.webpackChunkst4sd_overview||[]).push([[5398],{3404:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return N}});var a=t(45),i=(t(6540),t(5680)),o=t(8027),r=t(1550),l=t(786);const s=["components"],p={},u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",n)},m=u("PageDescription"),g=u("AnchorLinks"),y=u("AnchorLink"),d=u("InlineNotification"),c=u("ExpressiveList"),h={_frontmatter:p},f=o.A;function N(e){let{components:n}=e,t=(0,a.A)(e,s);return(0,i.yg)(f,Object.assign({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)(m,{mdxType:"PageDescription"},(0,i.yg)("p",null,"Learn how to use ST4SD python client API to run, query and interact with virtual\nexperiments")),(0,i.yg)(g,{mdxType:"AnchorLinks"},(0,i.yg)(y,{mdxType:"AnchorLink"},"Connecting to ST4SD"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Adding a virtual experiment package"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Running a virtual experiment"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Getting the status of a virtual experiment instance"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Inspect the metadata of a virtual experiment instance"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Retrieving the outputs of a virtual experiment instance"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Stopping a virtual experiment instance")),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"For"),": Researchers"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Use When:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"You want to run and get output of virtual experiments"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Skill Requirements:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Some knowledge of python"))))),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"The code here can be tested using the\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/st4sd/st4sd-examples/blob/main/notebooks/ST4SD%20Runtime%20API%20Example.ipynb"},"ST4SD Runtime API Example notebook"))),(0,i.yg)("h2",null,"Overview"),(0,i.yg)("p",null,"We provide a python API for interacting with the ST4SD Services. The API enables\nyou to:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Launch virtual experiment instances"),(0,i.yg)("li",{parentName:"ol"},"Monitor virtual experiment instances"),(0,i.yg)("li",{parentName:"ol"},"Download outputs and measured properties of virtual experiment instances")),(0,i.yg)("h3",null,"Requirements"),(0,i.yg)("p",null,"The basic requirements are access to an OpenShift instance with ST4SD installed\n(see the ",(0,i.yg)("a",{parentName:"p",href:"/overview/installation"},"ST4SD Cloud Installation instructions")," for more\ninformation)."),(0,i.yg)("h4",null,"Getting data into and out-of virtual experiments: Cloud Object Store"),(0,i.yg)("p",null,"Additionally it can be useful to set up a Cloud Object Store bucket so you can\neasily get data into and out-of a virtual experiment."),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"/overview/UsingCloudObjectStore"},"See here")," for detailed instructions on how to do this\nwith IBM Cloud."),(0,i.yg)("h3",null,"Examples"),(0,i.yg)("p",null,"We maintain a ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/st4sd/st4sd-examples/"},"repository")," containing\na set of IPython notebooks that illustrate interacting with virtual experiments\nvia these two methods."),(0,i.yg)("p",null,"If you are using a\n",(0,i.yg)("a",{parentName:"p",href:"/overview/user-environments#local-jupyterserver-with-openshift-st4sd-instance"},"local JupyterServer environment"),"\nexecute this snippet to start-up the first notebook illustrating the RESTApi.\nMost of the examples discussed here are in this notebook"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"git clone https://github.com/st4sd/st4sd-examples.git\ncd st4sd-examples\njupyter-notebook notebooks/ST4SD\\ Runtime\\ API\\ Example.ipynb\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},(0,i.yg)("em",{parentName:"strong"},"Note"),": If you’ve installed ",(0,i.yg)("inlineCode",{parentName:"strong"},"st4sd-runtime-core")," into a virtualenv you will\nneed to activate it before executing above snippet")),(0,i.yg)("p",null,"After reading this page have a browse around the ",(0,i.yg)("inlineCode",{parentName:"p"},"st4sd-examples")," repository to\nsee what topics are covered in the other notebooks."),(0,i.yg)("h2",null,"Connecting to ST4SD"),(0,i.yg)("p",null,"To connect to an ST4SD instance you need to obtain an ",(0,i.yg)("inlineCode",{parentName:"p"},"auth-token")," or use an\n",(0,i.yg)("inlineCode",{parentName:"p"},"api-key"),"."),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"To learn what ",(0,i.yg)("inlineCode",{parentName:"p"},"auth-token"),"s and ",(0,i.yg)("inlineCode",{parentName:"p"},"api-key"),"s are in ST4SD and how to retrieve\nthem, read the\n",(0,i.yg)("a",{parentName:"p",href:"/overview/runtime-service#how-do-i-connect-to-the-st4sd-runtime-service"},"How do I connect to the ST4SD runtime service?"),"\nsection.")),(0,i.yg)("p",null,"The following code blocks show how to connect to an ST4SD instance."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Connect using an ",(0,i.yg)("inlineCode",{parentName:"li"},"auth-token"),":")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'  import experiment.service.db\n\n  # enter the https:// ST4SD url below\n  url="https://${your ST4SD url}"\n\n  # enter your auth-token below\n  auth_token="put your authentication/token - do not share it with anyone"\n\n  api=experiment.service.db.ExperimentRestAPI(url, cc_auth_token=auth_token)\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Connect using an ",(0,i.yg)("inlineCode",{parentName:"li"},"api-key"),":")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'  import experiment.service.db\n\n  # enter the https:// ST4SD url below\n  url="https://${your ST4SD url}"\n\n  # enter your auth-token below\n  bearer_key="put your api-key - do not share it with anyone"\n\n  api=experiment.service.db.ExperimentRestAPI(url, cc_bearer_key=bearer_key)\n')),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"ST4SD may print warnings to your python terminal e.g.\n",(0,i.yg)("inlineCode",{parentName:"p"},"Unable to import tinydb module - tinydb interface not available"),". These are not\nproblems. They are just informing you that select features are not supported on\nthe machine you are using. You can ignore them.")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"ExperimentRestAPI")," initializer validates the authentication token you\nprovided and will raise an exception if it is invalid. If you do not get an\nException that means you can use ",(0,i.yg)("inlineCode",{parentName:"p"},"api")," to interact with the\n",(0,i.yg)("inlineCode",{parentName:"p"},"st4sd-runtime-service")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"st4sd-datastore")," REST-APIs."),(0,i.yg)("p",null,"The above code needs to be executed once in a notebook session to get an ",(0,i.yg)("inlineCode",{parentName:"p"},"api"),"\ninstance to interact with. All the following examples assume this step has been\ndone."),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"ST4SD may print warnings to your python terminal e.g.\n",(0,i.yg)("inlineCode",{parentName:"p"},"Unable to import pythonlsf - limited LSF functionality will be available"),".\nThese are not problems. They are just informing you that select features are not\nsupported on the machine you are using. You can ignore them.")),(0,i.yg)("h2",null,"Adding a virtual experiment package"),(0,i.yg)("p",null,"Before you can run a virtual experiment you need to add it to your ST4SD\nregistry. You do this using the ",(0,i.yg)("inlineCode",{parentName:"p"},"api_experiment_push()")," method."),(0,i.yg)("p",null,"Technically you add a ",(0,i.yg)("em",{parentName:"p"},"parameterised")," virtual experiment package. A\nparameterised package can define particular, potentially complex values, for\nvariables in the virtual experiment to enable specific behaviour and make them\neasier to consume."),(0,i.yg)("p",null,"You can either type the definition of the\n",(0,i.yg)("a",{parentName:"p",href:"/overview/creating-a-parameterised-package"},"parameterised package")," manually or import it\nfrom another ST4SD registry\n",(0,i.yg)("a",{parentName:"p",href:"/overview/using-the-virtual-experiments-registry-ui"},"(e.g. the global ST4SD registry)"),".\nIn the second-case the registry UI provides with the exact ",(0,i.yg)("inlineCode",{parentName:"p"},"api_experiment_push"),"\ncall you need to execute."),(0,i.yg)("h2",null,"Running a virtual experiment"),(0,i.yg)("p",null,"The API call ",(0,i.yg)("inlineCode",{parentName:"p"},"api_experiment_start")," will start the virtual experiment that a\nparameterised virtual experiment package points to e.g.,"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"rest_uid = api.api_experiment_start(experimentIdentifier, payload=...)\n")),(0,i.yg)(d,{kind:"warning",mdxType:"InlineNotification"},(0,i.yg)("p",null,"The above example assumes ",(0,i.yg)("inlineCode",{parentName:"p"},"experimentIdentifier")," is a valid identifier of a\nparameterised package (meaning a PVEP name, with an optional\n",(0,i.yg)("a",{parentName:"p",href:"/overview/creating-a-parameterised-package#package-tags"},"tag or SHA identifier"),"). The\nvalue of ",(0,i.yg)("inlineCode",{parentName:"p"},"payload")," is a python dictionary that contains the run options to the\nexperiment.")),(0,i.yg)("p",null,"When you run a given virtual experiment you create a ",(0,i.yg)("em",{parentName:"p"},"virtual experiment\ninstance"),". Each instance is assigned a unique identifier which is returned when\nyou start the virtual experiment. We use the term ",(0,i.yg)("inlineCode",{parentName:"p"},"ExperimentRunID")," and\n",(0,i.yg)("inlineCode",{parentName:"p"},"rest_uid")," to refer to such identifiers."),(0,i.yg)("p",null,"The following sections explain how to fill the ",(0,i.yg)("inlineCode",{parentName:"p"},"payload"),"."),(0,i.yg)("h3",null,"Specifying experiment inputs"),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"inputs")," are files the experiment requires to run - they must be provided. Each\nexperiments documentation should explain what these files are."),(0,i.yg)("p",null,"The inputs are specified via the key ",(0,i.yg)("inlineCode",{parentName:"p"},"inputs")," in the payload. The value of this\nkey is a list that has one item, a dictionary, for each required input file\ne.g.,"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'payload = {\n    "inputs": [\n      {...},\n      ...\n    ]\n}\n')),(0,i.yg)("h4",null,"Providing inputs via s3 or Datashim dataset"),(0,i.yg)("p",null,"If your input file is in an s3 bucket or a Datashim dataset you use the ",(0,i.yg)("inlineCode",{parentName:"p"},"s3"),"\ntop-level key of the payload dictionary to provides details for accessing the\nbucket/dataset."),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Currently the filenames in the bucket must have the same names as expected by\nthe experiment"),(0,i.yg)("li",{parentName:"ul"},"Only one bucket/dataset can be specified in the payload i.e. all files you\nwant to pass an experiment from s3 must be in the same bucket"),(0,i.yg)("li",{parentName:"ul"},"The value of the ",(0,i.yg)("inlineCode",{parentName:"li"},"filename")," key should be the path inside the bucket to find\nthe file."))),(0,i.yg)("p",null,"Example: Using s3. Fill the ",(0,i.yg)("inlineCode",{parentName:"p"},"s3")," parameters with the required values. In this\ncase ",(0,i.yg)("inlineCode",{parentName:"p"},"input_filename.csv")," is in the top-level of the bucket."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'payload = {\n    "inputs": [{\n       "filename": "input_filename.csv"\n   }],\n  "s3": {\n      "accessKeyID": "$S3_AccessKeyID",\n      "secretAccessKey": "$S3_SecretAccessKey",\n      "bucket": "$S3_BUCKET_NAME",\n      "endpoint": "$S3_ENDPOINT",\n      "region": "$S3_Region"\n  }\n}\n')),(0,i.yg)("p",null,"Example: Using Datashim. In this case ",(0,i.yg)("inlineCode",{parentName:"p"},"input_filename.csv")," is at path\n",(0,i.yg)("inlineCode",{parentName:"p"},"data/input_filename.csv")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'\npayload = {\n    "inputs": [{\n       "filename": "data/input_filename.csv"\n   }],\n  "s3": {\n      "dataset": "$MYDATASET_NAME"\n  }\n}\n')),(0,i.yg)("h4",null,"Providing input content directly"),(0,i.yg)("p",null,"You can provide the content of input files directly in the payload using the\n",(0,i.yg)("inlineCode",{parentName:"p"},"content")," key"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'data = pd.read_csv(\'mydata.csv\')\npayload = {\n    "inputs": [{\n       "content": data.to_csv(index=False),\n       "filename": "input_filename.csv"\n   }]\n\n}\n')),(0,i.yg)("p",null,"This specifies that the content of the input file ",(0,i.yg)("inlineCode",{parentName:"p"},"input_filename.csv")," comes\nfrom the pandas DataFrame ",(0,i.yg)("inlineCode",{parentName:"p"},"data"),"."),(0,i.yg)("h3",null,"Specifying experiment data"),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"data")," refers to experiment configuration files that ",(0,i.yg)("strong",{parentName:"p"},"may")," be overridden by\nthe user."),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"data")," files can only be overridden if the parameterised package allows it. If\nthis is the case the files will be listed in the ",(0,i.yg)("inlineCode",{parentName:"p"},"executionOptions")," section in\nthe package description")),(0,i.yg)("p",null,"The data files are specified via the key ",(0,i.yg)("inlineCode",{parentName:"p"},"data")," in the payload. The value of\nthis key is a list that has one item, a dictionary, for each ",(0,i.yg)("inlineCode",{parentName:"p"},"data")," file you\nwant to override e.g.,"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'payload = {\n    "data": [\n      {...},\n      ...\n    ]\n}\n')),(0,i.yg)("p",null,"The format of the ",(0,i.yg)("inlineCode",{parentName:"p"},"data")," dictionary is identical to the ",(0,i.yg)("inlineCode",{parentName:"p"},"input")," dictionary."),(0,i.yg)("p",null,"Providing data files via S3/Datashim or providing their content directly follows\nsame process as described for inputs. See those sections for details."),(0,i.yg)("h3",null,"Specifying experiment variables"),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"variables")," are optional parameters controlling the behaviour of the experiment,\ne.g. number of cpus. They are experiment specific i.e. the same variables don’t\nexist in all experiment and variables controlling similar behaviour in two\nexperiments may not have the same name."),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"variables")," can only be overridden if the parameterised package allows it. If\nthis is the case the variables that can be set will be listed in the\n",(0,i.yg)("inlineCode",{parentName:"p"},"executionOptions")," section in the package description")),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"variables")," are set using the ",(0,i.yg)("inlineCode",{parentName:"p"},"variables")," key in the payload. The value of this\nkey is a dictionary of variable-name, variable-value pairs."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'payload = {\n    ... #Input/data options elided\n   "variables": {\n        "startIndex": 0,\n        "numberMolecules": 1,\n    }\n}\n')),(0,i.yg)("h3",null,"Payload Details"),(0,i.yg)("p",null,"The following is the complete structure of the ",(0,i.yg)("inlineCode",{parentName:"p"},"api_experiment_start()")," payload\n(in ",(0,i.yg)("inlineCode",{parentName:"p"},"YAML"),"). This includes some advanced options not discussed here."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'platform: name of platform (optional - see parameterisation notes)\ninputs: # optional (parameterised packages may have no inputs)\n  # see notes for interaction with Dataset/S3\n  - filename: str # required\n    content: str # optional - see S3 notes\ndata: # optional (parameterised packages may have no overiddable data files)\n  # see notes for interaction with Dataset/S3\n  - filename: str # required\n    content: str # optional - see S3 notes\nvolumes: # optional\n  - type:\n      # children fields are mutually exclusive - there must be exactly 1\n      persistentVolumeClaim: name of PVC object\n      dataset: name of Datashim dataset (see notes)\n      configMap: name of ConfigMap object\n      secret: name of Secret object\n    applicationDependency: name of appDep to bind to volume (optional)\n    # subPath applies only to pvc and dataset types\n    subPath: path inside volume to mount (optional, defaults to root of object)\nvariables: # optional - must adhere to parameterisation rules (see notes)\n  $name: $value\nadditionalOptions: # optional runtime arguments to elaunch.py\n  # they cannot override runtime arguments in the package parameterisation\n  - "--someArgument=value"\nenvironmentVariables: # optional\n  # creates environment variable in the pod that hosts elaunch.py\n  $name: $value\nmetadata: # optional\n  # custom metadata to insert into the "user-metadata" MongoDB document of run\n  $name: $value\ns3: # optional - used to read inputs/data with no "content" field\n  # dataset is mutually exclusive with any other sibling fields\n  dataset: name of Datashim dataset # optional\n  # can only provide fields below if dataset is unset\n  accessKeyID: S3 accessKeyID # optional\n  secretAccessKey: S3 secretAccessKey # optional\n  bucket: name of S3 bucket # optional\n  endpoint: the s3 endpoint # optional\n  region: the s3 region # optional\n# s3Store and datasetStoreURI are mutually exclusive and both optional\n# when one is provided, orchestrator uploads key-outputs to S3 after Run terminates\ns3Store: # optional\n  bucketPath:\n    path under bucket to store key-outputs files (default is\n    "workflow_instances/")\n  credentials: (same as s3 field)\ndatasetStoreURI: a "dataset/$bucketPath" URI (optional)\nruntimePolicy: # optional\n  name: the name of the runtime policy (required)\n  config: # optional\n    $key: Any # each runtime-policy has its own config-schema\n')),(0,i.yg)(d,{kind:"info",mdxType:"InlineNotification"},(0,i.yg)("p",null,"The schema above is in YAML format. If you are using python (i.e. an instance of\n",(0,i.yg)("inlineCode",{parentName:"p"},"experiment.service.db.ExperimentRestAPI"),") you should either create an\nequivalent python dictionary OR a python string that contains the yaml\ndefinition and then convert the string into a dictionary using\n",(0,i.yg)("inlineCode",{parentName:"p"},"yaml.loads(the_string)"),".")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Notes")),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"inputs")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"data")," file-specifications have an optional ",(0,i.yg)("inlineCode",{parentName:"li"},"content")," field. If\nthis field is missing then the contents of the files are expected to exist on\nS3 or in a Dataset. When ",(0,i.yg)("inlineCode",{parentName:"li"},"s3")," exists then the ",(0,i.yg)("inlineCode",{parentName:"li"},"filename")," field acts as the\npath inside the S3 bucket (or dataset) to use for reading the content of the\ninput/data file."),(0,i.yg)("li",{parentName:"ol"},"Dataset objects are only available if a cluster-admin has installed\n",(0,i.yg)("a",{parentName:"li",href:"https://github.com/datashim-io/datashim"},"Datashim")," on the cluster."),(0,i.yg)("li",{parentName:"ol"},"The fields ",(0,i.yg)("inlineCode",{parentName:"li"},"additionalOptions"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"data"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"inputs"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"platform"),", and ",(0,i.yg)("inlineCode",{parentName:"li"},"variables"),"\nmust adhere to parameterisation rules. See the\n",(0,i.yg)("a",{parentName:"li",href:"/overview/creating-a-parameterised-package#the-parameterisation-section"},"parameterised package documentation"),"\nfor more information.")),(0,i.yg)("h2",null,"Getting the status of a virtual experiment instance"),(0,i.yg)("p",null,"A common user-task is to check the status of a virtual experiment instance. For\nexample, to see if it is still running, or, if finished, if there was any error."),(0,i.yg)("p",null,"The API method ",(0,i.yg)("inlineCode",{parentName:"p"},"api_rest_uid_status")," returns the status of a given ",(0,i.yg)("inlineCode",{parentName:"p"},"rest_uid"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# put here the rest_uid of the virtual experiment instance\nrest_uid = "toxicity-predictions-trol7a"\n\nstatus = api.api_rest_uid_status(rest_uid)\n')),(0,i.yg)("p",null,"The variable ",(0,i.yg)("inlineCode",{parentName:"p"},"status")," contains various information about the virtual experiment\ninstance in addition to its status. The ",(0,i.yg)("em",{parentName:"p"},"execution")," status is under the ",(0,i.yg)("inlineCode",{parentName:"p"},"status"),"\nkey, you can inspect by executing:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import json\nprint(json.dumps(status['status'], indent=2))\n")),(0,i.yg)("p",null,"This will print a dictionary with the following keys (among others). The\npotential values of these keys is also described."),(0,i.yg)(d,{kind:"warning",mdxType:"InlineNotification"},(0,i.yg)("p",null,"Values are case sensitive")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"experiment-state"),": Indicates the execution state of the experiment instance"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Possible Values"),":",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"unscheduled"),": The experiment has not been scheduled to run yet. This\ncan be due to lack of resources, which may resolve, or be a critical issue\n(unable to pull ST4SD images, unable to mount volumes)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"unschedulable"),": Required pre-tasks for the experiment execution failed\ne.g. could not get workflow source, could not download s3 inputs."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Initialising"),": The experiment is starting up"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"running"),": The experiment has started running components"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"waiting_on_resource"),": A component in the active stage is waiting on\nresource"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"suspended"),": The workflow execution has been suspended"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"finished"),": The experiment is finished."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"failed"),": ",(0,i.yg)("strong",{parentName:"li"},"Only")," set if the experiment encountered an error during\ninitialisation (failed to run any steps of workflow after being started).\nFor example, fail to parse arguments, fail to create directory structures."))))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"exit-status"),": Indicates how a ",(0,i.yg)("strong",{parentName:"p"},"completed")," experiment exited"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"This receives its final value ",(0,i.yg)("em",{parentName:"li"},"after")," ",(0,i.yg)("inlineCode",{parentName:"li"},"experiment-state")," transitions to\neither ",(0,i.yg)("inlineCode",{parentName:"li"},"finished")," or, in rare circumstances, ",(0,i.yg)("inlineCode",{parentName:"li"},"failed"),' (see above). Value\nwill be “N/A” or "" (empty) before this.'),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Possible Values"),":",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Success"),": The experiment existed successfully"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Failed"),": The experiment failed (at least one component)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Stopped"),": The experiment was stopped/killed"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"N/A"),": The experiment is running and doesn’t have an exit-status yet"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},'""')," (Empty): The experiment has not started."))))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"error-description"),": If the ",(0,i.yg)("inlineCode",{parentName:"p"},"exit-status")," is ",(0,i.yg)("strong",{parentName:"p"},(0,i.yg)("em",{parentName:"strong"},"Failed"))," the value of this\nkey is a string which explains the failure cause.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"total-progress"),": A number in ","[0.0, 1.0]"," indicating the progress of the\nexperiment. Note that workflow developers may decide to control this value.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"current-stage"),": UID (e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"stage0"),") of the active stage with the lowest stage\nindex")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"stage-state"),": Indicates the state of the active stage (a stage with a\ncomponent running) with with the lowest stage index. Value is one of\n",(0,i.yg)("inlineCode",{parentName:"p"},'["Initialising", "finished", "waiting_on_resource","running", "component_shutdown", "failed"]'))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"stage-progress"),": A number in ","[0.0, 1.0]"," indicating the progress of the active\nstage with the lowest stage index. Note that workflow developers may decide to\ncontrol this value."))),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"An experiment status can have ",(0,i.yg)("inlineCode",{parentName:"p"},"experiment-state=finished")," with\n",(0,i.yg)("inlineCode",{parentName:"p"},"exit-status=failed"),". This means that the experiment completed with a failure.")),(0,i.yg)(d,{kind:"warning",mdxType:"InlineNotification"},(0,i.yg)("p",null,"In the case where there are no systems issues preventing an experiment to start\n",(0,i.yg)("inlineCode",{parentName:"p"},"experiment-state")," will always become ",(0,i.yg)("inlineCode",{parentName:"p"},"finished"),". ",(0,i.yg)("strong",{parentName:"p"},"You must check ",(0,i.yg)("inlineCode",{parentName:"strong"},"exit-status"),"\nfor errors."))),(0,i.yg)("p",null,"Here is an example of the status dictionary"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "experiment-state": "finished",\n  "total-progress": 1.0,\n  "exit-status": "Success",\n  "stages": [\n    "Toxicity-prediction"\n  ],\n  "current-stage": "Toxicity-prediction",\n  "stage-state": "finished",\n  "stage-progress": 1.0,\n  "error-description": "",\n  "meta": { ... omitted ... }\n}\n')),(0,i.yg)("p",null,"This reports that:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"The orchestrator observed that the virtual experiment instance terminated\n(",(0,i.yg)("inlineCode",{parentName:"li"},"experiment-state")," = ",(0,i.yg)("inlineCode",{parentName:"li"},"finished"),")"),(0,i.yg)("li",{parentName:"ol"},"The virtual experiment instance has produced all its outputs\n(",(0,i.yg)("inlineCode",{parentName:"li"},"total-progress")," = ",(0,i.yg)("inlineCode",{parentName:"li"},"1.0"),")"),(0,i.yg)("li",{parentName:"ol"},"The virtual experiment instance completed successfully (",(0,i.yg)("inlineCode",{parentName:"li"},"exit-status")," =\n",(0,i.yg)("inlineCode",{parentName:"li"},"Success"),")"),(0,i.yg)("li",{parentName:"ol"},"The experiment had 1 stage (",(0,i.yg)("inlineCode",{parentName:"li"},"stages")," = ",(0,i.yg)("inlineCode",{parentName:"li"},'["Toxicity-prediction"]'),")"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"Toxicity-prediction")," was the most recently executed stage with the lowest\nstage index (",(0,i.yg)("inlineCode",{parentName:"li"},"current-stage")," = ",(0,i.yg)("inlineCode",{parentName:"li"},"Toxicity-prediction"),").",(0,i.yg)("ol",{parentName:"li"},(0,i.yg)("li",{parentName:"ol"},"All its tasks terminated and they were all successful (",(0,i.yg)("inlineCode",{parentName:"li"},"stage-state")," =\n",(0,i.yg)("inlineCode",{parentName:"li"},"finished"),")"),(0,i.yg)("li",{parentName:"ol"},"It reached its max progress (",(0,i.yg)("inlineCode",{parentName:"li"},"stage-progress")," = ",(0,i.yg)("inlineCode",{parentName:"li"},"1.0"),")"))),(0,i.yg)("li",{parentName:"ol"},"The virtual experiment instance did not raise any errors (",(0,i.yg)("inlineCode",{parentName:"li"},"error-description"),"\n= ",(0,i.yg)("inlineCode",{parentName:"li"},'""'),")")),(0,i.yg)("h2",null,"Inspect the metadata of a virtual experiment instance"),(0,i.yg)("p",null,"In addition to the execution status information the ",(0,i.yg)("inlineCode",{parentName:"p"},"status")," key also contains\nmetadata on the experiment. To see it:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import json\nprint(json.dumps(status['status']['meta'], indent=2))\n")),(0,i.yg)("p",null,"This will print a dictionary with the following keys"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"arguments"),": The command-line of the orchestrator"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"data"),": The list of files that override data files"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"input"),": The list of input files"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"pid"),": The process ID of the st4sd orchestrator"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"platform"),": The name of the platform that the virtual experiment instance\nexecutes"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"userVariables"),": User provided variables, the schema is\n",(0,i.yg)("inlineCode",{parentName:"li"},"{'global':{name:value}, 'stages':{index:{name:value}}}")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"variables"),": Global and stage variables active in the ",(0,i.yg)("inlineCode",{parentName:"li"},"platform"),"-scope that\nthe virtual experiment executes. The schema is\n",(0,i.yg)("inlineCode",{parentName:"li"},"{'global':{name:value}, 'stages':{index:{name:value}}}")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"hybridPlatform"),": Name of hybrid-platform for communicating with LSF (can be\nNone),"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"userMetadata"),": A dictionary with ",(0,i.yg)("inlineCode",{parentName:"li"},"key(str): Any")," value pairs that users can\nprovide"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"instanceName"),": The name of the directory containing the virtual experiment\ninstance."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"version"),": The version of the st4sd orchestrator")),(0,i.yg)("h2",null,"Retrieving the outputs of a virtual experiment instance"),(0,i.yg)("p",null,"There are multiple ways to retrieve outputs of virtual experiments: via a\nvirtual experiment interface, key-outputs, the Datastore APIs, and by leveraging\nST4SD’s automated upload to S3."),(0,i.yg)(g,{small:!0,mdxType:"AnchorLinks"},(0,i.yg)(y,{mdxType:"AnchorLink"},"Retrieving the properties measured by an experiment"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Retrieving key-outputs"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Automatically uploading key-outputs to S3"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Listing outputs produced by virtual experiment components"),(0,i.yg)(y,{mdxType:"AnchorLink"},"Retrieving outputs via the ST4SD Datastore APIs")),(0,i.yg)("h3",null,"Retrieving the properties measured by an experiment"),(0,i.yg)("p",null,"Some virtual experiments define interfaces which make it simple for users to\nretrieve the input systems and measured properties from runs of that virtual\nexperiment."),(0,i.yg)("p",null,"Learn how to use virtual experiment interfaces ",(0,i.yg)("a",{parentName:"p",href:"/overview/using-a-virtual-experiment-interface/#getting-the-properties"},"here"),"."),(0,i.yg)("h3",null,"Retrieving key-outputs"),(0,i.yg)("p",null,"Key-Outputs are files produced by an experiment that the developer has flagged\nas being of special interest. Since the names of the file can be generic the\ndeveloper gives the key-output a descriptive label to better explain what it is."),(0,i.yg)("p",null,"Information on the key-outputs of a virtual experiment instance are stored in\nthe dictionary returned by ",(0,i.yg)("inlineCode",{parentName:"p"},"api_rest_uid_status")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"status = api.api_rest_uid_status(restUID)\npprint.pprint(instance_status['outputs'])\n")),(0,i.yg)("p",null,"An example of the output of this is"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"{'OptimisationResults': {'creationtime': '1669584128.077387',\n                         'description': '',\n                         'filename': 'energies.csv',\n                         'filepath': 'stages/stage1/ExtractEnergies/energies.csv',\n                         'final': 'yes',\n                         'production': 'yes',\n                         'type': '',\n                         'version': '1'}}\n")),(0,i.yg)("p",null,"This says the experiment has one key-output called ",(0,i.yg)("strong",{parentName:"p"},"OptimisationResults"),". This\nrefers to a file ",(0,i.yg)("inlineCode",{parentName:"p"},"energies.csv")," produced by the component ",(0,i.yg)("inlineCode",{parentName:"p"},"ExtractEnergies")," in\nthe given experiment."),(0,i.yg)("p",null,"To retrieve a key-output we can use ",(0,i.yg)("inlineCode",{parentName:"p"},"api_rest_uid_output"),". This method returns\nthe contents as bytes so it needs to be converted to a string. Note: replace\n",(0,i.yg)("inlineCode",{parentName:"p"},"OptimisationResults")," with the name of a key-output relevant to an experiment\nyou have run."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"filename, contents = api.api_rest_uid_output(rest_uid, 'OptimisationResults')\ncontents = contents.decode('utf-8', 'ignore')\n# read it into a pandas dataframe\ndf = pd.read_csv(io.StringIO(contents), sep=\",\", skipinitialspace=True)\n")),(0,i.yg)("h3",null,"Automatically uploading key-outputs to S3"),(0,i.yg)("p",null,"ST4SD supports automatically uploading key-outputs to S3. To enable this feature\ninclude the following values in the ",(0,i.yg)("inlineCode",{parentName:"p"},"payload")," you provide to\n",(0,i.yg)("inlineCode",{parentName:"p"},"api.api_experiment_start(experimentId, payload)")," (see\n",(0,i.yg)("a",{parentName:"p",href:"#running-a-virtual-experiment"},"Running a virtual experiment")," for more\ninformation):"),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"See the ",(0,i.yg)("a",{parentName:"p",href:"/overview/UsingCloudObjectStore"},"Cloud Object Store")," page for examples of\ngetting the values to populate the ",(0,i.yg)("inlineCode",{parentName:"p"},"credentials")," section.")),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"Note that ",(0,i.yg)("inlineCode",{parentName:"p"},"bucketPath")," is optional and it defaults to ",(0,i.yg)("inlineCode",{parentName:"p"},"/"),".")),(0,i.yg)("p",null,"The following example stores the key-outputs under ",(0,i.yg)("inlineCode",{parentName:"p"},"run1_output")," in an bucket\ncalled",(0,i.yg)("inlineCode",{parentName:"p"},"my-bucket")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'"s3Store":{\n      "credentials": {\n        "accessKeyID": "$S3_AccessKeyID",\n        "secretAccessKey": "$S3_SecretAccessKey",\n        "endpoint": "$S3_ENDPOINT",\n        "region": "$S3_Region",\n        "bucket": "my-bucket"\n      },\n      "bucketPath": "/run1_output/"\n    },\n')),(0,i.yg)("h3",null,"Listing outputs produced by virtual experiment components"),(0,i.yg)("p",null,"Before being able to retrieve the contents of the outputs files produced by the\nvirtual experiment components we need to know their paths. We start by\nretrieving the list of components that were part of our experiment through these\ntwo calls:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"metadata = api.cdb_get_user_metadata_document_for_rest_uid(rest_uid)\ncomponents = api.cdb_get_document_component(instance=metadata['instance'])\n")),(0,i.yg)("p",null,"The list of full paths of the output files produced by each components will then\nbe available using the ",(0,i.yg)("inlineCode",{parentName:"p"},"files")," key. We can access it for component ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," as such:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"component_0_files=components[0]['files']\n")),(0,i.yg)("h3",null,"Retrieving outputs via the ST4SD Datastore APIs"),(0,i.yg)("p",null,"To retrieve outputs we use the ",(0,i.yg)("inlineCode",{parentName:"p"},"cdb_get_file_from_instance_uri")," function."),(0,i.yg)(d,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"In this example we reference variables that we retrieved in the previous section\n(",(0,i.yg)("a",{parentName:"p",href:"#listing-outputs-produced-by-virtual-experiment-components"},"Listing outputs produced by virtual experiment components"),")")),(0,i.yg)("p",null,"This function, however, expects to receive relative paths instead of full ones.\nWe can change our list of paths with this list comprehension:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"component_0_files_relative = [component_file[component_file.index('/stages/'):] for component_file in component_0_files]\n")),(0,i.yg)("p",null,"Here we show how to retrieve the first file produced by component ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," from the\nprevious example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"data = api.cdb_get_file_from_instance_uri(document[0]['instance'], component_0_files_relative[0])\n")),(0,i.yg)("h2",null,"Stopping a virtual experiment instance"),(0,i.yg)("p",null,"The API call to cancel and delete a virtual experiment instance is\n",(0,i.yg)("inlineCode",{parentName:"p"},"api_rest_uid_delete"),". Use this if you want to stop a run for any reason."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"api_rest_uid_delete()")," method ",(0,i.yg)("em",{parentName:"p"},"does not affect the files")," that the run has\nalready generated. However, it does cause the run, and any components that are\nstill running, to terminate. It also deletes any Kubernetes objects that have\nbeen created by the run."),(0,i.yg)("p",null,"You may also use this to delete Kubernetes objects created for running this\nvirtual experiment instance. Note that deleting the virtual experiment instance\n",(0,i.yg)("strong",{parentName:"p"},"does not")," affect the files that it has produced."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# put here the rest_uid of the virtual experiment instance\nrest_uid = "toxicity-predictions-trol7a"\n\napi.api_rest_uid_delete(rest_uid)\n')),(0,i.yg)("h2",null,"Learn more"),(0,i.yg)("div",{className:"expressive-content-list-group"},(0,i.yg)(c,{title:"Mastering stp",background:"true",pictogram:(0,i.yg)(r.S0q,{mdxType:"Tools"}),mdxType:"ExpressiveList"},(0,i.yg)("p",null,"Learn how to master ",(0,i.yg)("a",{parentName:"p",href:"/overview/stp"},"our command line tool"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"stp"),", for creating and\nmanaging virtual experiment packages.")),(0,i.yg)(c,{title:"Take a look under the hood",background:"true",pictogram:(0,i.yg)(l.PxR,{mdxType:"ArtTools_01"}),mdxType:"ExpressiveList"},(0,i.yg)("p",null,"Want to learn more about how experiments are run? Learn about the\n",(0,i.yg)("a",{parentName:"p",href:"/overview/direct-run"},"command line tool")," that the API uses to launch experiments."))))}N.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-running-workflows-on-openshift-mdx-45804182f340a12f98ea.js.map