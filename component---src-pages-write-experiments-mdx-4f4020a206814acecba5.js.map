{"version":3,"file":"component---src-pages-write-experiments-mdx-4f4020a206814acecba5.js","mappings":"sQAQaA,EAAe,CAAC,EACvBC,EAAgBC,GAAQ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,IAAA,MAASH,EAClB,EACMI,EAAkBN,EAAc,mBAChCO,EAAqBP,EAAc,sBACnCQ,EAAcR,EAAc,eAC5BS,EAAaT,EAAc,cAC3BU,EAAc,CAClBX,gBAEIY,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIZ,GAAKc,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOZ,EAAAA,EAAAA,IAACM,EAASO,OAAAC,OAAA,GAAKT,EAAiBR,EAAK,CAAEa,WAAYA,EAAYK,QAAQ,eAQ5Ef,EAAAA,EAAAA,IAACC,EAAe,CAACc,QAAQ,oBACvBf,EAAAA,EAAAA,IAAA,SAAI,kKAAiKA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC/K,KAAQ,wBACN,QAAY,qCAEpBhB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,OAAOF,QAAQ,uBACtCf,EAAAA,EAAAA,IAAA,SAAI,4FAA2FA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACzG,KAAQ,oCACN,eAAmB,SAAQhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC3C,KAAQ,sBACN,mBAAuB,OAE/BhB,EAAAA,EAAAA,IAACG,EAAW,CAACY,QAAQ,gBACvBf,EAAAA,EAAAA,IAACI,EAAU,CAACW,QAAQ,cAAa,kDACjCf,EAAAA,EAAAA,IAACI,EAAU,CAACW,QAAQ,cAAa,sCACjCf,EAAAA,EAAAA,IAACI,EAAU,CAACW,QAAQ,cAAa,uDACjCf,EAAAA,EAAAA,IAACI,EAAU,CAACW,QAAQ,cAAa,qDAE/Bf,EAAAA,EAAAA,IAAA,UAAK,iBACLA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,MAAM,wBAAuBhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACrD,KAAQ,wBACN,2CAA+C,OAEvDhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,MAAM,+BAA8BhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC5D,KAAQ,iCACN,OAAW,uFAAsFhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACjH,KAAQ,4DACN,WAERhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,MAAM,mCAAkChB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,sBAAmC,mBACrHhB,EAAAA,EAAAA,IAAA,OAAKgB,WAAW,OAAKhB,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClC,UAAa,iBACX,qGAKRhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,MAAM,+CAA8ChB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC5E,KAAQ,2CACN,UAAc,MAAKhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACnC,KAAQ,uCACN,UAAc,SAAQhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACtC,KAAQ,gEACN,uBAGVhB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,UAAUF,QAAQ,uBACzCf,EAAAA,EAAAA,IAAA,SAAI,+EAA8EA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC5F,KAAQ,wBACN,uCAA2C,OAEnDhB,EAAAA,EAAAA,IAAA,UAAK,kDACLA,EAAAA,EAAAA,IAAA,SAAI,8GAA6GA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,sBAA+B,oJAAmJhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACrU,KAAQ,uDACN,sDAA0D,qBAChEhB,EAAAA,EAAAA,IAAA,SAAI,oCAAmCA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,oBAAiC,mIACpGhB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,OAAOF,QAAQ,uBACtCf,EAAAA,EAAAA,IAAA,SAAI,4DAA2DA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,oBAAiC,6DAE9HhB,EAAAA,EAAAA,IAAA,SAAI,yIAAwIA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,eAAwB,8CAA6ChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,kCACxRhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,mBACX,iDAGNhB,EAAAA,EAAAA,IAAA,SAAI,kKAAiKA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,eAA4B,0CAAyChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,sBAA+B,sHAC7ThB,EAAAA,EAAAA,IAAA,SAAI,0KACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,+RAQNhB,EAAAA,EAAAA,IAAA,SAAI,wDAAuDA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,SAAQhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,aAAsB,gEAChKhB,EAAAA,EAAAA,IAAA,SAAI,mQAAkQA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,YAAqB,8GAA6GhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,+BAA8BhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,UAAmB,sFACxhBhB,EAAAA,EAAAA,IAAA,SAAI,qHACJA,EAAAA,EAAAA,IAAA,SAAI,oCAAmCA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,oBAAiC,MACpGhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,qTAgBNhB,EAAAA,EAAAA,IAAA,SAAI,yBAAwBA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,6CAA4ChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,WAAoB,6DAA4DhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,iBAA0B,MACjRhB,EAAAA,EAAAA,IAAA,SAAI,qBAAoBA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,wEAAuEhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,WAAoB,UAAShB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,WAAoB,sDAAqDhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,WAAoB,0FAAyFhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,UAAmB,uCAAsChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,oBAAmBhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,WAAoB,+JACxmBhB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,UAAUF,QAAQ,uBACzCf,EAAAA,EAAAA,IAAA,SAAI,6EACJA,EAAAA,EAAAA,IAAA,SAAI,mCAAkCA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,oBAA6B,oBAC3FhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,+DAKvChB,EAAAA,EAAAA,IAAA,SAAI,mCAAkCA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,cAA2B,gDAA+ChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,oBAA6B,eACjMhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,6CAErChB,EAAAA,EAAAA,IAAA,SAAI,wCACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,gUAarChB,EAAAA,EAAAA,IAAA,SAAI,6CAA4CA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,wBAAiC,6CACzGhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,ulBAwBrChB,EAAAA,EAAAA,IAAA,SAAI,0EAAyEA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACvF,KAAQ,wCACN,mBAAuB,iFAC7BhB,EAAAA,EAAAA,IAAA,SAAI,2DAA0DA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,uBAAgC,0DACxHhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,qDAAkE,MAC5FhB,EAAAA,EAAAA,IAAA,UAAK,aACLA,EAAAA,EAAAA,IAAA,SAAI,gDAA+CA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,kBAA+B,cAAahB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,cAA2B,6BAA4BhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,8BAA2C,MACrRhB,EAAAA,EAAAA,IAAA,SAAI,qDAAoDA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,qBAAkC,MACtHhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,6CAGNhB,EAAAA,EAAAA,IAAA,SAAI,oBAAmBA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,wBAAqC,uEAAsEhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,qBAAkC,WAC5NhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,+FAGNhB,EAAAA,EAAAA,IAAA,SAAI,QAAOA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,UAAmB,YAAWhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,SAAsB,oDACrHhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,gEAA6E,MACvGhB,EAAAA,EAAAA,IAAA,UAAK,sCACLA,EAAAA,EAAAA,IAAA,SAAI,2QAA0QA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACxR,KAAQ,qDACN,4BAAgC,6DAA4DhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC5G,KAAQ,kDACN,YAAgB,4HAA2HhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,YAAqB,kGAAiGhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,YAAqB,oCAC5UhB,EAAAA,EAAAA,IAAA,SAAI,QAAOA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,YAAqB,oCACxDhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,iDAENhB,EAAAA,EAAAA,IAAA,SAAI,mEAAkEA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,4BAAqC,mCAAkChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,mBAA4B,aAAYhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,mBAA4B,oHACzRhB,EAAAA,EAAAA,IAAA,SAAI,4CAA2CA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,YAAqB,mDAAkDhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,wBAAqC,kBAAiBhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,2CAA0ChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,iBAA0B,yBAAwBhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,qBAAkC,iCACjchB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,gBAENhB,EAAAA,EAAAA,IAAA,SAAI,wDAAuDA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,kBAA2B,wDAAuDhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,qBAAoBhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,oBAA6B,WAC7RhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,sMAUNhB,EAAAA,EAAAA,IAAA,SAAI,8BAA6BA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,+BAAwC,UAAShB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,sBAA+B,UAAShB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,QAAiB,yHAAwHhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,iBAA0B,sJAC7XhB,EAAAA,EAAAA,IAAA,SAAI,iBAAgBA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,oBAA6B,qCACzEhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,4SAgBNhB,EAAAA,EAAAA,IAAA,SAAI,gDACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,8FAMrChB,EAAAA,EAAAA,IAAA,SAAI,wCACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,sEAErChB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,OAAOF,QAAQ,uBACtCf,EAAAA,EAAAA,IAAA,SAAI,QAAOA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,2BAAoC,qCAAoChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,iBAA0B,kJAE/JhB,EAAAA,EAAAA,IAAA,SAAI,qEACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,gUAarChB,EAAAA,EAAAA,IAAA,SAAI,6EACJA,EAAAA,EAAAA,IAAA,UAAK,aACLA,EAAAA,EAAAA,IAAA,SAAI,gBAAeA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,gDAA+ChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,2DAA0DhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,+CAA8ChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,sBAA+B,mBAClXhB,EAAAA,EAAAA,IAAA,SAAI,6BACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,mGAGrChB,EAAAA,EAAAA,IAAA,SAAI,6CACJA,EAAAA,EAAAA,IAAA,UAAK,uDACLA,EAAAA,EAAAA,IAAA,SAAI,0FACJA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,0EACrBhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,iDACrBhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,0CAEvBhB,EAAAA,EAAAA,IAAA,SAAI,WAAUA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACxB,KAAQ,sCACN,iBAAqB,oOAAmOhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,sDAC7ShB,EAAAA,EAAAA,IAAA,SAAI,8BAA6BA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,uBAAoC,8EACjGhB,EAAAA,EAAAA,IAAA,UAAK,yCACLA,EAAAA,EAAAA,IAAA,SAAI,SAAQA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,oBAA6B,6DAC/DhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,iGAAgGhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,mFAClMhB,EAAAA,EAAAA,IAAA,SAAI,yBAAwBA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,oBAAiC,eACzFhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,4BAErChB,EAAAA,EAAAA,IAAA,SAAI,+BAA8BA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,cAA2B,kCACzFhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,mBACX,4ZAkBNhB,EAAAA,EAAAA,IAAA,SAAI,kFACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,iFAKrChB,EAAAA,EAAAA,IAAA,SAAI,iCAAgCA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,MACrFhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,gFAErChB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,OAAOF,QAAQ,uBACtCf,EAAAA,EAAAA,IAAA,SAAI,2EAA0EA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,0BAAuC,uLAAsLhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,0BAAuC,OAE5YhB,EAAAA,EAAAA,IAAA,UAAK,8CACLA,EAAAA,EAAAA,IAAA,SAAI,oIAAmIA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACjJ,KAAQ,2BACN,cAAkB,oIACxBhB,EAAAA,EAAAA,IAAA,SAAI,kFACJA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OAAKhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,MAAM,4BAAqC,cAAahB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,cAA2B,kGACvJhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OAAKhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,MAAM,yBAAkC,cAAahB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,gBAA6B,gDACtJhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OAAKhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,MAAM,kBAA2B,cAAahB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,eAA4B,oDAEhJhB,EAAAA,EAAAA,IAAA,SAAI,iBACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,uMASNhB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,OAAOF,QAAQ,uBACtCf,EAAAA,EAAAA,IAAA,SAAI,sSAAqSA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,MAAKhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,UAAShB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,oBAA6B,6DAA4DhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,0EAAuF,uDAE3nBhB,EAAAA,EAAAA,IAAA,UAAK,wDACLA,EAAAA,EAAAA,IAAA,SAAI,oBAAmBA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,uBAAgC,YAAWhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,uBAAoC,4CAC1JhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,2iBAwBNhB,EAAAA,EAAAA,IAAA,SAAI,sDAAqDA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,oBAA6B,kCAAiChB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,WAAoB,KAAIhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,aAA0B,MACrPhB,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,QAAOhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,MAAM,sBAA+B,8CAA6ChB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,oBAC5JhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,0FACrBhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,8DAA6DhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,SAAsB,6CAGzIhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,WAAUhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,4BAAyC,gCAA+BhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,cAA2B,WAC1LhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,uNAGzBhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,mDACnBhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,QAAOhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,kCAA+C,QAAOhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,YAC5IhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,QAAOhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,gCAA6C,QAAOhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,uBAC1IhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,QAAOhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,0CAAuD,QAAOhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,iBAClJhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,OACbhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,+HAM/BhB,EAAAA,EAAAA,IAAA,SAAI,+BAA8BA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,uBAAoC,gBAClGhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,kNAMrChB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,OAAOF,QAAQ,uBACtCf,EAAAA,EAAAA,IAAA,SAAI,qKAAoKA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAClL,KAAQ,0CACN,wBAA4B,oBAAmBhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC/D,KAAQ,wCACN,qBAAyB,YAEjChB,EAAAA,EAAAA,IAAA,UAAK,aACLA,EAAAA,EAAAA,IAAA,SAAI,sCAAqCA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,cAAuB,MACxFhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,gDAErChB,EAAAA,EAAAA,IAAA,SAAI,0EAAyEA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACvF,KAAQ,wCACN,mBAAuB,iFAC7BhB,EAAAA,EAAAA,IAAA,SAAI,2DAA0DA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,uBAAgC,0DACxHhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,wDAAqE,MAC/FhB,EAAAA,EAAAA,IAAA,UAAK,oDACLA,EAAAA,EAAAA,IAAA,SAAI,maACJA,EAAAA,EAAAA,IAAA,SAAI,yCAAwCA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,sBAAmC,+BAA8BhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,OAAoB,SAAQhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,SAAsB,cACnPhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,8CAIrChB,EAAAA,EAAAA,IAAA,SAAI,oBAAmBA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,qBAAkC,0BACrFhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,6lCAqCrChB,EAAAA,EAAAA,IAAA,SAAI,sBAAqBA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IACnC,KAAQ,0FACN,4BAAgC,yBAAwBhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,OAAoB,gBAC9GhB,EAAAA,EAAAA,IAAA,SAAI,mBAAkBA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,iBAA0B,kCAAiChB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,8BAA2C,qBAAoBhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,sBAAmC,gBACnQhB,EAAAA,EAAAA,IAAA,SAAI,iBAAgBA,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAC9B,KAAQ,sFACN,uBAA2B,uBAAsBhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,mCAA4C,4IAA2IhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,gCAA+BhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,IAChW,KAAQ,qBACN,oBAAwB,MAC9BhB,EAAAA,EAAAA,IAAA,SAAI,qFAAoFA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,sBAA+B,WAC/IhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,s+FAwGNhB,EAAAA,EAAAA,IAAA,SAAI,wBAAuBA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,iBAA0B,WAC7EhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,MAClB,UAAa,iBACX,8BAGNhB,EAAAA,EAAAA,IAAA,SAAI,sDACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,+KASrChB,EAAAA,EAAAA,IAAA,UAAK,aACLA,EAAAA,EAAAA,IAAA,SAAI,gEACJA,EAAAA,EAAAA,IAAA,SAAI,gCAA+BA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,2BAA0BhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,sBAAmC,4CAC7KhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,ucAiBrChB,EAAAA,EAAAA,IAACE,EAAkB,CAACe,KAAK,OAAOF,QAAQ,uBACtCf,EAAAA,EAAAA,IAAA,SAAI,mGAAkGA,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,KAAK,SAAsB,0GAAyGhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,OAEpThB,EAAAA,EAAAA,IAAA,SAAI,wCACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,gMAUrChB,EAAAA,EAAAA,IAAA,SAAI,oDAAmDA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,gBAAyB,2BAA0BhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,iBAA0B,MACpLhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,wFAErChB,EAAAA,EAAAA,IAAA,SAAI,8CACJA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,gUAarChB,EAAAA,EAAAA,IAAA,SAAI,QAAOA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,0BAAmC,kDACtEhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,4wCA+CrChB,EAAAA,EAAAA,IAAA,SAAI,4BAA2BA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,0BAAmC,SAAQhB,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,8BAAuC,MACjKhB,EAAAA,EAAAA,IAAA,SAAI,+BAA8BA,EAAAA,EAAAA,IAAA,UAAQgB,WAAW,KAAK,2CAAoD,8CAC9GhB,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMgB,WAAW,OAAe,0KAGrChB,EAAAA,EAAAA,IAAA,UAAK,iBACLA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,6FAA4FhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,KAC3H,KAAQ,oCACN,UACNhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,qBAAoBhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,KACnD,KAAQ,0CACN,8BAAkC,yBACxChB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,+DAA8DhB,EAAAA,EAAAA,IAAA,cAAYgB,WAAW,MAAM,cAA2B,KAAIhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,KACzJ,KAAQ,wBACN,UACNhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,uEAAsEhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,KACrG,KAAQ,wCACN,UACNhB,EAAAA,EAAAA,IAAA,MAAIgB,WAAW,MAAM,mEAAkEhB,EAAAA,EAAAA,IAAA,KAAGgB,WAAW,KACjG,KAAQ,kCACN,UAIZ,CAEAR,EAAWU,gBAAiB,C","sources":["webpack://st4sd-overview/./src/pages/write-experiments.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/vassiliad/projects/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport { CarbonForIbmDotcom } from \"@carbon/pictograms-react\";\nimport { ArtTools_01 } from \"@carbon/pictograms-react\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This page assumes you are familiar with running experiments locally using the elaunch.py command line tool. If you need a refresher take a moment to read our `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/direct-run\"\n        }}>{`docs`}</a>{` before continuing any further.`}</p>\n    </PageDescription>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Here, we are using DSL 2.0, if you need to understand the previous syntax check out the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/workflow-specification\"\n        }}>{`FlowIR docs`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/tutorial\"\n        }}>{`FlowIR tutorial`}</a>{`.`}</p>\n    </InlineNotification>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Wrapping a python script for native execution</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Packaging your virtual experiment</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Using containers for shareable virtual experiments</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Your first Simulation experiment with GAMESS US</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Requirements`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`An understanding of `}<a parentName=\"p\" {...{\n            \"href\": \"/overview/direct-run\"\n          }}>{`how to run a virtual experiment locally`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A python 3.9+ interpreter, `}<a parentName=\"p\" {...{\n            \"href\": \"https://git-scm.com/downloads\"\n          }}>{`git`}</a>{` to clone code from Git servers, and an understanding of the syntax & structure of `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.redhat.com/en/topics/automation/what-is-yaml\"\n          }}>{`YAML`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A virtual environment with the `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` python module`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`python -m venv venv\n. ./venv/bin/activate\npip install \"st4sd-runtime-core[develop]>=2.5.1\"\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A Container Runtime system: install one of `}<a parentName=\"p\" {...{\n            \"href\": \"https://docs.docker.com/engine/install/\"\n          }}>{`docker`}</a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"https://podman.io/docs/installation\"\n          }}>{`podman`}</a>{`, or `}<a parentName=\"p\" {...{\n            \"href\": \"https://docs.rancherdesktop.io/getting-started/installation/\"\n          }}>{`Rancher Desktop`}</a></p>\n      </li>\n    </ul>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Before you continue any further, please make sure you are comfortable with `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/direct-run\"\n        }}>{`running virtual experiments locally`}</a>{`.`}</p>\n    </InlineNotification>\n    <h2>{`Wrapping a python script for native execution`}</h2>\n    <p>{`For your first virtual experiment, we will start with a Python script and use a virtual environment where `}<strong parentName=\"p\">{`st4sd-runtime-core`}</strong>{` is installed. This is a great way to quickly prototype virtual experiments without worrying about making them shareable with others. Check out `}<a parentName=\"p\" {...{\n        \"href\": \"#using-containers-for-shareable-virtual-experiments\"\n      }}>{`Using containers for shareable virtual experiments`}</a>{` for an example.`}</p>\n    <p>{`Begin by creating the directory `}<inlineCode parentName=\"p\">{`/tmp/hello-world`}</inlineCode>{` and navigating into it. We are going to store all files relevant to the virtual experiment of this example in this directory.`}</p>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Double check you have created a directory with the path `}<inlineCode parentName=\"p\">{`/tmp/hello-world`}</inlineCode>{` - this examples assumes you are using this exact path.`}</p>\n    </InlineNotification>\n    <p>{`A good way to become familiar with ST4SD is to wrap a simple python script in a virtual experiment and execute it. So, let’s build a `}<strong parentName=\"p\">{`hello world`}</strong>{` experiment using python. Create the file `}<strong parentName=\"p\">{`printer.py`}</strong>{` with the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import sys\nprint(\" \".join(sys.argv[1:]))\n`}</code></pre>\n    <p>{`This Python script is straightforward and does not rely on any external Python packages. If it did, you would need to install the required dependencies using `}<inlineCode parentName=\"p\">{`pip install`}</inlineCode>{` within the virtual environment where `}<strong parentName=\"p\">{`st4sd-runtime-core`}</strong>{` is installed. Since this script has no external dependencies, no additional Python modules need to be installed.`}</p>\n    <p>{`To create a ST4SD virtual experiment based on this script, we will define it using a YAML file. The structure of a ST4SD virtual experiment definition is as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n    # Instructions of the entry point to your experiment\ncomponents:\n    # Templates each of which execute a single task\nworkflows:\n    # Templates each of which pipelines of tasks which themselves\n    # are either instances of Workflows or Components templates\n`}</code></pre>\n    <p>{`Developers build experiments by connecting together `}<strong parentName=\"p\">{`Components`}</strong>{` and `}<strong parentName=\"p\">{`Workflows`}</strong>{` and identifying the entry point of the virtual experiment.`}</p>\n    <p>{`Components represent individual tasks, while Workflows represent pipelines (i.e. graphs) of Workflows and Components. The example provided demonstrates the execution of a single task. A helpful way to understand virtual experiments is to think of them as `}<strong parentName=\"p\">{`programs`}</strong>{` written in a programming language. In this analogy, Workflows and Components serve as functions, and the `}<strong parentName=\"p\">{`entrypoint`}</strong>{` is similar to declaring a `}<strong parentName=\"p\">{`main()`}</strong>{` function, specifying which function to execute and what arguments to pass to it.`}</p>\n    <p>{`Let’s put together a simple experiment consisting of a single step that prints a message to its standard output.`}</p>\n    <p>{`Place the following in the file `}<inlineCode parentName=\"p\">{`hello-world.yaml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: printer\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n\ncomponents:\n- signature:\n    name: printer\n    parameters:\n      - name: message\n  command:\n    executable: python\n    arguments: /tmp/hello-world/printer.py \"%(message)s\"\n`}</code></pre>\n    <p>{`In this example, the `}<strong parentName=\"p\">{`entrypoint`}</strong>{` to the experiment is an instance of the `}<strong parentName=\"p\">{`printer`}</strong>{` component which sets its message parameter to the value `}<strong parentName=\"p\">{`“Hello world”`}</strong>{`.`}</p>\n    <p>{`Moving on to the `}<strong parentName=\"p\">{`Components`}</strong>{` template section we observe that there is a single template called `}<strong parentName=\"p\">{`printer`}</strong>{`. The `}<strong parentName=\"p\">{`printer`}</strong>{` component template has a single parameter called `}<strong parentName=\"p\">{`message`}</strong>{`, which does not have a default value. Instances of this template, run the executable `}<strong parentName=\"p\">{`python`}</strong>{`, passing the absolute path to the `}<strong parentName=\"p\">{`printer.py`}</strong>{` script and the `}<strong parentName=\"p\">{`message`}</strong>{` value as arguments. In the next example we will show you a better way to package experiments alleviating the need to use absolute paths for your scripts.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`At this point, double check that you have used the exact names as above.`}</p>\n      <p>{`The expected file structure in `}<strong parentName=\"p\">{`/tmp/hello-world`}</strong>{` is as follows:`}</p>\n      <pre><code parentName=\"pre\" {...{}}>{`/tmp/hello-world\n├── hello-world.yaml\n└── printer.py\n`}</code></pre>\n    </InlineNotification>\n    <p>{`Let’s run the experiment using `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`. Run the following command from inside the `}<strong parentName=\"p\">{`/tmp/hello-world`}</strong>{` directory`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`elaunch.py --nostamp hello-world.yaml\n`}</code></pre>\n    <p>{`After a few seconds you should see:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2025-03-22 12:39:13.806401\ncost=0\ncreated-on=2025-03-22 12:39:07.382235\ncurrent-stage=stage0\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0']\ntotal-progress=1.0\nupdated=2025-03-22 12:39:17.417956\nupdated-on=2025-03-22 12:39:17.417956\n`}</code></pre>\n    <p>{`The experiment will create the directory `}<strong parentName=\"p\">{`hello-world.instance`}</strong>{` and store all files it generated in it.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`hello-world.instance\n├── conf\n│   ├── dsl.yaml               # your virtual experiment definition\n│   ├── flowir_instance.yaml   # ignore this file\n│   ├── flowir_package.yaml    # ignore this file\n│   └── manifest.yaml          # ignore this file\n├── elaunch.yaml\n├── input\n├── output\n│   ├── experiment.log\n│   ├── output.json\n│   ├── output.txt\n│   ├── status.txt\n│   └── status_details.json\n├── python\n├── stages\n│   └── stage0\n│       └── entry-instance\n│           ├── component_performance.csv\n│           ├── out.stderr\n│           └── out.stdout\n└── status.db\n\n`}</code></pre>\n    <p>{`If you encountered any issues during the process, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/direct-run#troubleshooting\"\n      }}>{`troubleshooting`}</a>{` section of the documentation for guidance on launching experiments locally.`}</p>\n    <p>{`Now that you have ran the experiment, take a moment to `}<strong parentName=\"p\">{`explore its outputs`}</strong>{`. You can find the output files following directory:\n`}<inlineCode parentName=\"p\">{`hello-world.instance/stages/stage0/entry-instance`}</inlineCode>{`.`}</p>\n    <h3>{`Exercise`}</h3>\n    <p>{`In ST4SD you can override the parameters of `}<inlineCode parentName=\"p\">{`entry-instance`}</inlineCode>{` that the `}<inlineCode parentName=\"p\">{`entrypoint`}</inlineCode>{` sets via the dictionary `}<inlineCode parentName=\"p\">{`entrypoint.execute[0].args`}</inlineCode>{`.`}</p>\n    <p>{`For example, place the following into a new file `}<inlineCode parentName=\"p\">{`my-variables.yaml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`global:\n  message: my custom message\n`}</code></pre>\n    <p>{`Then remove the `}<inlineCode parentName=\"p\">{`hello-world.instance`}</inlineCode>{` directory and run the experiment again but this time use load the `}<inlineCode parentName=\"p\">{`my-variables.yaml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rm -rf hello-world.instance\nelaunch.py --nostamp -a my-variables.yaml hello-world.yaml\n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`stdout`}</strong>{` of the `}<inlineCode parentName=\"p\">{`hello`}</inlineCode>{` component can be found in the following file:\n`}<inlineCode parentName=\"p\">{`hello-world.instance/stages/stage0/entry-instance/out.stdout`}</inlineCode>{`.`}</p>\n    <h2>{`Packaging your virtual experiment`}</h2>\n    <p>{`When automating simulation codes with custom bash scripts, you may have experienced difficulties with absolute paths when relocating your codes to different directories or execution environments. ST4SD provides a solution to this issue. It offers two methods for `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/packaging-workflows#packaging-workflows\"\n      }}>{`packaging multiple files`}</a>{`, with the most convenient approach being the use of the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/packaging-workflows#standard-project\"\n      }}>{`Standard`}</a>{` project structure. This structure consists of a virtual experiment definition, defined in a YAML file, and an optional `}<strong parentName=\"p\">{`manifest`}</strong>{` file, which specifies additional directories to be included with the virtual experiment. The `}<strong parentName=\"p\">{`manifest`}</strong>{` file has the following format:`}</p>\n    <p>{`The `}<strong parentName=\"p\">{`manifest`}</strong>{` file has the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`destinationDirectoryName: sourceDirectory\n`}</code></pre>\n    <p>{`This instructs the runtime system to create a directory called `}<strong parentName=\"p\">{`destinationDirectoryName`}</strong>{` using the files from the path `}<strong parentName=\"p\">{`sourceDirectory`}</strong>{`. If the `}<strong parentName=\"p\">{`sourceDirectory`}</strong>{` is not an absolute path then it is considered relative to the location of the experiment definition YAML file.`}</p>\n    <p>{`To convert the above example to use the `}<strong parentName=\"p\">{`Standard`}</strong>{` project structure, first create the directory `}<inlineCode parentName=\"p\">{`/tmp/hello-world/bin`}</inlineCode>{` and move the `}<strong parentName=\"p\">{`printer.py`}</strong>{` script into it. Next, create the file `}<strong parentName=\"p\">{`manifest.yaml`}</strong>{` under the directory `}<inlineCode parentName=\"p\">{`/tmp/hello-world/`}</inlineCode>{` with the following content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`bin: bin\n`}</code></pre>\n    <p>{`Now, let’s update the virtual definition to use the `}<strong parentName=\"p\">{`bin/printer.py`}</strong>{` file. You just need to change the last line in the `}<strong parentName=\"p\">{`components`}</strong>{` section of your `}<strong parentName=\"p\">{`hello-world.yaml`}</strong>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`...\ncomponents:\n- signature:\n    name: printer\n    parameters:\n      - name: message\n  command:\n    executable: python\n    arguments: /tmp/hello-world/printer.py \"%(message)s\" # HERE\n`}</code></pre>\n    <p>{`Replace the absolute path `}<strong parentName=\"p\">{`/tmp/hello-world/printer.py`}</strong>{` with `}<strong parentName=\"p\">{`bin/printer.py:ref`}</strong>{`. The `}<strong parentName=\"p\">{`:ref`}</strong>{` suffix indicates that this is a reference to a file, rather than a direct path. At runtime, the system will use the `}<strong parentName=\"p\">{`manifest.yaml`}</strong>{` file to resolve this reference, enabling you to include additional files with your virtual experiment definition in a flexible and portable way.`}</p>\n    <p>{`Your updated `}<strong parentName=\"p\">{`hello-world.yaml`}</strong>{` file should now look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: printer\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n\ncomponents:\n- signature:\n    name: printer\n    parameters:\n      - name: message\n  command:\n    executable: python\n    arguments: bin/printer.py:ref \"%(message)s\"\n`}</code></pre>\n    <p>{`You should end up with the following files:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/tmp/hello-world\n├── bin\n│   └── printer.py\n├── hello-world.yaml\n└── manifest.yaml\n`}</code></pre>\n    <p>{`Finally, let’s run this experiment:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`elaunch.py --nostamp --manifest manifest.yaml hello-world.yaml\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`The `}<strong parentName=\"p\">{`—manifest manifest.yaml`}</strong>{` argument is used to specify the `}<strong parentName=\"p\">{`manifest.yaml`}</strong>{` file as the source of manifest information for your virtual experiment, allowing the runtime to access the necessary configuration details.`}</p>\n    </InlineNotification>\n    <p>{`After a few seconds you should see this output on your terminal:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2025-03-31 10:19:45.271792\ncost=0\ncreated-on=2025-03-31 10:19:39.121168\ncurrent-stage=stage0\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0']\ntotal-progress=1.0\nupdated=2025-03-31 10:19:49.192388\nupdated-on=2025-03-31 10:19:49.192388\n`}</code></pre>\n    <p>{`Congratulations! You have successfully packaged your virtual experiment!`}</p>\n    <h3>{`Exercise`}</h3>\n    <p>{`Modify your `}<strong parentName=\"p\">{`printer.py`}</strong>{` script to import a Python package, such as `}<strong parentName=\"p\">{`transformers`}</strong>{`. To ensure successful execution, make sure to install `}<strong parentName=\"p\">{`transformers`}</strong>{` within the same virtual environment where `}<strong parentName=\"p\">{`st4sd-runtime-core`}</strong>{` is installed.`}</p>\n    <p>{`Next, run it elaunch.py:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`rm -rf hello-world.instance\nelaunch.py --nostamp --manifest manifest.yaml hello-world.yaml\n`}</code></pre>\n    <p>{`Double check that it runs to completion.`}</p>\n    <h2>{`Using containers for shareable virtual experiments`}</h2>\n    <p>{`To make experiments truly shareable, they must include the following key information:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`All executables that they run, along with their software dependencies`}</li>\n      <li parentName=\"ol\">{`How to map the executables to specific steps`}</li>\n      <li parentName=\"ol\">{`How to connect inputs to these steps`}</li>\n    </ol>\n    <p>{`In the `}<a parentName=\"p\" {...{\n        \"href\": \"#packaging-your-virtual-experiment\"\n      }}>{`above example`}</a>{` we wrapped a single-step executable into a virtual experiment, covering the second and third requirements for a single-step experiment. In this example, we will utilize a container to share the software dependencies of the `}<strong parentName=\"p\">{`printer.py`}</strong>{` python script, addressing the first requirement.`}</p>\n    <p>{`Create a new directory in `}<inlineCode parentName=\"p\">{`/tmp/docker-package`}</inlineCode>{` and cd into it, we will use it for the files of this virtual experiment.`}</p>\n    <h3>{`Containerize your python application`}</h3>\n    <p>{`In a `}<strong parentName=\"p\">{`requirements.txt`}</strong>{` file place the python dependencies of your script.\nThe `}<strong parentName=\"p\">{`printer.py`}</strong>{` python script that we use here does not have any python requirements but we’ll just install `}<strong parentName=\"p\">{`transformers`}</strong>{` in the container we use to execute the script just to demonstrate the method:`}</p>\n    <p>{`The contents of the  `}<inlineCode parentName=\"p\">{`requirements.txt`}</inlineCode>{` file are:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`transformers==4.50.3\n`}</code></pre>\n    <p>{`Next, create a file called `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` with the following contexts:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-docker\"\n      }}>{`FROM python:3.11-slim\n\nRUN    apt-get update \\\\\n    && apt-get upgrade -y \\\\\n    && apt-get clean -y \\\\\n    && rm -rf /var/lib/apt/lists/*\n\n# Make sure that files under /app are part of $PATH\nENV PATH=/app:$PATH\nWORKDIR /app\n\nCOPY requirements.txt /app/requirements.txt\n\nRUN pip install -r requirements.txt\n\n# Place the printer.py file inside the container\nCOPY printer.py /app/printer.py\n`}</code></pre>\n    <p>{`Make sure you have the following files in the directory you are currently in:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/tmp/docker-package\n├── Dockerfile\n├── printer.py\n└── requirements.txt\n`}</code></pre>\n    <p>{`To build your container, run `}<strong parentName=\"p\">{`docker build`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker build --platform linux/amd64 -f Dockerfile -t my-printer:latest .\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`We recommend building images for the x86-64 CPU architecture using the `}<inlineCode parentName=\"p\">{`--platform linux/amd64`}</inlineCode>{` flag to ease the transition into executing your virtual experiments on the cloud. You can specify the platform when building your image using the following command-line argument `}<inlineCode parentName=\"p\">{`--platform linux/amd64`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <h3>{`Making your container available to others`}</h3>\n    <p>{`If you plan to share your experiment with others, you will need to push your containers to a remote container registry, such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.docker.com/\"\n      }}>{`Docker Hub`}</a>{`. This allows others to easily access and pull your container images, making it simpler to share and reproduce your experiment.`}</p>\n    <p>{`To push your container to a remote registry, you can use the following steps:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Tag your container image`}</strong>{`: Use the `}<inlineCode parentName=\"li\">{`docker tag`}</inlineCode>{` command to assign a unique name to your image, including the registry URL and your username.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Login to the registry`}</strong>{`: Use the `}<inlineCode parentName=\"li\">{`docker login`}</inlineCode>{` command to authenticate with the registry.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Push the image`}</strong>{`: Use the `}<inlineCode parentName=\"li\">{`docker push`}</inlineCode>{` command to upload your image to the registry.`}</li>\n    </ol>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`: # Tag the image\ndocker tag my-printer:latest <your-username>/my-printer:latest\n\n: # Login to Docker Hub\ndocker login\n\n: # Push the image\ndocker push <your-username>/my-printer:latest\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`The remainder of this example will assume that you do not have access to a container registry. In this case, you can still share your experiment with others by providing them with the necessary files and instructions to build the container image themselves. This can be done by sharing the `}<strong parentName=\"p\">{`Dockerfile`}</strong>{`, `}<strong parentName=\"p\">{`printer.py`}</strong>{`, and `}<strong parentName=\"p\">{`requirements.txt`}</strong>{` files. The recipient can then build the image using the `}<inlineCode parentName=\"p\">{`docker build --platform linux/amd64 -f Dockerfile -t my-printer:latest`}</inlineCode>{` command and run your virtual experiment locally.`}</p>\n    </InlineNotification>\n    <h3>{`Create a virtual experiment that uses the container`}</h3>\n    <p>{`Create the file `}<strong parentName=\"p\">{`docker-package.yaml`}</strong>{` in the `}<inlineCode parentName=\"p\">{`/tmp/docker-package`}</inlineCode>{` directory with the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: printer\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n\ncomponents:\n- signature:\n    name: printer\n    parameters:\n      - name: message\n  command:\n    executable: python\n    arguments: /app/printer.py \"%(message)s\"\n    environment:\n        PATH: /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app\n  resourceManager:\n    config:\n        backend: docker\n    docker:\n        image: my-printer:latest\n        imagePullPolicy: IfNotPresent\n`}</code></pre>\n    <p>{`The differences between this experiment and above `}<strong parentName=\"p\">{`hello-world.yaml`}</strong>{` experiment are all about the `}<strong parentName=\"p\">{`printer`}</strong>{` `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<strong parentName=\"li\">{`bin/printer.py:ref`}</strong>{` Reference is replaced by the direct path `}<inlineCode parentName=\"li\">{`/app/printer.py`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The file is now located inside the container so using a direct path is perfectly fine`}</li>\n          <li parentName=\"ul\">{`The runtime system will search for this executable in the `}<inlineCode parentName=\"li\">{`$PATH`}</inlineCode>{` environment variable of the component`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`We set `}<inlineCode parentName=\"li\">{`command.environment.PATH`}</inlineCode>{` to include the path to the `}<inlineCode parentName=\"li\">{`printer.py`}</inlineCode>{` script`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`By default, components receive the virtual environment of the runtime process which is not guaranteed to be compatible with the environment variables that enable the execution of commands inside the container`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Configure the docker backend for this component`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resourceManager.config.backend`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`docker`}</inlineCode></li>\n          <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resourceManager.docker.image`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`my-printer:latest`}</inlineCode></li>\n          <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resourceManager.docker.imagePullPolicy`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`IfNotPresent`}</inlineCode>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`This setting instructs the runtime to only attempt to pull the image if it’s not already present on the local machine`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`The resulting file tree in `}<inlineCode parentName=\"p\">{`/tmp/docker-package`}</inlineCode>{` should be:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/tmp/docker-package\n├── Dockerfile            # To build image\n├── requirements.txt      # To build image\n├── printer.py            # To build image\n└── docker-package.yaml   # To execute experiment\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`ST4SD supports multiple different backends for your components however these features are beyond the focus of this example. You can find more information in the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/add-interface-to-experiments\"\n        }}>{`advanced experiments`}</a>{` as well as the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/workflow-specification-dsl\"\n        }}>{`DSL documentation`}</a>{` page.`}</p>\n    </InlineNotification>\n    <h3>{`Exercise`}</h3>\n    <p>{`Run your virtual experiment using `}<strong parentName=\"p\">{`elaunch.py`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`elaunch.py --nostamp docker-package.yaml\n`}</code></pre>\n    <p>{`If you encountered any issues during the process, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/direct-run#troubleshooting\"\n      }}>{`troubleshooting`}</a>{` section of the documentation for guidance on launching experiments locally.`}</p>\n    <p>{`Now that you have ran the experiment, take a moment to `}<strong parentName=\"p\">{`explore its outputs`}</strong>{`. You can find the output files following directory:\n`}<inlineCode parentName=\"p\">{`docker-package.instance/stages/stage0/entry-instance`}</inlineCode>{`.`}</p>\n    <h2>{`Your first Simulation experiment with GAMESS US`}</h2>\n    <p>{`In this example, we will create a virtual experiment that performs the Parameterized Model 3 (PM3) method in GAMESS US. PM3 is a semi-empirical quantum chemistry method. Scientists use it to calculate the molecular properties and energies when computational efficiency is a priority as an alternative to high accuracy but slow to run high-level quantum methods like Hartree-Fock or Density Functional Theory (DFT).`}</p>\n    <p>{`Start by creating a new directory in `}<inlineCode parentName=\"p\">{`/tmp/gamess-us-pm3`}</inlineCode>{` containing 2 directories: `}<inlineCode parentName=\"p\">{`bin`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`hooks`}</inlineCode>{` like so:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/tmp/gamess-us-pm3\n├── bin\n└── hooks\n`}</code></pre>\n    <p>{`Create the file `}<inlineCode parentName=\"p\">{`bin/run-gamess.sh`}</inlineCode>{` using the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#!/usr/bin/env sh\n\nmolecule=$1\ncpus=$2\n\n# The restart hook expects the filename to exist in the working directory\n# of GAMESS US\nmolecule_name=$(basename \"\\${molecule}\")\ncp \\${molecule} \\${molecule_name}\n\nPATH_RUNGMS_WRAPPER=\\${PATH_RUNGMS:-/usr/local/bin/rungms}\nPATH_GAMESS=\\${PATH_GAMESS:-/usr/local/bin/gamess}\n\nPATH_MY_GAMESS=\\${PATH_MY_GAMESS:-/tmp/gamess}\nGAMESS_SCRATCH_DIR=\\${GAMESS_SCRATCH_DIR:-\\${PATH_MY_GAMESS}/scratch}\n\nhere=\\`pwd\\`\nmkdir -p \"\\${PATH_MY_GAMESS}\"\nmkdir -p \"\\${GAMESS_SCRATCH_DIR}\"\n\nsed -e \"s#set USERSCR=/workspace/restart#set USERSCR=\\${here}#g\" \\\\\n    -e \"s#set currentdir=\\\\\\`pwd\\\\\\`#set currentdir=\\${PATH_GAMESS}#g\" \\\\\n    -e \"s#set SCR=\\\\\\`pwd\\\\\\`/scratch#set SCR=\\${GAMESS_SCRATCH_DIR}#g\" \\\\\n    -e \"s#TARGET=mpi#TARGET=ga#g\" \\\\\n    \"\\${PATH_GAMESS}/rungms\" >\"\\${PATH_MY_GAMESS}/run-gamess.sh\"\n\ncp /usr/local/bin/gamess/install.info \"\\${PATH_GAMESS}/install.info\"\n\n# The NVidia Image Features version 00 ONLY and target=GA ONLY\nversion=00\n\nchmod +x \\${PATH_MY_GAMESS}/run-gamess.sh\n\n\"\\${PATH_MY_GAMESS}\"/run-gamess.sh \"\\${molecule_name}\" \"\\${version}\" \"\\${cpus}\"\n\n\n`}</code></pre>\n    <p>{`Then download the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/band-gap-gamess/blob/main/component-scripts/extract_gmsout.py\"\n      }}>{`extract_gmsout.py script`}</a>{` and store it in the `}<inlineCode parentName=\"p\">{`bin`}</inlineCode>{` directory.`}</p>\n    <p>{`Next, make the `}<strong parentName=\"p\">{`run-gamess.sh`}</strong>{` script executable by running `}<inlineCode parentName=\"p\">{`chmod +x bin/run-gamess.sh`}</inlineCode>{` from inside the `}<inlineCode parentName=\"p\">{`/tmp/gamess-us-pm3`}</inlineCode>{` directory.`}</p>\n    <p>{`Download the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/band-gap-gamess/blob/main/hooks/semi_empirical_restart.py\"\n      }}>{`RestartHook example`}</a>{` and save it under `}<strong parentName=\"p\">{`hooks/semi_empirical_restart.py`}</strong>{`. This script checks if the PM3 method in GAMESS US has converged. If not, it triggers a task restart. You can find more information on `}<strong parentName=\"p\">{`RestartHooks`}</strong>{` in our documentation about `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/restart\"\n      }}>{`restarting tasks`}</a>{`.`}</p>\n    <p>{`Next, prepare the definition of the experiment by pasting the following into the `}<strong parentName=\"p\">{`gamess-us-pm3.yaml`}</strong>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: gamess-us-pm3\n  execute:\n  - target: <entry-instance>\n    args:\n      input.molecule.inp: input/molecule.inp\n      gamess-number-processors: 1\n      gamess-memory: \"4096Mi\"\n      # gamess-gpus is only relevant for execution on Kubernetes\n      gamess-gpus: 0\n      backend: docker\n\nworkflows:\n- signature:\n    name: gamess-us-pm3\n    parameters:\n    - name: input.molecule.inp\n    - name: gamess-number-processors\n    - name: gamess-memory\n    - name: gamess-gpus\n    - name: backend\n  steps:\n    optimise: geometry-optimisation\n    parse-gamess: extract-energies\n  execute:\n    - target: <optimise>\n      args:\n        molecule: \"%(input.molecule.inp)s:ref\"\n        gamess-number-processors: \"%(gamess-number-processors)s\"\n        gamess-memory: \"%(gamess-memory)s\"\n        gamess-gpus: \"%(gamess-gpus)s\"\n        backend: \"%(backend)s\"\n    - target: <parse-gamess>\n      args:\n        gamess-working-directory: \"<optimise>:ref\"\n        backend: \"%(backend)s\"\n\ncomponents:\n- signature:\n    name: geometry-optimisation\n    parameters:\n    - name: molecule\n    - name: gamess-number-processors\n      default: 1\n    - name: gamess-memory\n      default: \"4096Mi\"\n    - name: backend\n      default: docker\n    - name: gamess-image\n      default: nvcr.io/hpc/gamess:17.09-r2-libcchem\n    - name: docker-platform\n      default: \"linux/amd64\"\n    - name: gamess-gpus\n      default: 0\n  command:\n    arguments: \"%(molecule)s %(gamess-number-processors)s\"\n    environment:\n      PATH: /usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    executable: bin/run-gamess.sh  # the runtime resolves relative paths in the executable field\n                                   # using the manifest file\n  workflowAttributes:\n    restartHookFile: semi_empirical_restart.py\n    restartHookOn:\n    - KnownIssue\n    - Success\n    - ResourceExhausted\n    shutdownOn:\n    - KnownIssue\n    - ResourceExhausted\n  resourceManager:\n    config:\n      backend: '%(backend)s'\n      # in minutes - only applies to Kubernetes runs\n      walltime: 600\n    docker:\n      image: \"%(gamess-image)s\"\n      platform: \"%(docker-platform)s\"\n    kubernetes:\n      image: \"%(gamess-image)s\"\n  resourceRequest:\n    memory: '%(gamess-memory)s'\n    numberThreads: '%(gamess-number-processors)s'\n    threadsPerCore: 1\n    gpus: '%(gamess-gpus)s'\n\n- signature:\n    name: extract-energies\n    parameters:\n    - name: gamess-working-directory\n    - name: backend\n    - name: docker-platform\n      default: \"linux/amd64\"\n  command:\n    executable: python\n    arguments: \"bin/extract_gmsout.py:ref %(gamess-working-directory)s\"\n  resourceManager:\n    config:\n      backend: '%(backend)s'\n    kubernetes:\n      image: quay.io/st4sd/community-applications/rdkit-st4sd:2019.09.1\n    docker:\n      image: quay.io/st4sd/community-applications/rdkit-st4sd:2019.09.1\n      platform: \"%(docker-platform)s\"\n`}</code></pre>\n    <p>{`Finally create your `}<strong parentName=\"p\">{`manifest.yaml`}</strong>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`bin: bin\nhooks: hooks\n`}</code></pre>\n    <p>{`You should now have the following file structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/tmp/gamess-us-pm3\n├── bin\n│   ├── extract_gmsout.py\n│   └── run-gamess.sh\n├── hooks\n│   └── semi_empirical_restart.pyf\n├── manifest.yaml\n└── gamess-us-pm3.yaml\n`}</code></pre>\n    <h3>{`Exercise`}</h3>\n    <p>{`Try starting your experiment now using a container runtime.`}</p>\n    <p>{`Create your GAMESS-US input `}<strong parentName=\"p\">{`molecule.inp`}</strong>{` file in the directory `}<inlineCode parentName=\"p\">{`/tmp/gamess-us-pm3`}</inlineCode>{`.  You can use this example input file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` $CONTRL COORD=UNIQUE SCFTYP=RHF RUNTYP=OPTIMIZE MULT=1\n ISPHER=1 ICHARG=0 MAXIT=100 $END\n $SYSTEM MWORDS=100 TIMLIM=600 $END\n $BASIS GBASIS=PM3 $END\n $GUESS GUESS=HUCKEL $END\n $SCF DIRSCF=.t. FDIFF=.f. DIIS=.t. $END\n $STATPT NSTEP=500 PROJCT=.f. IHREP=20 HSSEND=.t. $END\n $DATA\nCH4 C CH4\n C1\n C 6.0 0.0 0.0 0.0\n H 1.0 0.1895 0.9552 -0.4946\n H 1.0 0.9509 -0.4809 0.2396\n H 1.0 -0.5631 0.1717 0.92\n H 1.0 -0.5773 -0.6461 -0.665\n $END\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`To use your own GAMESS US input file, carefully review the configuration options preceding the `}<inlineCode parentName=\"p\">{`$DATA`}</inlineCode>{` section and include them in your file. Additionally, ensure that your input is saved in a file named `}<strong parentName=\"p\">{`molecule.inp`}</strong>{`.`}</p>\n    </InlineNotification>\n    <p>{`You should now have this structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/tmp/gamess-us-pm3\n├── bin\n│   ├── extract_gmsout.py\n│   └── run-gamess.sh\n├── gamess-us-pm3.yaml\n├── hooks\n│   └── semi_empirical_restart.py\n├── manifest.yaml\n└── molecule.inp\n`}</code></pre>\n    <p>{`Launch your experiment providing the input file `}<strong parentName=\"p\">{`molecule.inp`}</strong>{` and the manifest file `}<strong parentName=\"p\">{`manifest.yaml`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`elaunch.py --nostamp --manifest manifest.yaml -i molecule.inp gamess-us-pm3.yaml\n`}</code></pre>\n    <p>{`After a couple of minutes you should see:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2025-03-31 11:37:49.301663\ncost=0\ncreated-on=2025-03-31 11:35:46.527619\ncurrent-stage=stage0\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0']\ntotal-progress=1.0\nupdated=2025-03-31 11:37:51.780640\nupdated-on=2025-03-31 11:37:51.780640\n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`gamess-us-pm3.instance`}</strong>{` directory will have the following structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`gamess-us-pm3.instance\n├── bin\n│     ├── extract_gmsout.py\n│     └── run-gamess.sh\n├── conf\n│     ├── dsl.yaml\n│     ├── flowir_instance.yaml\n│     ├── flowir_package.yaml\n│     └── manifest.yaml\n├── elaunch.yaml\n├── hooks\n│     ├── __pycache__\n│     │     └── semi_empirical_restart.cpython-310.pyc\n│     └── semi_empirical_restart.py\n├── input\n│     └── molecule.inp\n├── output\n│     ├── experiment.log\n│     ├── output.json\n│     ├── output.txt\n│     ├── status.txt\n│     └── status_details.json\n├── python\n├── stages\n│     └── stage0\n│         ├── optimise\n│         │     ├── Run1\n│         │     │     ├── component_performance.csv\n│         │     │     ├── molecule.dat\n│         │     │     ├── molecule.inp\n│         │     │     ├── molecule.rst\n│         │     │     ├── out.stderr\n│         │     │     └── out.stdout\n│         │     ├── component_performance.csv\n│         │     ├── molecule.dat\n│         │     ├── molecule.inp\n│         │     ├── molecule.rst\n│         │     ├── out.stderr\n│         │     └── out.stdout\n│         └── parse-gamess\n│             ├── component_performance.csv\n│             ├── csv2inp.log\n│             ├── energies.csv\n│             ├── out.stderr\n│             └── out.stdout\n└── status.db\n`}</code></pre>\n    <p>{`Examine the files under `}<strong parentName=\"p\">{`stages/stage0/optimise`}</strong>{` and `}<strong parentName=\"p\">{`stages/stage0/parse-gamess`}</strong>{`.`}</p>\n    <p>{`These were the contents of `}<strong parentName=\"p\">{`stages/stage0/parse-gamess/energies.csv`}</strong>{` for the experiment we ran on our laptop:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`label,completed,total-energy,homo,lumo,gap,electric-moments,total-time,total-time-per-core\nmolecule,OK,-180.53313527498008,-13.641,4.245,17.886,0.000050,0.1,0.10\n`}</code></pre>\n    <h2>{`What’s next?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Learn more about writing experiments, including more advanced features and best practice `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/write-more-experiments\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`Learn how to add `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/add-interface-to-experiments\"\n        }}>{`key-outputs and interfaces`}</a>{` to your experiments`}</li>\n      <li parentName=\"ul\">{`More information on running experiments directly, i.e. via `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/direct-run\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`More information on the DSL of ST4SD i.e. how to write experiments `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/workflow-specification-dsl\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`More information on how to structure and test your experiments `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/packaging-workflows/\"\n        }}>{`here`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","InlineNotification","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","kind","isMDXComponent"],"sourceRoot":""}