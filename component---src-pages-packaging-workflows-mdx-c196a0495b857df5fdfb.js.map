{"version":3,"file":"component---src-pages-packaging-workflows-mdx-c196a0495b857df5fdfb.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/packaging-workflows.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/travis/build/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This page describes  how to structure, test, and run your ST4SD virtual experiment projects`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Quick guide to selecting a project type</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Before beginning</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Standard project</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Standalone project</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Testing projects</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Projects and cloud execution</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Providing external data to experiments</AnchorLink>\n    </AnchorLinks>\n    <p>{`ST4SD virtual experiments often consist of a variety of files — such as configuration files, scripts, and `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/restart\"\n      }}>{`restart hooks`}</a>{`.`}</p>\n    <p>{`ST4SD supports two ways of structuring projects in order to collect these files together so your project can be tested and also so those fields will be present when you run the virtual experiment.`}</p>\n    <p><strong parentName=\"p\">{`Standard projects`}</strong>{` are flexible, allowing for multiple virtual experiment definitions to be bundled together and share files, like scripts and restart hooks.`}</p>\n    <p><strong parentName=\"p\">{`Standalone projects`}</strong>{`  only support a single virtual experiment and are best suited for workflows with many artifacts or resources that are actively changing (i.e., they have multiple commits).`}</p>\n    <h2>{`Quick Guide to Selecting a Project Type`}</h2>\n    <p>{`To identify the best project type for storing your virtual experiment find the statement that is the closest match to your situation:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`I have assets that need to be present when the virtual experiment runs. These assets are shared between multiple experiments and I can choose where to put them`}</em>{`.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use a `}<a parentName=\"li\" {...{\n              \"href\": \"#standard-project\"\n            }}>{`standard project`}</a>{`.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Recommendation`}</strong>{`: If you have an internet accessible location for hosting git repositories e.g. GitHub,  store the workflows there.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`I have assets that need to be present when the virtual -experiment runs. However these assets cannot be placed in a git repo due to size restrictions OR they live in a defined COS bucket they can’t be moved from`}</em>{`.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use a `}<a parentName=\"li\" {...{\n              \"href\": \"#standard-project\"\n            }}>{`standard project`}</a>{` but specify the assets location as a runtime application-dependency source - see `}<a parentName=\"li\" {...{\n              \"href\": \"#providing-external-data-to-experiments\"\n            }}>{`application dependencies`}</a>{`.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Recommendation`}</strong>{`: If you have an internet accessible location for hosting git repositories e.g. GitHub,  store the experiments there.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`I have a production virtual experiment with multiple restart hooks and/or many required configuration files. I  need to have strong version control and also automated regression testing`}</em>{`.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use a `}<a parentName=\"li\" {...{\n              \"href\": \"#standalone-project\"\n            }}>{`standalone project`}</a>{`.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Before beginning`}</h2>\n    <p>{`Before diving into the below sections there  are a couple of things to be aware of.`}</p>\n    <h3>{`Virtual Experiment Dependencies`}</h3>\n    <p>{`The dependencies of a virtual experiment are a set of directories it requires to be present in the top-level of its instance directory when it runs.\nThese directories are in addition to `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`stages`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`output`}</inlineCode>{` which are always created.`}</p>\n    <p>{`They are specified in the virtual experiment configuration YAML using the key `}<inlineCode parentName=\"p\">{`application-dependencies`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=myworkflow.yaml\",\n        \"path\": \"myworkflow.yaml\"\n      }}>{`application-dependencies:\n  default: # platform name\n     - $DIRECTORY_NAME_ONE\n     - $DIRECTORY_NAME_TWO\n     - ...\n`}</code></pre>\n    <p>{`In the configuration file these names can be used in references e.g. `}<inlineCode parentName=\"p\">{`$DIRECTORY_NAME_ONE/myconftemplate.dat:ref`}</inlineCode>{`.`}</p>\n    <p>{`When `}<a parentName=\"p\" {...{\n        \"href\": \"#testing-projects\"\n      }}>{`testing the configuration`}</a>{` the parser checks that all direct references to directories that aren’t called `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` are listed under `}<inlineCode parentName=\"p\">{`application-dependencies`}</inlineCode>{`; i.e., that the directories you are using in the workflow configuration are specified and will be present.`}</p>\n    <p>{`To populate these directories at run time with the correct files we need to specify the `}<strong parentName=\"p\">{`dependency sources`}</strong>{` using one of the following options:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specifying them in a `}<inlineCode parentName=\"p\">{`manifest`}</inlineCode>{`, if using `}<a parentName=\"p\" {...{\n            \"href\": \"#standard-project\"\n          }}>{`a standard project`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Explicitly creating them, if using `}<a parentName=\"p\" {...{\n            \"href\": \"#standalone-project\"\n          }}>{`a standalone project `}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specifying them when submitting an experiment via the `}<inlineCode parentName=\"p\">{`st4sd-runtime-service`}</inlineCode>{`.`}</p>\n      </li>\n    </ol>\n    <p>{`Each of these options is explain in the section below`}</p>\n    <h3>{`Use case`}</h3>\n    <p>{`In the following sections we will illustrate the two project types with a workflow called `}<inlineCode parentName=\"p\">{`myworkflow.yaml`}</inlineCode>{` that has:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Two required configuration files:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`configuration_template.txt`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`default_model.dat`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Two restart hooks:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`component_one_restart.py`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`component_two_restart.py`}</inlineCode>{`.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Standard Project`}</h2>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`This type of project:`}</p>\n      <ul>\n        <li parentName=\"ul\">\n          <p parentName=\"li\">{`Requires a manifest.`}</p>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\">{`Allows storing multiple virtual experiments in the same project.`}</p>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\">{`Required files for execution are stored in the project itself.`}</p>\n        </li>\n      </ul>\n    </InlineNotification>\n    <InlineNotification kind=\"success\" mdxType=\"InlineNotification\">\n      <p>{`You can test standard projects using the tool `}<inlineCode parentName=\"p\">{`etest.py`}</inlineCode>{` available with `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{`\nSee `}<a parentName=\"p\" {...{\n          \"href\": \"#testing-projects\"\n        }}>{`testing projects`}</a>{` for more details.`}</p>\n    </InlineNotification>\n    <p>{`Virtual experiments belonging to a standard project live under a single root directory (which can have any name e.g., “my-experiments”) and contain at least one `}<strong parentName=\"p\">{`configuration file`}</strong>{` and optionally a related `}<strong parentName=\"p\">{`manifest file`}</strong>{`.`}</p>\n    <p>{`The `}<strong parentName=\"p\">{`configuration`}</strong>{` is a YAML file containing the FlowIR definition of the virtual experiment (more on FlowIR `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/tutorial#introduction-to-flowir\"\n      }}>{`here`}</a>{`), while the `}<strong parentName=\"p\">{`manifest`}</strong>{` is a YAML file defining which directories in the project the particular virtual experiment needs and where they will be accessible from when the workflow is running.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`The directories specified in the manifest must be under project root directory`}</p>\n    </InlineNotification>\n    <p>{`The manifest and configuration files for an experiment can have any name and be stored in separate directories, although a common pattern is for them to be stored together in one directory beneath the root direcory and be called `}<inlineCode parentName=\"p\">{`manifest.yaml`}</inlineCode>{` and with the same name of the workflow (e.g. `}<inlineCode parentName=\"p\">{`myworkflow.yaml`}</inlineCode>{`), respectively.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`For running via the `}<inlineCode parentName=\"p\">{`st4sd-runtime-service`}</inlineCode>{` the root directory must be stored on a remotely accessible git repository or a COS bucket.\nSee `}<a parentName=\"p\" {...{\n          \"href\": \"#projects-and-cloud-execution\"\n        }}>{`projects and cloud execution`}</a>{` for more details.`}</p>\n    </InlineNotification>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Standard projects allow having multiple (manifest+configuration file) pairs in the same project.`}</p>\n    </InlineNotification>\n    <h3>{`Writing a manifest`}</h3>\n    <p>{`The content of the manifest file is a YAML dictionary whose keys/values are:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`$APPLICATION_DEPENDENCY_NAME: $RELATIVE_PATH_TO_SOURCE_DIRECTORY[:$METHOD]\n`}</code></pre>\n    <p>{`Where:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`APPLICATION_DEPENDENCY_NAME`}</inlineCode>{` is the name you use to refer to the directory containing the files in the virtual experiment configuration. At runtime a directory will be created in the top-level of the workflow instance with this name and populated with contents from the source directory based on `}<inlineCode parentName=\"li\">{`METHOD`}</inlineCode>{` (see below).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RELATIVE_PATH_TO_SOURCE_DIRECTORY`}</inlineCode>{` is the path to the directory under the root directory of the standard project that you want to access when the virtual experiment runs.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`METHOD`}</inlineCode>{` defines how you want the directory to be made available. It can be `}<inlineCode parentName=\"li\">{`copy`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`link`}</inlineCode>{`. If no method is specified `}<inlineCode parentName=\"li\">{`copy`}</inlineCode>{` is used, as it ensures the `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` will be present in the instance when it finishes.`}</li>\n    </ul>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Remember`}</strong>{`: the application dependencies in your manifest file must also be listed in your virtual experiment configuration under the top-level key `}<inlineCode parentName=\"p\">{`application-dependencies`}</inlineCode>{` (see `}<a parentName=\"p\" {...{\n          \"href\": \"#providing-external-data-to-experiments\"\n        }}>{`here`}</a>{`).\nThis is required for testing as it allows checking that the manifest associates source-folders to the application dependencies the workflow expects.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`If you host your standard project on GitHub and your manifest file contains application dependency sources that point to other folders in your workflow package, you should use the `}<inlineCode parentName=\"p\">{`copy`}</inlineCode>{` method. If you use `}<inlineCode parentName=\"p\">{`link`}</inlineCode>{`, the files under the application dependency sources will only be visible to components that use the `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` backend.`}</p>\n    </InlineNotification>\n    <h4>{`Example Layout`}</h4>\n    <p>{`Here is an example of how the `}<a parentName=\"p\" {...{\n        \"href\": \"#use-case\"\n      }}>{`use case`}</a>{` could be structured using the standard method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`myworkflow/\n myworkflows/\n   workflowOne/\n      - myworkflow.yaml\n      - manifest.yaml\n   shared_data/\n      - configuration_template.txt\n      - default_model.dat\n   hooks/\n      - __init__.py\n      - component_one_restart.py\n      - component_two_restart.py\n`}</code></pre>\n    <p>{`The manifest file would be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=manifest.yaml\",\n        \"path\": \"manifest.yaml\"\n      }}>{`data: ../shared_data\nhooks: ../hooks\n`}</code></pre>\n    <p>{`The configuration file would be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\",\n        \"metastring\": \"path=myworfklow.yaml\",\n        \"path\": \"myworfklow.yaml\"\n      }}>{`application-dependencies:\n  default:\n     - data\n     - hooks\n`}</code></pre>\n    <p>{`When such a virtual experiment is executed the `}<inlineCode parentName=\"p\">{`hooks`}</inlineCode>{` will be automatically run and the data files will be available in `}<inlineCode parentName=\"p\">{`data/`}</inlineCode>{`.\nFor example, the path to `}<inlineCode parentName=\"p\">{`default_model.dat`}</inlineCode>{` file would be used in `}<inlineCode parentName=\"p\">{`myworkflow.yaml`}</inlineCode>{` via the reference `}<inlineCode parentName=\"p\">{`data/default_model.dat:ref`}</inlineCode>{`.`}</p>\n    <h2>{`Standalone Project`}</h2>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`This type of project:`}</p>\n      <ul>\n        <li parentName=\"ul\">\n          <p parentName=\"li\">{`Does not require a manifest or any modification of the virtual experiment configuration.`}</p>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\">{`Allows only one virtual experiment per project.`}</p>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\">{`Stores resources/artifacts in the project itself.`}</p>\n        </li>\n      </ul>\n    </InlineNotification>\n    <InlineNotification kind=\"success\" mdxType=\"InlineNotification\">\n      <p>{`You can test experiment packages using the tool `}<inlineCode parentName=\"p\">{`etest.py`}</inlineCode>{` available with the `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <p>{`With this method the project is dedicated to a single virtual experiment, containing a single root directory with all the associated files inside of it.\nThe manifest file is also created automatically from all the directories in the root of the project, and the developer does not need to create one.`}</p>\n    <p>{`This project structure ensures that:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`All the artifacts related to a virtual experiment are kept together in a single version control history.`}</li>\n      <li parentName=\"ul\">{`The history of the repository coincides with the history of a single virtual experiment, with no contamination from changes to other virtual experiments.`}</li>\n    </ul>\n    <p>{`As such, this method is best suited for complex virtual experiments or ones that require tighter version controls.`}</p>\n    <h3>{`Example Layout`}</h3>\n    <p>{`Here is an example of how  the `}<a parentName=\"p\" {...{\n        \"href\": \"#use-case\"\n      }}>{`use case`}</a>{` could be structured using the standalone method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`myworkflow/\n   conf/\n      - flowir_package.yaml\n   data/\n      - configuration_template.txt\n      - default_model.dat\n   hooks/\n      - __init__.py\n      - component_one_restart.py\n      - component_two_restart.py\n`}</code></pre>\n    <p>{`When such a virtual experiment is executed the `}<inlineCode parentName=\"p\">{`hooks`}</inlineCode>{` will be automatically run and the data files will be available in `}<inlineCode parentName=\"p\">{`data/`}</inlineCode>{`.\nFor example the following reference is valid `}<inlineCode parentName=\"p\">{`data/default_model.dat:ref`}</inlineCode></p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/sum-numbers/\"\n      }}>{`sum-numbers`}</a>{` for a simple example of a virtual experiment defined in this way that you can also run.`}</p>\n    <h2>{`Testing Projects`}</h2>\n    <p>{`Virtual experiments defined in any of the ways described above can be tested using the tool `}<inlineCode parentName=\"p\">{`etest.py`}</inlineCode>{` available in `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{`.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/installation#set-up-local-client\"\n      }}>{`here`}</a>{` for instructions on how to install it locally (the command will be available system-wide).`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If you are in JupyterLab `}<inlineCode parentName=\"p\">{`etest.py`}</inlineCode>{` will be available if you open a terminal session. This allows you to clone the repository containing your workflow package into JupyterLab and test there.`}</p>\n    </InlineNotification>\n    <h3>{`Standalone projects`}</h3>\n    <p>{`In the case of standalone projects simply `}<inlineCode parentName=\"p\">{`cd`}</inlineCode>{` to the experiment folder and execute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`etest.py --notestExecutables\n`}</code></pre>\n    <h3>{`Standard projects`}</h3>\n    <p>{`Since standard projects can contain multiple virtual experiments testing may require some information on what to test as such:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`etest.py --manifest=$PATH_TO_MANIFEST $PATH_TO_CONFIGURATION_FILE\n`}</code></pre>\n    <h2>{`Projects and Cloud Execution`}</h2>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`In ST4SD 2.0 we will add a method to quickly test virtual experiments without the need to store them in git or object-store or manually create a parameterised package definition `}</p>\n    </InlineNotification>\n    <p>{`To execute virtual experiments on OpenShift/Kubernetes (independently from their project type) they need to be placed in an accessible location.`}</p>\n    <p>{`There are two options:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A remote git repository (e.g., GitHub).`}</li>\n      <li parentName=\"ol\">{`A Cloud Object Store (COS) bucket.`}</li>\n    </ol>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`The storage location is normally decided at the start of development, with updates being pushed regularly as changes are made.`}</p>\n    </InlineNotification>\n    <h3>{`Storing in Git`}</h3>\n    <p><strong parentName=\"p\">{`It is strongly advised`}</strong>{` to use a git repository, at least for source code management. To create a local repository, in the top level of your project type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git init\ngit add .\ngit commit *\n`}</code></pre>\n    <p>{`To then push the project to a remote git repository use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git remote add origin $REMOTE_GIT_REPO\ngit push -u origin main\n`}</code></pre>\n    <h3>{`Storing in COS`}</h3>\n    <p>{`Create a COS bucket as described in `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/UsingCloudObjectStore\"\n      }}>{`using Cloud Object Store`}</a>{` and upload/copy your project directory to the created bucket.`}</p>\n    <h3>{`Running the Virtual Experiments in the Project`}</h3>\n    <p>{`Once a project has been stored remotely there are two steps to run the experiments it defines:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"/overview/creating-a-parameterised-package\"\n          }}>{`Add the virtual experiment to the registry of the ST4SD instance you want to run on`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run it using the `}<a parentName=\"p\" {...{\n            \"href\": \"/overview/running-workflows-on-openshift\"\n          }}>{`ST4SD Python API`}</a>{` or `}<a parentName=\"p\" {...{\n            \"href\": \"/overview/running-ve-via-terminal\"\n          }}>{`command line tools`}</a>{`.`}</p>\n      </li>\n    </ol>\n    <h2>{`Providing external data to experiments`}</h2>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`If dependencies, like configuration files, cannot be placed in the virtual experiment project, they can be supplied at runtime.\nThis, however, requires users to be aware of the requirements.`}</p>\n    </InlineNotification>\n    <p>{`The first two options have been already explained. To use the third option you add the following fields when submitting your workflow to run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`experimentConfiguration = {\n    #Experiment input options\n    \"volumes\": [\n    {\n      \"type\": {\"dataset\": \"$DATA_SET_NAME\"},\n      \"applicationDependency\": \"$APPLICATION_DEPENDENCY_NAME\",\n      \"subPath\": \"$PATH_TO_APPLICATION_DEPENDENCY_SOURCE_RELATIVE_TO_TOP_LEVEL_OF_BUCKET\"\n    }\n    ]\n}\nrestUID = api.api_experiment_start(experiment_id=\"myworkflow\", payload=experimentConfiguration)\n`}</code></pre>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`The `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/datashim-io/datashim\"\n        }}>{`Datashim`}</a>{` framework needs to be installed to supply application dependencies at runtime.\nThis itself requires OpenShift v4.X.`}</p>\n    </InlineNotification>\n    <h3>{`Example Layout`}</h3>\n    <p>{`To use this method create one or more COS buckets contaning the workflow’s dependency sources.\nThe `}<a parentName=\"p\" {...{\n        \"href\": \"#use-case\"\n      }}>{`example use-case`}</a>{` could be packaged using the following layout in a singe bucket`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mybucket/\n   data/\n      - configuration_template.txt\n      - default_model.dat\n   hooks/\n      - __init__.py\n      - component_one_restart.py\n      - component_two_restart.py\n`}</code></pre>\n    <p>{`Next create a `}<inlineCode parentName=\"p\">{`Dataset`}</inlineCode>{` for the bucket - we’ll call it `}<inlineCode parentName=\"p\">{`my-workflow-deps`}</inlineCode>{`.\nFor this step follow instructions `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/UsingCloudObjectStore#datashim-method\"\n      }}>{`here`}</a>{`.\nThis is a one time action.`}</p>\n    <p>{`Now when launching the workflow use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`    experimentConfiguration = {\n    #Experiment input options\n    \"volumes\": [\n    {\n      \"type\": {\"dataset\":\"my-workflow-deps\"},\n      \"applicationDependency\": \"hooks\",\n      \"subPath\": hooks/\n    },\n     {\n      \"type\": {\"dataset\":\"my-workflow-deps\"},\n      \"applicationDependency\": \"data\",\n      \"subPath\": data/\n    },\n    ]\n}\nrestUID = api.api_experiment_start(experiment_id=\"myworkflow\", payload=experimentConfiguration)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","Object","assign","mdxType","parentName","kind","isMDXComponent"],"sourceRoot":""}