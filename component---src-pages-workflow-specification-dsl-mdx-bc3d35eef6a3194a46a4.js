"use strict";(self.webpackChunkst4sd_overview=self.webpackChunkst4sd_overview||[]).push([[2510],{63:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return l},default:function(){return d}});var a=t(45),i=(t(6540),t(5680)),r=t(8027);const o=["components"],l={},s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",n)},p=s("PageDescription"),m=s("InlineNotification"),u=s("AnchorLinks"),c=s("AnchorLink"),g={_frontmatter:l},y=r.A;function d(e){let{components:n}=e,t=(0,a.A)(e,o);return(0,i.yg)(y,Object.assign({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)(p,{mdxType:"PageDescription"},(0,i.yg)("p",null,"Use this page to learn about the new Domain Specific Language (DSL 2.0) of ST4SD and how it works.")),(0,i.yg)(m,{kind:"info",mdxType:"InlineNotification"},(0,i.yg)("p",null,"Here, we are using DSL 2.0, if you need to understand the previous syntax check out the ",(0,i.yg)("a",{parentName:"p",href:"/overview/workflow-specification"},"FlowIR docs"),".")),(0,i.yg)(u,{mdxType:"AnchorLinks"},(0,i.yg)(c,{mdxType:"AnchorLink"},"Namespace"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Entrypoint"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Workflow"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Component"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Assigning values to parameters"),(0,i.yg)(c,{mdxType:"AnchorLink"},"OutputReference"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Example"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Key outputs"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Interface"),(0,i.yg)(c,{mdxType:"AnchorLink"},"Differences between DSL 2.0 and FlowIR")),(0,i.yg)("p",null,"DSL 2.0 is the new (and beta) way to define the computational graphs of ST4SD workflows."),(0,i.yg)("h2",null,"Namespace"),(0,i.yg)("p",null,"In DSL 2.0, a Computational Graph consists of Components which can be grouped under Workflow containers.\nIt also has an Entrypoint which points to the root node of the graph, which is an instance of a Component or Workflow template."),(0,i.yg)("p",null,"A Namespace is simply a container for the Component, Workflow, and Entrypoint definitions which represent the Computational Graph of one ST4SD workflow. "),(0,i.yg)("p",null,"Below is an example of a Namespace containing a single component that prints the message ",(0,i.yg)("inlineCode",{parentName:"p"},"Hello world")," to the terminal."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'entrypoint:\n  entry-instance: print\n  execute:\n  - target: "<entry-instance>"\n    args:\n      message: Hello world\ncomponents:\n- signature:\n    name: print\n    parameters:\n      name: message\n  command:\n    executable: echo\n    arguments: "%(message)s"\n')),(0,i.yg)("h2",null,"Entrypoint"),(0,i.yg)("p",null,"The Optional Entrypoint serves a single purpose. Describe how to execute root Template instance of the Computational Graph."),(0,i.yg)("p",null,"Its schema is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'# This executes an instance of $template which is called "<entry-instance>"\nentry-instance: $template # name of a Component or Workflow template\nexecute: # an array with exactly 1 entry\n- target: <entry-instance> # which instance of a Template to execute.\n                           # In this scope there is only <entry-instance>\n  args:\n    $paramName: $value # one for each parameter of the template that\n                       # the "target" points to\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"entry-instance")," field receives the name of a Template and creates an instance of it called ",(0,i.yg)("inlineCode",{parentName:"p"},"<entry-instance>"),".\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"execute")," field then describes how to “execute” the ",(0,i.yg)("inlineCode",{parentName:"p"},"<entry-instance>")," i.e. how to populate the arguments of the associated Template."),(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"execute[].args")," you:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"must")," provide values for any parameters in the child ",(0,i.yg)("inlineCode",{parentName:"li"},"$template")," which do not have default values"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"may")," override the value of the parameters in ",(0,i.yg)("inlineCode",{parentName:"li"},"$template")," which have default values")),(0,i.yg)("p",null,"The Template instance that the entrypoint points to can have special parameters which are data references to paths that are external to the workflow.\nThese parameters must be called ",(0,i.yg)("inlineCode",{parentName:"p"},"input.$filename")," and they must not have default values in the signature of the Template definition.\nThe entrypoint ",(0,i.yg)("strong",{parentName:"p"},"may")," not explicitly override the values of said parameters, the runtime system will auto-generate them."),(0,i.yg)("p",null,"Consider a scenario where the Template that the ",(0,i.yg)("inlineCode",{parentName:"p"},"<entry-instance>")," step points to has a parameter called ",(0,i.yg)("inlineCode",{parentName:"p"},"input.my-input.db"),".\nThe runtime will post-process the ",(0,i.yg)("inlineCode",{parentName:"p"},"entrypoint.execute[0].args")," dictionary to include the following key-value pair:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'input.my-input.db: "input/my-input.db"\n')),(0,i.yg)("p",null,"In ",(0,i.yg)("a",{parentName:"p",href:"#assigning-values-to-parameters"},"Assigning values to parameters")," we describe in more detail how to assign values to parameters of Template instances in general."),(0,i.yg)("h2",null,"Workflow"),(0,i.yg)("p",null,"A Workflow is a Template that describes how to ",(0,i.yg)("inlineCode",{parentName:"p"},"execute")," a number of Template instances called ",(0,i.yg)("inlineCode",{parentName:"p"},"steps"),".\nIt has a ",(0,i.yg)("inlineCode",{parentName:"p"},"signature")," that consists of a unique ",(0,i.yg)("inlineCode",{parentName:"p"},"name")," and a ",(0,i.yg)("inlineCode",{parentName:"p"},"parameter")," list.\nEach such step can consume the outputs of a sibling step, or the parameters of the parent Workflow."),(0,i.yg)("p",null,"The outputs of a workflow are its ",(0,i.yg)("inlineCode",{parentName:"p"},"steps"),". The schema of Workflow is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"signature:\n  name: $Template # the name of this Workflow Template - must be unique\n  parameters:\n    - name: $paramName\n      # optional default value\n      default: $value # str, number, or dictionary of {str: str/number}\nsteps: # which steps to instantiate\n  $stepName: $Template # for example child: simulation-code\nexecute: # how to execute the steps - one for each entry of steps\n- target: <$stepName> # for example <child> or <child/grandchild>\n  args:\n    $paramName: $value # one for each parameter of the Template that\n                       # .target points to\n")),(0,i.yg)("p",null,"In ",(0,i.yg)("a",{parentName:"p",href:"#assigning-values-to-parameters"},"Assigning values to parameters")," we describe how to assign values to parameters of Template instances."),(0,i.yg)("h2",null,"Component"),(0,i.yg)("p",null,"A Component describes how to ",(0,i.yg)("inlineCode",{parentName:"p"},"execute")," a task.\nJust like a Workflow Template, it has a ",(0,i.yg)("inlineCode",{parentName:"p"},"signature")," that consists of a ",(0,i.yg)("inlineCode",{parentName:"p"},"name")," and a ",(0,i.yg)("inlineCode",{parentName:"p"},"parameter")," list. "),(0,i.yg)("p",null,"The outputs of a Component are the paths under its working directory. "),(0,i.yg)("p",null,"The schema of a Component is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'signature:\n  name: $Template # the name of this Component Template - must be unique\n  parameters:\n    - name: $paramName\n      # optional default value\n      default: $value # str, number, or dictionary of {str: str/number}\n# All the FlowIR fields, except for stage, name, references, and override\ncommand:\n  executable: str\n  arguments: str\n  environment: (null, str)\nworkflowAttributes:\n  aggregate: bool\n  replicate: (int, null, str containing %(value-reference)s)\nresourceRequest:\n  numberProcesses: (int, str containing %(value-reference)s)\n  numberThreads: (int, str containing %(value-reference)s)\n  ranksPerNode: (int, str containing %(value-reference)s)\n  threadsPerCore: (int, str containing %(value-reference)s)\n  memory: (int (size in bytes), str containing %(value-reference)s or Mib/Kib bytes )\n  gpus: (int, str containing %(value-reference)s)\nresourceManager:\n  config:\n    backend: (name of backend e.g local, kubernetes, lsf, docker)\n    walltime: (in minutes, valid for "kubernetes" and "lsf" backends, float)\n  docker:\n    image: str\n    imagePullPolicy: (Optional) one of Always (default), Never, IfNotPresent\n  kubernetes:\n    image: str\n  lsf:\n    queue: str\nvariables:\n  <variable name:str>: <value: str, int, bool, float>\n')),(0,i.yg)("p",null,"The above fields are the same as those in the ",(0,i.yg)("a",{parentName:"p",href:"/overview/workflow-specification/#component"},"Component section of the Workflow Specification in FlowIR"),"."),(0,i.yg)("p",null,"For more information, read our documentation on the ",(0,i.yg)("a",{parentName:"p",href:"/overview/workflow-specification#description-of-basic-flowir-component-fields"},"basic FlowIR component fields"),"."),(0,i.yg)("h2",null,"Assigning values to parameters"),(0,i.yg)("p",null,"Both Component and Workflow templates are instantiated in the same way:\nby declaring them as a ",(0,i.yg)("inlineCode",{parentName:"p"},"step")," and adding an entry to an ",(0,i.yg)("inlineCode",{parentName:"p"},"execute")," block which assigns values to the Template’s parameters."),(0,i.yg)("p",null,"The value of a parameter can be a number, string, or a key: value dictionary.\nThe body of a Template can reference its parameters like so ",(0,i.yg)("inlineCode",{parentName:"p"},"%(parameterName)s"),"."),(0,i.yg)("p",null,"When assigning a value to the parameters of a template via the ",(0,i.yg)("inlineCode",{parentName:"p"},"execute[].args")," dictionary"),(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"execute[].args")," you:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"must")," provide values for any parameters in the child ",(0,i.yg)("inlineCode",{parentName:"li"},"$template")," which do not have default values"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"may")," override the value of the parameters in ",(0,i.yg)("inlineCode",{parentName:"li"},"$template")," which have default values"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"may")," use ",(0,i.yg)("inlineCode",{parentName:"li"},"OutputReferences")," to indicate dependencies to steps (definition follows this bullet list)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"may")," use ",(0,i.yg)("inlineCode",{parentName:"li"},"%(parentParameter)s")," to indicate a dependency to the value that the parent parameter has. In turn that can be a dependency to the output of a Template instance or an input file or it might just be a literal constant"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"may")," use a ",(0,i.yg)("inlineCode",{parentName:"li"},"$key: $value")," dictionary to propagate a dictionary-type value. At the moment Template can only reference this kind of parameters to set the value of the ",(0,i.yg)("inlineCode",{parentName:"li"},"command.environment")," field of Components"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"may")," use ",(0,i.yg)("inlineCode",{parentName:"li"},"%(input.$filename)s"),"to propagate an input file reference from a parent to a step. ",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Eventually a step must apply a ",(0,i.yg)("a",{parentName:"li",href:"/overview/workflow-specification/#datareference"},"DataReferences")," ",(0,i.yg)("inlineCode",{parentName:"li"},":$method")," to the parameter to indicates it wishes to consume the input file")))),(0,i.yg)("h3",null,"Environments"),(0,i.yg)("p",null,"The environment that components run in is defined in the ",(0,i.yg)("inlineCode",{parentName:"p"},"command.environment")," field. If you don’t define anything in this section ST4SD will create a default environment containing all the environment variables of the runtime system process."),(0,i.yg)("p",null,"Example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"command:\n  environment:\n    ENV-VAR1: value/for/env-var1\n    ENV-VAR2: value/for/env-var2\n    DEFAULTS: ENV-VAR3:ENV-VAR4\n")),(0,i.yg)("p",null,"The above defines an environment with 4 environment variables:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ENV-VAR1")," whose value is ",(0,i.yg)("inlineCode",{parentName:"li"},"value/for/env-var1")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ENV-VAR2")," whose value is ",(0,i.yg)("inlineCode",{parentName:"li"},"value/for/env-var2")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ENV-VAR3")," whose value is inherited from the environment variable ",(0,i.yg)("inlineCode",{parentName:"li"},"ENV-VAR3")," of the process running the runtime system"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"ENV-VAR4")," whose value is inherited from the environment variable ",(0,i.yg)("inlineCode",{parentName:"li"},"ENV-VAR4")," of the process running the runtime system")),(0,i.yg)("p",null,"In the above example, we use the ",(0,i.yg)("inlineCode",{parentName:"p"},"DEFAULTS")," directive to inherit the values for a list of environment variables from the environment variables of the runtime system process. The value of the special “DEFAULTS” key is a list of environment variable name separated with ”:“."),(0,i.yg)("p",null,"Want to find out more? Check out our ",(0,i.yg)("a",{parentName:"p",href:"#example"},"example"),"."),(0,i.yg)("h3",null,"OutputReference"),(0,i.yg)("p",null,"The format of an ",(0,i.yg)("inlineCode",{parentName:"p"},"OutputReference")," is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"<$stepId>/$optionalPath:$optionalMethod\n")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"$stepId")," is a ",(0,i.yg)("inlineCode",{parentName:"p"},"/")," separated array of ",(0,i.yg)("inlineCode",{parentName:"p"},"stepNames")," starting from the scope of the current workflow. For example, the OutputReference ",(0,i.yg)("inlineCode",{parentName:"p"},"<one/child>/file.txt:ref")," resolves to the absolute path of the file ",(0,i.yg)("inlineCode",{parentName:"p"},"file.txt")," that the component ",(0,i.yg)("inlineCode",{parentName:"p"},"child")," produces under the sibling step ",(0,i.yg)("inlineCode",{parentName:"p"},"one")," which is an instance of a Workflow template. You can find more reference ",(0,i.yg)("inlineCode",{parentName:"p"},"methods")," in our ",(0,i.yg)("a",{parentName:"p",href:"/overview/workflow-specification/#datareference"},"DataReferences")," docs."),(0,i.yg)("h1",null,"Example"),(0,i.yg)("p",null,"Here is a simple example which uses one Workflow and one Component template two run 2 tasks."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"consume-input: prints the contents of an input file called ",(0,i.yg)("inlineCode",{parentName:"li"},"my-input.db")),(0,i.yg)("li",{parentName:"ul"},"consume-sibling: prints the text “my sibling said” followed by stdout of the sibling step ",(0,i.yg)("inlineCode",{parentName:"li"},"<consume-input>")," ")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'entrypoint:\n  entry-instance: main\n  execute:\n  - target: <entry-instance>\nworkflows:\n- signature:\n    name: main\n    parameters:\n    # special variable with auto-populated value\n    - name: input.my-input.db\n  steps:\n    consume-input: echo\n    consume-sibling: echo\n  execute:\n    - target: <consume-input>\n      args:\n        # resolves to the contents of the file \n        # that input.my-input-d points to\n        message: "%(input.my-input.db)s:output"\n    - target: <consume-sibling>\n      args:\n        # resolves to the stdout of step consume-input\n        message: "my sibling said <consume-input>:output"\ncomponents:\n- signature:\n    name: echo\n    parameters:\n      - name: message\n  command:\n    executable: "echo"\n    arguments: "%(message)s"\n')),(0,i.yg)("p",null,"To try it out, store the above DSL in a file called ",(0,i.yg)("inlineCode",{parentName:"p"},"dsl-params.yaml")," and run"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'pip install "st4sd-runtime-core[develop]">=2.4.0\n')),(0,i.yg)("p",null,"which installs the command-line-tool elaunch.py, followed by:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'echo "hello world" >my-input.db\nelaunch.py -i my-input.db --failSafeDelays=no -l40 dsl-params.yaml\n')),(0,i.yg)("h2",null,"Key outputs"),(0,i.yg)("p",null,"All experiments produce files, but not all generated files are equally important. To this end ST4SD has the concept of key-outputs. These are files, and directories, that an experiment produces which the developers of the experiment consider important."),(0,i.yg)("p",null,"Here is a an example of an experiment with a key-output:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'entrypoint:\n  entry-instance: hello\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n  output:\n    - name: greeting\n      data-in: <entry-instance>:output\n      description: just a friendly greeting\n\ncomponents:\n- signature:\n    name: hello\n    parameters:\n      - name: message\n  command:\n    executable: echo\n    arguments: "%(message)s"\n\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"output")," field in the ",(0,i.yg)("inlineCode",{parentName:"p"},"entrypoint")," dictionary defines the key-outputs of this experiment:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"entrypoint:\n  # ... other fields ...\n  output:\n    - name: greeting\n      data-in: <entry-instance>:output\n")),(0,i.yg)("p",null,"This experiment has a single key-output called ",(0,i.yg)("inlineCode",{parentName:"p"},"greeting"),". The data associated with this key-output is actually the ",(0,i.yg)("inlineCode",{parentName:"p"},"stdout")," of the ",(0,i.yg)("inlineCode",{parentName:"p"},"<entry-instance>")," step which is an instance of the ",(0,i.yg)("inlineCode",{parentName:"p"},"hello")," component. As the experiment finishes producing this key-output the ",(0,i.yg)("inlineCode",{parentName:"p"},"$INSTANCE_DIR/output/output.json")," file is updated to reflect the state of this experiment."),(0,i.yg)("p",null,"Here’s an how the ",(0,i.yg)("inlineCode",{parentName:"p"},"output.json")," file will look like for the above key outputs:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "greeting": {\n        "creationtime": "1725374555.6836693",\n        "description": "just a friendly greeting",\n        "filename": "out.stdout",\n        "filepath": "stages/stage0/entry-instance/out.stdout",\n        "final": "yes",\n        "production": "yes",\n        "type": "",\n        "version": "1"\n    }\n}\n')),(0,i.yg)("p",null,"While the experiment is running, the runtime system asynchronously updates this file with metadata about the generated key-outputs of the experiment. In this example, there is just one key-output called ",(0,i.yg)("inlineCode",{parentName:"p"},"greeting"),". For more information on key-outputs check out our ",(0,i.yg)("a",{parentName:"p",href:"/overview/workflow-specification#key-outputs"},"documentation"),"."),(0,i.yg)("p",null,"If you are running experiments on the cloud and are instructing the runtime system to register them into the ST4SD datastore you may also use the ST4SD python API to ",(0,i.yg)("a",{parentName:"p",href:"/overview/running-workflows-on-openshift#retrieving-the-outputs-of-a-virtual-experiment-instance"},"download")," the key-outputs of your experiment instances."),(0,i.yg)("h2",null,"Interface"),(0,i.yg)("p",null,"Key outputs are not always immediately parseable without deep understanding of their format. To address this, ST4SD supports the ",(0,i.yg)("strong",{parentName:"p"},"interface")," feature. This feature allows workflow developers to extract measured properties and store them in a CSV file, making the data easier to consume."),(0,i.yg)("p",null,"Some virtual experiments define interfaces which make it simpler for users to retrieve the input systems and measured properties from executions of that virtual experiment."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"interface")," of a virtual experiment defines:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The specification used to describe ",(0,i.yg)("inlineCode",{parentName:"li"},"input")," systems it processes e.g. SMILEs for small molecules"),(0,i.yg)("li",{parentName:"ul"},"Instructions to extract the ",(0,i.yg)("inlineCode",{parentName:"li"},"input")," systems from input data"),(0,i.yg)("li",{parentName:"ul"},"Instructions to extract the values of ",(0,i.yg)("inlineCode",{parentName:"li"},"properties")," that the virtual experiment computes")),(0,i.yg)("p",null,"Once a virtual experiment has an ",(0,i.yg)("inlineCode",{parentName:"p"},"interface"),"  ST4SD can return a ",(0,i.yg)("inlineCode",{parentName:"p"},"pandas.DataFrame"),"  containing the properties calculated by instances of the virtual experiment, as well as the ids of the ",(0,i.yg)("inlineCode",{parentName:"p"},"input")," systems that an instance processed. This functionality is provided via the ",(0,i.yg)("inlineCode",{parentName:"p"},"st4sd-datastore")," API and the ",(0,i.yg)("inlineCode",{parentName:"p"},"st4sd-runtime-service")," API. See ",(0,i.yg)("a",{parentName:"p",href:"/overview/using-a-virtual-experiment-interface"},"using a virtual experiment interface")," for further information."),(0,i.yg)("p",null,"In this example we will work with a virtual experiment which:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"extracts the IDs of its input systems"),(0,i.yg)("li",{parentName:"ol"},"has 2 key-outputs that correspond to 2 measured properties of the interface"),(0,i.yg)("li",{parentName:"ol"},"uses builtin hooks to extract the measured properties from the key-outputs")),(0,i.yg)("p",null,"The DSL of the experiment is :"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'entrypoint:\n  interface:\n    description: Counts vowels in words\n    inputSpec:\n      namingScheme: words\n      inputExtractionMethod:\n        csvColumn:\n          source:\n            path: input/words.csv\n          args:\n            column: word\n    propertiesSpec:\n    - name: Vowels\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: vowels\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - vowels\n    - name: Letters\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: letters\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - letters\n  output:\n    - name: vowels\n      data-in: <entry-instance/count-vowels>/vowels.csv:ref\n    - name: letters\n      data-in: <entry-instance/count-letters>/letters.csv:ref\n\n  entry-instance: main\n  execute:\n    - target: <entry-instance>\n      args:\n        words_file: input/words.csv:ref\n\nworkflows:\n  - signature:\n      name: main\n      parameters:\n        - name: words_file\n    steps:\n      count-vowels: count-vowels\n      count-letters: count-letters\n    execute:\n      - target: <count-vowels>\n        args:\n          words: "%(words_file)s"\n      - target: <count-letters>\n        args:\n          words: "%(words_file)s"\n\ncomponents:\n- signature:\n    name: count-vowels\n    parameters:\n    - name: words\n  command:\n    executable: bin/count_vowels.py\n    arguments: "%(words)s"\n\n- signature:\n    name: count-letters\n    parameters:\n      - name: words\n  command:\n    executable: bin/count_letters.py\n    arguments: "%(words)s"\n')),(0,i.yg)("p",null,"The interface contains a human readable description of the experiment under ",(0,i.yg)("inlineCode",{parentName:"p"},"entrypoint.interface.description"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"entrypoint:\n  interface:\n    description: Counts vowels in words\n")),(0,i.yg)("p",null,"Then, in ",(0,i.yg)("inlineCode",{parentName:"p"},"entrypoint.interface.inputspec")," it uses the builtin input extraction method ",(0,i.yg)("inlineCode",{parentName:"p"},"csvColumn")," to extract the ids of the systems it processes:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"entrypoint:\n  interface:\n    inputSpec:\n      namingScheme: words\n      inputExtractionMethod:\n        csvColumn:\n          source:\n            path: input/words.csv\n          args:\n            column: word\n")),(0,i.yg)("p",null,"It instructs the method to read the CSV file ",(0,i.yg)("inlineCode",{parentName:"p"},"input/words.csv")," (i.e. the input file) and treat every row of the CSV as one input system whose identifier lies in the column ",(0,i.yg)("inlineCode",{parentName:"p"},"word"),"."),(0,i.yg)("p",null,"Following that, it uses the builtin property extraction method ",(0,i.yg)("inlineCode",{parentName:"p"},"csvDataFrame")," twice to measure its 2 properties ",(0,i.yg)("inlineCode",{parentName:"p"},"Vowels")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"Letters")," from the key-outputs ",(0,i.yg)("inlineCode",{parentName:"p"},"vowels")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"letters")," respectively."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"entrypoint:\n  interface:\n    propertiesSpec:\n    - name: Vowels\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: vowels\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - vowels\n    - name: Letters\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: letters\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - letters\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("a",{parentName:"p",href:"/overview/writing-a-virtual-experiment-interface#csvdataframe"},(0,i.yg)("inlineCode",{parentName:"a"},"csvDataFrame"))," property extraction method expects a CSV file which has the columns ",(0,i.yg)("inlineCode",{parentName:"p"},"input-id")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"${the property name}"),". One of the requirements for using a ST4SD interface is that the property names start with a capital letter. One of the requirements of the ",(0,i.yg)("inlineCode",{parentName:"p"},"csvDataFrame")," is that there should be a column with the same name as the property name that is being extracted. Another is that there should be a column called ",(0,i.yg)("inlineCode",{parentName:"p"},"input-id"),"."),(0,i.yg)("p",null,"In this example the components happen to produce key-output CSV files which contain a properly named column for the values of properties but instead of using the ",(0,i.yg)("inlineCode",{parentName:"p"},"input-id")," column they use the column ",(0,i.yg)("inlineCode",{parentName:"p"},"word"),". To account for this inconsistency, the developers of the workflow use the ",(0,i.yg)("inlineCode",{parentName:"p"},"renameColumns")," argument of the ",(0,i.yg)("inlineCode",{parentName:"p"},"csvDataFrame")," property extraction method. Via ",(0,i.yg)("inlineCode",{parentName:"p"},"renameColumns")," they instruct ",(0,i.yg)("inlineCode",{parentName:"p"},"csvDataFrame")," to treat the column ",(0,i.yg)("inlineCode",{parentName:"p"},"word")," as if it were called ",(0,i.yg)("inlineCode",{parentName:"p"},"input-id"),"."),(0,i.yg)("p",null,"This means that you have to create a CSV file called ",(0,i.yg)("inlineCode",{parentName:"p"},"words.csv")," and use it as an input for (via the ",(0,i.yg)("inlineCode",{parentName:"p"},"-i")," arg) to the workflow."),(0,i.yg)("p",null,"You can find more information on this in the ",(0,i.yg)("a",{parentName:"p",href:"/overview/writing-a-virtual-experiment-interface"},"creating an interface documentation"),". Just keep in mind that this documentation was originally written with the FlowIR syntax in mind."),(0,i.yg)("h2",null,"Differences between DSL 2.0 and FlowIR"),(0,i.yg)("p",null,"There are some differences between DSL 2.0 and ",(0,i.yg)("a",{parentName:"p",href:"/overview/workflow-specification"},"FlowIR"),"."),(0,i.yg)("p",null,"In the current version (0.3.x) of DSL 2.0:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"we offer support for natural composition of Computational Graphs using Workflow and Component templates"),(0,i.yg)("li",{parentName:"ul"},"the ",(0,i.yg)("inlineCode",{parentName:"li"},"signature")," field replaces the ",(0,i.yg)("inlineCode",{parentName:"li"},"stage"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"name"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"references"),", and ",(0,i.yg)("inlineCode",{parentName:"li"},"override")," fields of the component specification in FlowIR"),(0,i.yg)("li",{parentName:"ul"},"settings and inputs flow through parameters, we do not support global/stage environments or variables"),(0,i.yg)("li",{parentName:"ul"},"the fields of components can contain ",(0,i.yg)("inlineCode",{parentName:"li"},"%(parameter)s")," references as well as component ",(0,i.yg)("inlineCode",{parentName:"li"},"%(variable)s")),(0,i.yg)("li",{parentName:"ul"},"dependencies between components are defined by referencing the output of a producer component in one parameter of the consumer component - ",(0,i.yg)("a",{parentName:"li",href:"/overview/workflow-specification/#datareference"},"DataReferences")," are reserved for referencing input files only",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"the equivalent of a DataReference for Template instances is an OutputReference"))),(0,i.yg)("li",{parentName:"ul"},"data files and manifests"),(0,i.yg)("li",{parentName:"ul"},"key outputs and interface")),(0,i.yg)("p",null,"DSL 2.0 will eventually contain a superset of the FlowIR features. However, the current beta version of DSL 2.0 does not support:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"FlowIR platforms"),(0,i.yg)("li",{parentName:"ul"},"application-dependencies",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"however, you can use a manifest to implicitly define your application-dependencies")))))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-workflow-specification-dsl-mdx-bc3d35eef6a3194a46a4.js.map