{"version":3,"file":"component---src-pages-workflow-specification-dsl-mdx-d66a34ee72f1aaad3574.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/workflow-specification-dsl.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/vassiliad/projects/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this page to learn about the new Domain Specific Language (DSL 2.0) of ST4SD and how it works.`}</p>\n    </PageDescription>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Here, we are using DSL 2.0, if you need to understand the previous syntax check out the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/workflow-specification\"\n        }}>{`FlowIR docs`}</a>{`.`}</p>\n    </InlineNotification>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n    <AnchorLink mdxType=\"AnchorLink\">Namespace</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Entrypoint</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Workflow</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Component</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Assigning values to parameters</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">OutputReference</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Example</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Key outputs</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Interface</AnchorLink>\n    <AnchorLink mdxType=\"AnchorLink\">Differences between DSL 2.0 and FlowIR</AnchorLink>\n    </AnchorLinks>\n    <p>{`DSL 2.0 is the new (and beta) way to define the computational graphs of ST4SD workflows.`}</p>\n    <h2>{`Namespace`}</h2>\n    <p>{`In DSL 2.0, a Computational Graph consists of Components which can be grouped under Workflow containers.\nIt also has an Entrypoint which points to the root node of the graph, which is an instance of a Component or Workflow template.`}</p>\n    <p>{`A Namespace is simply a container for the Component, Workflow, and Entrypoint definitions which represent the Computational Graph of one ST4SD workflow. `}</p>\n    <p>{`Below is an example of a Namespace containing a single component that prints the message `}<inlineCode parentName=\"p\">{`Hello world`}</inlineCode>{` to the terminal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: print\n  execute:\n  - target: \"<entry-instance>\"\n    args:\n      message: Hello world\ncomponents:\n- signature:\n    name: print\n    parameters:\n      name: message\n  command:\n    executable: echo\n    arguments: \"%(message)s\"\n`}</code></pre>\n    <h2>{`Entrypoint`}</h2>\n    <p>{`The Optional Entrypoint serves a single purpose. Describe how to execute root Template instance of the Computational Graph.`}</p>\n    <p>{`Its schema is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# This executes an instance of $template which is called \"<entry-instance>\"\nentry-instance: $template # name of a Component or Workflow template\nexecute: # an array with exactly 1 entry\n- target: <entry-instance> # which instance of a Template to execute.\n                           # In this scope there is only <entry-instance>\n  args:\n    $paramName: $value # one for each parameter of the template that\n                       # the \"target\" points to\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`entry-instance`}</inlineCode>{` field receives the name of a Template and creates an instance of it called `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{`.\nThe `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` field then describes how to “execute” the `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{` i.e. how to populate the arguments of the associated Template.`}</p>\n    <p>{`In `}<inlineCode parentName=\"p\">{`execute[].args`}</inlineCode>{` you:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`must`}</strong>{` provide values for any parameters in the child `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which do not have default values`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` override the value of the parameters in `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which have default values`}</li>\n    </ul>\n    <p>{`The Template instance that the entrypoint points to can have special parameters which are data references to paths that are external to the workflow.\nThese parameters must be called `}<inlineCode parentName=\"p\">{`input.$filename`}</inlineCode>{` and they must not have default values in the signature of the Template definition.\nThe entrypoint `}<strong parentName=\"p\">{`may`}</strong>{` not explicitly override the values of said parameters, the runtime system will auto-generate them.`}</p>\n    <p>{`Consider a scenario where the Template that the `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{` step points to has a parameter called `}<inlineCode parentName=\"p\">{`input.my-input.db`}</inlineCode>{`.\nThe runtime will post-process the `}<inlineCode parentName=\"p\">{`entrypoint.execute[0].args`}</inlineCode>{` dictionary to include the following key-value pair:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`input.my-input.db: \"input/my-input.db\"\n`}</code></pre>\n    <p>{`In `}<a parentName=\"p\" {...{\n        \"href\": \"#assigning-values-to-parameters\"\n      }}>{`Assigning values to parameters`}</a>{` we describe in more detail how to assign values to parameters of Template instances in general.`}</p>\n    <h2>{`Workflow`}</h2>\n    <p>{`A Workflow is a Template that describes how to `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` a number of Template instances called `}<inlineCode parentName=\"p\">{`steps`}</inlineCode>{`.\nIt has a `}<inlineCode parentName=\"p\">{`signature`}</inlineCode>{` that consists of a unique `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{` list.\nEach such step can consume the outputs of a sibling step, or the parameters of the parent Workflow.`}</p>\n    <p>{`The outputs of a workflow are its `}<inlineCode parentName=\"p\">{`steps`}</inlineCode>{`. The schema of Workflow is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`signature:\n  name: $Template # the name of this Workflow Template - must be unique\n  parameters:\n    - name: $paramName\n      # optional default value\n      default: $value # str, number, or dictionary of {str: str/number}\nsteps: # which steps to instantiate\n  $stepName: $Template # for example child: simulation-code\nexecute: # how to execute the steps - one for each entry of steps\n- target: <$stepName> # for example <child> or <child/grandchild>\n  args:\n    $paramName: $value # one for each parameter of the Template that\n                       # .target points to\n`}</code></pre>\n    <p>{`In `}<a parentName=\"p\" {...{\n        \"href\": \"#assigning-values-to-parameters\"\n      }}>{`Assigning values to parameters`}</a>{` we describe how to assign values to parameters of Template instances.`}</p>\n    <h2>{`Component`}</h2>\n    <p>{`A Component describes how to `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` a task.\nJust like a Workflow Template, it has a `}<inlineCode parentName=\"p\">{`signature`}</inlineCode>{` that consists of a `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{` list. `}</p>\n    <p>{`The outputs of a Component are the paths under its working directory. `}</p>\n    <p>{`The schema of a Component is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`signature:\n  name: $Template # the name of this Component Template - must be unique\n  parameters:\n    - name: $paramName\n      # optional default value\n      default: $value # str, number, or dictionary of {str: str/number}\n# All the FlowIR fields, except for stage, name, references, and override\ncommand:\n  executable: str\n  arguments: str\n  environment: (null, str)\nworkflowAttributes:\n  aggregate: bool\n  replicate: (int, null, str containing %(value-reference)s)\nresourceRequest:\n  numberProcesses: (int, str containing %(value-reference)s)\n  numberThreads: (int, str containing %(value-reference)s)\n  ranksPerNode: (int, str containing %(value-reference)s)\n  threadsPerCore: (int, str containing %(value-reference)s)\n  memory: (int (size in bytes), str containing %(value-reference)s or Mib/Kib bytes )\n  gpus: (int, str containing %(value-reference)s)\nresourceManager:\n  config:\n    backend: (name of backend e.g local, kubernetes, lsf, docker)\n    walltime: (in minutes, valid for \"kubernetes\" and \"lsf\" backends, float)\n  docker:\n    image: str\n    imagePullPolicy: (Optional) one of Always (default), Never, IfNotPresent\n  kubernetes:\n    image: str\n  lsf:\n    queue: str\nvariables:\n  <variable name:str>: <value: str, int, bool, float>\n`}</code></pre>\n    <p>{`The above fields are the same as those in the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification/#component\"\n      }}>{`Component section of the Workflow Specification in FlowIR`}</a>{`.`}</p>\n    <p>{`For more information, read our documentation on the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification#description-of-basic-flowir-component-fields\"\n      }}>{`basic FlowIR component fields`}</a>{`.`}</p>\n    <h2>{`Assigning values to parameters`}</h2>\n    <p>{`Both Component and Workflow templates are instantiated in the same way:\nby declaring them as a `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` and adding an entry to an `}<inlineCode parentName=\"p\">{`execute`}</inlineCode>{` block which assigns values to the Template’s parameters.`}</p>\n    <p>{`The value of a parameter can be a number, string, or a key: value dictionary.\nThe body of a Template can reference its parameters like so `}<inlineCode parentName=\"p\">{`%(parameterName)s`}</inlineCode>{`.`}</p>\n    <p>{`When assigning a value to the parameters of a template via the `}<inlineCode parentName=\"p\">{`execute[].args`}</inlineCode>{` dictionary`}</p>\n    <p>{`In `}<inlineCode parentName=\"p\">{`execute[].args`}</inlineCode>{` you:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`must`}</strong>{` provide values for any parameters in the child `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which do not have default values`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` override the value of the parameters in `}<inlineCode parentName=\"li\">{`$template`}</inlineCode>{` which have default values`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use `}<inlineCode parentName=\"li\">{`OutputReferences`}</inlineCode>{` to indicate dependencies to steps (definition follows this bullet list)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use `}<inlineCode parentName=\"li\">{`%(parentParameter)s`}</inlineCode>{` to indicate a dependency to the value that the parent parameter has. In turn that can be a dependency to the output of a Template instance or an input file or it might just be a literal constant`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use a `}<inlineCode parentName=\"li\">{`$key: $value`}</inlineCode>{` dictionary to propagate a dictionary-type value. At the moment Template can only reference this kind of parameters to set the value of the `}<inlineCode parentName=\"li\">{`command.environment`}</inlineCode>{` field of Components`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`may`}</strong>{` use `}<inlineCode parentName=\"li\">{`%(input.$filename)s`}</inlineCode>{`to propagate an input file reference from a parent to a step. `}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Eventually a step must apply a `}<a parentName=\"li\" {...{\n              \"href\": \"/overview/workflow-specification/#datareference\"\n            }}>{`DataReferences`}</a>{` `}<inlineCode parentName=\"li\">{`:$method`}</inlineCode>{` to the parameter to indicates it wishes to consume the input file`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h3>{`Environments`}</h3>\n    <p>{`The environment that components run in is defined in the `}<inlineCode parentName=\"p\">{`command.environment`}</inlineCode>{` field. If you don’t define anything in this section ST4SD will create a default environment containing all the environment variables of the runtime system process.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`command:\n  environment:\n    ENV-VAR1: value/for/env-var1\n    ENV-VAR2: value/for/env-var2\n    DEFAULTS: ENV-VAR3:ENV-VAR4\n`}</code></pre>\n    <p>{`The above defines an environment with 4 environment variables:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ENV-VAR1`}</inlineCode>{` whose value is `}<inlineCode parentName=\"li\">{`value/for/env-var1`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ENV-VAR2`}</inlineCode>{` whose value is `}<inlineCode parentName=\"li\">{`value/for/env-var2`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ENV-VAR3`}</inlineCode>{` whose value is inherited from the environment variable `}<inlineCode parentName=\"li\">{`ENV-VAR3`}</inlineCode>{` of the process running the runtime system`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ENV-VAR4`}</inlineCode>{` whose value is inherited from the environment variable `}<inlineCode parentName=\"li\">{`ENV-VAR4`}</inlineCode>{` of the process running the runtime system`}</li>\n    </ul>\n    <p>{`In the above example, we use the `}<inlineCode parentName=\"p\">{`DEFAULTS`}</inlineCode>{` directive to inherit the values for a list of environment variables from the environment variables of the runtime system process. The value of the special “DEFAULTS” key is a list of environment variable name separated with ”:“.`}</p>\n    <p>{`Want to find out more? Check out our `}<a parentName=\"p\" {...{\n        \"href\": \"#example\"\n      }}>{`example`}</a>{`.`}</p>\n    <h3>{`OutputReference`}</h3>\n    <p>{`The format of an `}<inlineCode parentName=\"p\">{`OutputReference`}</inlineCode>{` is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<$stepId>/$optionalPath:$optionalMethod\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`$stepId`}</inlineCode>{` is a `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` separated array of `}<inlineCode parentName=\"p\">{`stepNames`}</inlineCode>{` starting from the scope of the current workflow. For example, the OutputReference `}<inlineCode parentName=\"p\">{`<one/child>/file.txt:ref`}</inlineCode>{` resolves to the absolute path of the file `}<inlineCode parentName=\"p\">{`file.txt`}</inlineCode>{` that the component `}<inlineCode parentName=\"p\">{`child`}</inlineCode>{` produces under the sibling step `}<inlineCode parentName=\"p\">{`one`}</inlineCode>{` which is an instance of a Workflow template. You can find more reference `}<inlineCode parentName=\"p\">{`methods`}</inlineCode>{` in our `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification/#datareference\"\n      }}>{`DataReferences`}</a>{` docs.`}</p>\n    <h1>{`Example`}</h1>\n    <p>{`Here is a simple example which uses one Workflow and one Component template two run 2 tasks.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`consume-input: prints the contents of an input file called `}<inlineCode parentName=\"li\">{`my-input.db`}</inlineCode></li>\n      <li parentName=\"ul\">{`consume-sibling: prints the text “my sibling said” followed by stdout of the sibling step `}<inlineCode parentName=\"li\">{`<consume-input>`}</inlineCode>{` `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: main\n  execute:\n  - target: <entry-instance>\nworkflows:\n- signature:\n    name: main\n    parameters:\n    # special variable with auto-populated value\n    - name: input.my-input.db\n  steps:\n    consume-input: echo\n    consume-sibling: echo\n  execute:\n    - target: <consume-input>\n      args:\n        # resolves to the contents of the file \n        # that input.my-input-d points to\n        message: \"%(input.my-input.db)s:output\"\n    - target: <consume-sibling>\n      args:\n        # resolves to the stdout of step consume-input\n        message: \"my sibling said <consume-input>:output\"\ncomponents:\n- signature:\n    name: echo\n    parameters:\n      - name: message\n  command:\n    executable: \"echo\"\n    arguments: \"%(message)s\"\n`}</code></pre>\n    <p>{`To try it out, store the above DSL in a file called `}<inlineCode parentName=\"p\">{`dsl-params.yaml`}</inlineCode>{` and run`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`pip install \"st4sd-runtime-core[develop]>=2.5.0\"\n`}</code></pre>\n    <p>{`which installs the command-line-tool elaunch.py, followed by:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo \"hello world\" >my-input.db\nelaunch.py -i my-input.db --failSafeDelays=no -l40 dsl-params.yaml\n`}</code></pre>\n    <h2>{`Key outputs`}</h2>\n    <p>{`All experiments produce files, but not all generated files are equally important. To this end ST4SD has the concept of key-outputs. These are files, and directories, that an experiment produces which the developers of the experiment consider important.`}</p>\n    <p>{`Here is a an example of an experiment with a key-output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: hello\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n  output:\n    - name: greeting\n      data-in: <entry-instance>:output\n      description: just a friendly greeting\n\ncomponents:\n- signature:\n    name: hello\n    parameters:\n      - name: message\n  command:\n    executable: echo\n    arguments: \"%(message)s\"\n\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`output`}</inlineCode>{` field in the `}<inlineCode parentName=\"p\">{`entrypoint`}</inlineCode>{` dictionary defines the key-outputs of this experiment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  # ... other fields ...\n  output:\n    - name: greeting\n      data-in: <entry-instance>:output\n`}</code></pre>\n    <p>{`This experiment has a single key-output called `}<inlineCode parentName=\"p\">{`greeting`}</inlineCode>{`. The data associated with this key-output is actually the `}<inlineCode parentName=\"p\">{`stdout`}</inlineCode>{` of the `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{` step which is an instance of the `}<inlineCode parentName=\"p\">{`hello`}</inlineCode>{` component. As the experiment finishes producing this key-output the `}<inlineCode parentName=\"p\">{`$INSTANCE_DIR/output/output.json`}</inlineCode>{` file is updated to reflect the state of this experiment.`}</p>\n    <p>{`Here’s an how the `}<inlineCode parentName=\"p\">{`output.json`}</inlineCode>{` file will look like for the above key outputs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"greeting\": {\n        \"creationtime\": \"1725374555.6836693\",\n        \"description\": \"just a friendly greeting\",\n        \"filename\": \"out.stdout\",\n        \"filepath\": \"stages/stage0/entry-instance/out.stdout\",\n        \"final\": \"yes\",\n        \"production\": \"yes\",\n        \"type\": \"\",\n        \"version\": \"1\"\n    }\n}\n`}</code></pre>\n    <p>{`While the experiment is running, the runtime system asynchronously updates this file with metadata about the generated key-outputs of the experiment. In this example, there is just one key-output called `}<inlineCode parentName=\"p\">{`greeting`}</inlineCode>{`. For more information on key-outputs check out our `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification#key-outputs\"\n      }}>{`documentation`}</a>{`.`}</p>\n    <p>{`If you are running experiments on the cloud and are instructing the runtime system to register them into the ST4SD datastore you may also use the ST4SD python API to `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/running-workflows-on-openshift#retrieving-the-outputs-of-a-virtual-experiment-instance\"\n      }}>{`download`}</a>{` the key-outputs of your experiment instances.`}</p>\n    <h2>{`Interface`}</h2>\n    <p>{`Key outputs are not always immediately parseable without deep understanding of their format. To address this, ST4SD supports the `}<strong parentName=\"p\">{`interface`}</strong>{` feature. This feature allows workflow developers to extract measured properties and store them in a CSV file, making the data easier to consume.`}</p>\n    <p>{`Some virtual experiments define interfaces which make it simpler for users to retrieve the input systems and measured properties from executions of that virtual experiment.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` of a virtual experiment defines:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The specification used to describe `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems it processes e.g. SMILEs for small molecules`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems from input data`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the values of `}<inlineCode parentName=\"li\">{`properties`}</inlineCode>{` that the virtual experiment computes`}</li>\n    </ul>\n    <p>{`Once a virtual experiment has an `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{`  ST4SD can return a `}<inlineCode parentName=\"p\">{`pandas.DataFrame`}</inlineCode>{`  containing the properties calculated by instances of the virtual experiment, as well as the ids of the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` systems that an instance processed. This functionality is provided via the `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` API and the `}<inlineCode parentName=\"p\">{`st4sd-runtime-service`}</inlineCode>{` API. See `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-a-virtual-experiment-interface\"\n      }}>{`using a virtual experiment interface`}</a>{` for further information.`}</p>\n    <p>{`In this example we will work with a virtual experiment which:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`extracts the IDs of its input systems`}</li>\n      <li parentName=\"ol\">{`has 2 key-outputs that correspond to 2 measured properties of the interface`}</li>\n      <li parentName=\"ol\">{`uses builtin hooks to extract the measured properties from the key-outputs`}</li>\n    </ol>\n    <p>{`The DSL of the experiment is :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    description: Counts vowels in words\n    inputSpec:\n      namingScheme: words\n      inputExtractionMethod:\n        csvColumn:\n          source:\n            path: input/words.csv\n          args:\n            column: word\n    propertiesSpec:\n    - name: Vowels\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: vowels\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - vowels\n    - name: Letters\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: letters\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - letters\n  output:\n    - name: vowels\n      data-in: <entry-instance/count-vowels>/vowels.csv:ref\n    - name: letters\n      data-in: <entry-instance/count-letters>/letters.csv:ref\n\n  entry-instance: main\n  execute:\n    - target: <entry-instance>\n      args:\n        words_file: input/words.csv:ref\n\nworkflows:\n  - signature:\n      name: main\n      parameters:\n        - name: words_file\n    steps:\n      count-vowels: count-vowels\n      count-letters: count-letters\n    execute:\n      - target: <count-vowels>\n        args:\n          words: \"%(words_file)s\"\n      - target: <count-letters>\n        args:\n          words: \"%(words_file)s\"\n\ncomponents:\n- signature:\n    name: count-vowels\n    parameters:\n    - name: words\n  command:\n    executable: bin/count_vowels.py\n    arguments: \"%(words)s\"\n\n- signature:\n    name: count-letters\n    parameters:\n      - name: words\n  command:\n    executable: bin/count_letters.py\n    arguments: \"%(words)s\"\n`}</code></pre>\n    <p>{`The interface contains a human readable description of the experiment under `}<inlineCode parentName=\"p\">{`entrypoint.interface.description`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    description: Counts vowels in words\n`}</code></pre>\n    <p>{`Then, in `}<inlineCode parentName=\"p\">{`entrypoint.interface.inputspec`}</inlineCode>{` it uses the builtin input extraction method `}<inlineCode parentName=\"p\">{`csvColumn`}</inlineCode>{` to extract the ids of the systems it processes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    inputSpec:\n      namingScheme: words\n      inputExtractionMethod:\n        csvColumn:\n          source:\n            path: input/words.csv\n          args:\n            column: word\n`}</code></pre>\n    <p>{`It instructs the method to read the CSV file `}<inlineCode parentName=\"p\">{`input/words.csv`}</inlineCode>{` (i.e. the input file) and treat every row of the CSV as one input system whose identifier lies in the column `}<inlineCode parentName=\"p\">{`word`}</inlineCode>{`.`}</p>\n    <p>{`Following that, it uses the builtin property extraction method `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` twice to measure its 2 properties `}<inlineCode parentName=\"p\">{`Vowels`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Letters`}</inlineCode>{` from the key-outputs `}<inlineCode parentName=\"p\">{`vowels`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`letters`}</inlineCode>{` respectively.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    propertiesSpec:\n    - name: Vowels\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: vowels\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - vowels\n    - name: Letters\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: letters\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - letters\n`}</code></pre>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/writing-a-virtual-experiment-interface#csvdataframe\"\n      }}><inlineCode parentName=\"a\">{`csvDataFrame`}</inlineCode></a>{` property extraction method expects a CSV file which has the columns `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`\\${the property name}`}</inlineCode>{`. One of the requirements for using a ST4SD interface is that the property names start with a capital letter. One of the requirements of the `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` is that there should be a column with the same name as the property name that is being extracted. Another is that there should be a column called `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{`.`}</p>\n    <p>{`In this example the components happen to produce key-output CSV files which contain a properly named column for the values of properties but instead of using the `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{` column they use the column `}<inlineCode parentName=\"p\">{`word`}</inlineCode>{`. To account for this inconsistency, the developers of the workflow use the `}<inlineCode parentName=\"p\">{`renameColumns`}</inlineCode>{` argument of the `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` property extraction method. Via `}<inlineCode parentName=\"p\">{`renameColumns`}</inlineCode>{` they instruct `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` to treat the column `}<inlineCode parentName=\"p\">{`word`}</inlineCode>{` as if it were called `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{`.`}</p>\n    <p>{`This means that you have to create a CSV file called `}<inlineCode parentName=\"p\">{`words.csv`}</inlineCode>{` and use it as an input for (via the `}<inlineCode parentName=\"p\">{`-i`}</inlineCode>{` arg) to the workflow.`}</p>\n    <p>{`You can find more information on this in the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/writing-a-virtual-experiment-interface\"\n      }}>{`creating an interface documentation`}</a>{`. Just keep in mind that this documentation was originally written with the FlowIR syntax in mind.`}</p>\n    <h2>{`Differences between DSL 2.0 and FlowIR`}</h2>\n    <p>{`There are some differences between DSL 2.0 and `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification\"\n      }}>{`FlowIR`}</a>{`.`}</p>\n    <p>{`In the current version (0.3.x) of DSL 2.0:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`we offer support for natural composition of Computational Graphs using Workflow and Component templates`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`signature`}</inlineCode>{` field replaces the `}<inlineCode parentName=\"li\">{`stage`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`references`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`override`}</inlineCode>{` fields of the component specification in FlowIR`}</li>\n      <li parentName=\"ul\">{`settings and inputs flow through parameters, we do not support global/stage environments or variables`}</li>\n      <li parentName=\"ul\">{`the fields of components can contain `}<inlineCode parentName=\"li\">{`%(parameter)s`}</inlineCode>{` references as well as component `}<inlineCode parentName=\"li\">{`%(variable)s`}</inlineCode></li>\n      <li parentName=\"ul\">{`dependencies between components are defined by referencing the output of a producer component in one parameter of the consumer component - `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/workflow-specification/#datareference\"\n        }}>{`DataReferences`}</a>{` are reserved for referencing input files only`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`the equivalent of a DataReference for Template instances is an OutputReference`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`data files and manifests`}</li>\n      <li parentName=\"ul\">{`key outputs and interface`}</li>\n    </ul>\n    <p>{`DSL 2.0 will eventually contain a superset of the FlowIR features. However, the current beta version of DSL 2.0 does not support:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`FlowIR platforms`}</li>\n      <li parentName=\"ul\">{`application-dependencies`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`however, you can use a manifest to implicitly define your application-dependencies`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","InlineNotification","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","kind","parentName","isMDXComponent"],"sourceRoot":""}