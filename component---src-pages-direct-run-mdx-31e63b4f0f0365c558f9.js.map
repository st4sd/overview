{"version":3,"file":"component---src-pages-direct-run-mdx-31e63b4f0f0365c558f9.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/direct-run.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/travis/build/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport { CarbonForIbmDotcom } from \"@carbon/pictograms-react\";\nimport { ArtTools_01 } from \"@carbon/pictograms-react\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst ExpressiveList = makeShortcode(\"ExpressiveList\");\nconst FileBackup = makeShortcode(\"FileBackup\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` command line tool executes and monitors virtual experiments. You can use it to run experiments on your laptop or on a High Performance Computing Cluster. When you submit a virtual experiment via ST4SD API it is executed by `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Running experiments with elaunch.py</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Checking if your experiment worked</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">What is the output of my experiment ?</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">What is the status of my experiment ?</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Troubleshooting</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">How do I select an execution platform ?</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">How to restart an experiment ?</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Install elaunch.py`}</h2>\n    <p>{`If you haven’t already, install the `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` python package:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`pip install \"st4sd-runtime-core[develop]\"\n`}</code></pre>\n    <h2>{`Running experiments with elaunch.py`}</h2>\n    <p>{`With elaunch.py you can run experiments - sets of files describing computational workflows - given their path: simply run `}<inlineCode parentName=\"p\">{`elaunch.py <path to experiment>`}</inlineCode>{`.`}</p>\n    <p>{`For example, you can run the workflow `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/nanopore-geometry-experiment\"\n      }}><inlineCode parentName=\"a\">{`nanopore-geometry-experiment`}</inlineCode></a>{` like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`: # Get the directory that provides input to the next command\ngit clone https://github.com/st4sd/nanopore-geometry-experiment.git\n\ncd nanopore-geometry-experiment\n\n: # Run elaunch.py specifying certain files in the directory created above\nelaunch.py --nostamp -l 40 --input docker-example/cif_files.dat \\\\\n      --applicationDependencySource=\"nanopore-database=cif:copy\" \\\\\n      nanopore-geometry-experiment.package\n`}</code></pre>\n    <p>{`The experiment should take about 5 minutes to complete. The `}<inlineCode parentName=\"p\">{`-l 40`}</inlineCode>{` option keeps the log printouts to the bare minimum so don’t worry if the command is silent for a few minutes. When the experiment completes expect to see something similar to the following text on your terminal:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2024-03-15 14:39:29.909105\ncost=0\ncreated-on=2024-03-15 14:38:04.402969\ncurrent-stage=stage3\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0', 'stage1', 'stage2', 'stage3']\ntotal-progress=1.0\nupdated=2024-03-15 14:39:33.804727\nupdated-on=2024-03-15 14:39:33.804727\n`}</code></pre>\n    <p>{`Running an experiment creates a directory which contains the outputs. In this example we set the argument `}<inlineCode parentName=\"p\">{`--nostamp`}</inlineCode>{` which instructs ST4SD to not include a timestamp in the directory it creates for the experiment. As such it creates the directory `}<inlineCode parentName=\"p\">{`nanopore-geometry-experiment.instance`}</inlineCode>{`. If you run the same command a second time elaunch.py will complain that the experiment instance already exists. Either remove the `}<inlineCode parentName=\"p\">{`--nostamp`}</inlineCode>{` argument or delete the directory and retry `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`. See Section `}<a parentName=\"p\" {...{\n        \"href\": \"#what-is-the-output-of-my-experiment\"\n      }}>{`What is the output of my experiment?`}</a>{` for more information.`}</p>\n    <h3>{`Experiment project types`}</h3>\n    <p>{`Experiments can be packaged in two different ways. One way is the `}<inlineCode parentName=\"p\">{`standalone`}</inlineCode>{` project which is the example we show above. This type of experiments only support a single virtual experiment and are best suited for workflows with many artifacts or resources that are actively changing (i.e., they have multiple commits).`}</p>\n    <p>{`Standalone projects contain:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`a `}<inlineCode parentName=\"li\">{`conf`}</inlineCode>{` directory with the experiment definition files`}</li>\n      <li parentName=\"ul\">{`(optional) a `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` directory with data files that the workflow steps can reference and the users may override at execution time`}</li>\n      <li parentName=\"ul\">{`(optional) additional custom directories that the workflow developers include for the workflow steps to reference`}</li>\n    </ul>\n    <p>{`Another type is the `}<inlineCode parentName=\"p\">{`standard`}</inlineCode>{` project. These are flexible, allowing for multiple virtual experiment definitions to be bundled together and share files, like scripts and restart hooks. They consist of`}</p>\n    <ul>\n      <li parentName=\"ul\">{`a YAML file that contains the experiment definition`}</li>\n      <li parentName=\"ul\">{`(optional) manifest YAML file listing the directories that the virtual experiment needs and where they will be accessible from when it is running.`}</li>\n    </ul>\n    <h3>{`Providing input files`}</h3>\n    <p>{`Experiments typically require inputs to function properly. To view them, you can use the command `}<inlineCode parentName=\"p\">{`einputs.py <path to experiment>`}</inlineCode>{`. Refer to the documentation of the experiment you’re trying to run to find out more about the necessary inputs. `}</p>\n    <p>{`To pass inputs to your experiment, you can use the `}<inlineCode parentName=\"p\">{`-i \\${path to input file}`}</inlineCode>{` option in `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`. In the above example we provide the input file `}<inlineCode parentName=\"p\">{`cif_files.dat`}</inlineCode>{` which is located in the directory `}<inlineCode parentName=\"p\">{`docker-example`}</inlineCode>{`.`}</p>\n    <p>{`If you want to use an input file whose name `}<strong parentName=\"p\">{`is not the same`}</strong>{` as the one the experiment expects, you must map them explicitly with `}<inlineCode parentName=\"p\">{`--input $local_path:$input_name`}</inlineCode>{`. For example, to use the contents of the file `}<inlineCode parentName=\"p\">{`/tmp/my-file.dat`}</inlineCode>{` as the input file `}<inlineCode parentName=\"p\">{`cif_files.dat`}</inlineCode>{` above you would specify `}<inlineCode parentName=\"p\">{`--input /tmp/my-file.dat:cif_files.dat`}</inlineCode>{`.`}</p>\n    <h3>{`Setting configuration options`}</h3>\n    <p>{`Experiments may also come with configuration options that you can optionally override. We call these options `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` and you can use `}<inlineCode parentName=\"p\">{`einputs.py`}</inlineCode>{` to get the list of variables (and their default) values for an experiment.`}</p>\n    <p>{`For example, here is the relevant section from the output of `}<inlineCode parentName=\"p\">{`einputs.py nanopore-geometry-experiment.package`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`optional:\n  variables:\n    global:\n      numberOfNanopores: 1\n      probeRadius_A: 1.4\n      zeo_memory: 2Gi\n`}</code></pre>\n    <p>{`Typically the experiment documentation explains what these variables control. To configure their values, put together a `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` file using the format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`global:\n  parameterName: value\n`}</code></pre>\n    <p>{`Use this variables file with your experiment by specifying the `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` argument `}<inlineCode parentName=\"p\">{`-a \\${path to variables file}`}</inlineCode>{`. Take care when formatting the `}<inlineCode parentName=\"p\">{`variables.yaml`}</inlineCode>{` file, it should follow the indentation and syntax of YAML files.`}</p>\n    <h2>{`Checking if your experiment worked`}</h2>\n    <p>{`If the experiment works `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` prints `}<inlineCode parentName=\"p\">{`exit-status=Success`}</inlineCode>{` before it terminates and then exits with return code 0. You can find more information about the status of your experiment under the file `}<inlineCode parentName=\"p\">{`\\${package_name}-\\${timestamp}.instance/output/status.txt`}</inlineCode>{`. For example, here’s a `}<inlineCode parentName=\"p\">{`status.txt`}</inlineCode>{` for a successful run of an experiment:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2024-03-15 14:39:29.909105\ncost=0\ncreated-on=2024-03-15 14:38:04.402969\ncurrent-stage=stage3\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0', 'stage1', 'stage2', 'stage3']\ntotal-progress=1.0\nupdated=2024-03-15 14:39:33.804727\nupdated-on=2024-03-15 14:39:33.804727\n`}</code></pre>\n    <p>{`If the experiment fails you will see the line `}<inlineCode parentName=\"p\">{`exit-status=Failed`}</inlineCode>{` in the logs of `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` and it will exit with a return code other than `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`. If the experiment failed after the instance directory was created you will see this information in the `}<inlineCode parentName=\"p\">{`output/status.txt`}</inlineCode>{` file too. Common reasons for failures are invalid syntax, missing input files, or requesting a compute resource that is not available. For more information and dealing with these errors see our `}<a parentName=\"p\" {...{\n        \"href\": \"#troubleshooting\"\n      }}>{`Troubleshooting`}</a>{` section.`}</p>\n    <h2>{`What is the output of my experiment ?`}</h2>\n    <p>{`All outputs of the experiment are placed in the experiment instance directory. By default, this directory is`}<inlineCode parentName=\"p\">{`\\${package-name}-\\${timestamp}.instance`}</inlineCode>{` and you will find it under the directory you were in when you ran `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`. If you specify the `}<inlineCode parentName=\"p\">{`--nostamp`}</inlineCode>{` argument then elaunch.py will not omit the `}<inlineCode parentName=\"p\">{`-\\${timestamp}`}</inlineCode>{` part.`}</p>\n    <p>{`The experiment instance directory contains several nested directories, of which the most noteworthy are `}<inlineCode parentName=\"p\">{`output`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`stages`}</inlineCode>{`. Here is the full list of directories and their description:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stages`}</inlineCode>{`: contains one directory per stage of your experiment. Each stage directory contains one directory for each of the working directories of the components in that stage. Components store any files their produce, as well as text they print to the terminal under their working directory`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`output`}</inlineCode>{`: contains the runtime logs and files with metadata about the outputs and status of your experiment`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`inputs`}</inlineCode>{`: contains the input files you provided, including any variable files`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{`: (optional) contains files that the workflow definition bundles and the workflow steps can reference. Users may optionally override those files when they launch an experiment`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`conf`}</inlineCode>{`: contains the experiment definition`}</li>\n    </ul>\n    <h3>{`The output directory`}</h3>\n    <p>{`It contains the following files:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`experiment.log: the logs of the `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` process`}</li>\n      <li parentName=\"ul\">{`status.txt: the final status of the experiment (see the status printout above for an example)`}</li>\n      <li parentName=\"ul\">{`status_details.json: Similar to above but easier to consume programmatically`}</li>\n      <li parentName=\"ul\">{`output.txt: contains metadata about key files that your experiments produce i.e. key outputs. This file gets updated when when the key named files that one of your tasks produced. It contains information such as their path relative to the root of the instance directory, modification time, etc.`}</li>\n      <li parentName=\"ul\">{`output.json: Similar to above but easier to consume programmatically`}</li>\n      <li parentName=\"ul\">{`properties.csv: (optional) If your experiment defines its `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/using-a-virtual-experiment-interface\"\n        }}>{`interface`}</a>{`, then this file contains the measured properties of your experiment,`}</li>\n      <li parentName=\"ul\">{`input-ids.json: (optional) If your experiment defines its `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/using-a-virtual-experiment-interface\"\n        }}>{`interface`}</a>{`, then this file contains an array with the input ids that your experiment processed`}</li>\n      <li parentName=\"ul\">{`additional_input_data.json: (optional) If your experiment defines its interface, then this file contains dictionary whose keys are input ids and values are additional input data (e.g. absolute paths) associated with the corresponding input id`}</li>\n    </ul>\n    <h3>{`The stages directory`}</h3>\n    <p>{`A virtual experiment is a computational workflow that executes tasks. Task outputs are organized under the `}<inlineCode parentName=\"p\">{`stages`}</inlineCode>{` directory like so: `}<inlineCode parentName=\"p\">{`stages/stage{$index}/\\${task-name}`}</inlineCode>{`. To find out the tasks that are in your experiment read the  experiment definition or look at the file structure of the `}<inlineCode parentName=\"p\">{`stages`}</inlineCode>{` directory.`}</p>\n    <p>{`Components specify which stage they belong to and by default they are all part of stage `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`. Generally, stages help you create logical groups of components. They do not really play a role in scheduling decisions, except for some special cases which are outside the scope of the information in this document`}</p>\n    <h3>{`Understanding an experiment’s execution requirements`}</h3>\n    <p>{`The experiment documentation should explain what is required to execute it. For example, an experiment contains a set of tasks and elaunch.py submits those tasks to the backends that the tasks select. This means that if the machine on which you run elaunch.py does not support the backend that a task selects then elaunch.py cannot run that task.`}</p>\n    <h3>{`How to run elaunch with LSF ?`}</h3>\n    <p>{`Some experiments can launch tasks on using the batch scheduler LSF (IBM Spectrum). If an experiment supports execution on LSF it should say so in its documentation and explain how to launch using it.`}</p>\n    {/*NOTE maybe something you can run that tells you which backend tasks need (and whether they're available???)*/}\n    <p>{`To launch an experiment that supports LSF you need to also install the official `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBMSpectrumComputing/lsf-python-api\"\n      }}><inlineCode parentName=\"a\">{`lsf-python-api`}</inlineCode></a>{` python module:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`. /path/to/profile.lsf\ngit clone https://github.com/IBMSpectrumComputing/lsf-python-api.git\ncd lsf-python-api\npython3 setup.py build\npython3 setup.py install\n`}</code></pre>\n    <p>{`Check the homepage of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBMSpectrumComputing/lsf-python-api\"\n      }}><inlineCode parentName=\"a\">{`lsf-python-api`}</inlineCode></a>{` for more information.`}</p>\n    <h3>{`How to override experiment configuration data files`}</h3>\n    <p>{`Experiments may optionally bundle data files which you may override. The experiment documentation should explain what these files are and what your options are for overriding. Additionally `}<inlineCode parentName=\"p\">{`einputs.py`}</inlineCode>{` displays the names of the data files that an experiment references.`}</p>\n    <h3>{`Store outputs to S3`}</h3>\n    <p>{`Experiments may optionally upload their `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/tutorial#key-outputs\"\n      }}><inlineCode parentName=\"a\">{`key-outputs`}</inlineCode></a>{` to S3 after termination. You can instruct `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` to upload these files to S3 using the `}<inlineCode parentName=\"p\">{`--s3StoreToURI`}</inlineCode>{` parameter. When using this parameter, you must also specify exactly one of the parameters `}<inlineCode parentName=\"p\">{`--s3AuthWithEnvVars`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`--s3AuthBearer64`}</inlineCode>{`.`}</p>\n    <h3>{`Example:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export bucket=\"a-bucket\"\nexport path_in_bucket=\"optional/path\"\n\nexport S3_ACCESS_KEY_ID=\"s3 access key id\"\nexport S3_SECRET_ACCESS_KEY=\"s3 secret access key\"\nexport S3_END_POINT=\"s3 end point\"\n\nelaunch.py --s3StoreToURI s3://\\${bucket}/\\${path_in_bucket} \\\\\n  --s3AuthWithEnvVars path/to/experiment\n`}</code></pre>\n    <p>{`When `}<inlineCode parentName=\"p\">{`--s3StoreToURI`}</inlineCode>{` is set, after the experiment terminates, `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` will start uploading the `}<inlineCode parentName=\"p\">{`key-outputs`}</inlineCode>{` to the S3 bucket you provided under the specified `}<inlineCode parentName=\"p\">{`\\${path_in_bucket}`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` replaces occurrences of the `}<inlineCode parentName=\"p\">{`%(instanceDir)s`}</inlineCode>{` literal in `}<inlineCode parentName=\"p\">{`--s3StoreToURI`}</inlineCode>{` with the name of the experiment instance. For example, you can use this to store the `}<inlineCode parentName=\"p\">{`key-outputs`}</inlineCode>{` of multiple workflow instances in the same bucket.`}</p>\n    <p>{`Alternatively, you can base64-encode the JSON representation of the dictionary `}<inlineCode parentName=\"p\">{`{\"S3_ACCESS_KEY_ID\": \"val\", \"S3_SECRET_ACCESS_KEY\": \"val\", \"S3_END_POINT\": \"val\"}`}</inlineCode>{` and use the `}<inlineCode parentName=\"p\">{`--s3AuthBearer64`}</inlineCode>{` parameter instead:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export bucket=\"a-bucket\"\nexport path_in_bucket=\"optional/path\"\nexport json=\"{\\\\\"S3_ACCESS_KEY_ID\\\\\": \\\\\"val\\\\\", \\\\\"S3_SECRET_ACCESS_KEY\\\\\": \\\\\"val\\\\\", \\\\\"S3_END_POINT\\\\\": \\\\\"val\\\\\"}\"\nexport s3_auth=\\`echo \"\\${json}\" | base64\\`\n\nelaunch.py --s3StoreToURI s3://\\${bucket}/\\${path_in_bucket} \\\\\n  --s3AuthBearer64 path/to/experiment\n`}</code></pre>\n    <h2>{`What is the status of my experiment ?`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` script will periodically store information about the status of your experiment instance under its `}<inlineCode parentName=\"p\">{`$instanceDir`}</inlineCode>{` directory. You can use `}<inlineCode parentName=\"p\">{`einspect.py`}</inlineCode>{` to see the current status of tasks in your experiment instance.`}</p>\n    <p>{`Here is an example output of running `}<inlineCode parentName=\"p\">{`einspect.py`}</inlineCode>{` after a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/sum-numbers\"\n      }}><inlineCode parentName=\"a\">{`sum-numbers`}</inlineCode></a>{` experiment terminates.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cd sum-numbers-2024-03-15T143804.402969.instance\neinspect.py -f all\n\n\nWARNING   MainThread                     root                          : <module>             2024-03-15 14:39:50,782: No instance given - checking if inside one\n\n========== STAGE 0 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage0.GenerateInput, finished, local, True, Success, 0:00:00.241827, finished\n\n========== STAGE 1 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage1.ExtractRow0, finished, local, True, Success, 0:01:00.197737, finished\nstage1.ExtractRow1, finished, local, True, Success, 0:01:00.227356, finished\nstage1.ExtractRow2, finished, local, True, Success, 0:01:00.208578, finished\nstage1.PartialSum0, finished, local, True, Success, 0:00:00.368524, finished\nstage1.PartialSum1, finished, local, True, Success, 0:00:00.385971, finished\nstage1.PartialSum2, finished, local, True, Success, 0:00:00.410082, finished\n\n========== STAGE 2 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage2.Sum, finished, local, True, Success, 0:00:00.061634, finished\n\n========== STAGE 3 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage3.Cat, finished, local, True, Success, 0:00:00.013691, finished\n`}</code></pre>\n    <p>{`You may also see a summary of your status in the `}<inlineCode parentName=\"p\">{`$instanceDir/output/status.txt`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2024-03-15 14:39:29.909105\ncost=0\ncreated-on=2024-03-15 14:38:04.402969\ncurrent-stage=stage3\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0', 'stage1', 'stage2', 'stage3']\ntotal-progress=1.0\nupdated=2024-03-15 14:39:33.804727\nupdated-on=2024-03-15 14:39:33.804727\n`}</code></pre>\n    <p>{`The current status of your experiment is the value of `}<inlineCode parentName=\"p\">{`exit-status`}</inlineCode>{`.`}</p>\n    <h2>{`Troubleshooting`}</h2>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`exit-status`}</inlineCode>{` of your experiment instance is `}<inlineCode parentName=\"p\">{`Failed`}</inlineCode>{` then this means that at least one of your components was unable to terminate successfully. You can find the name of the component that caused the experiment to fail in the `}<inlineCode parentName=\"p\">{`status`}</inlineCode>{` file and printout.`}</p>\n    <p>{`Here is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2024-05-23 09:44:03.757679\ncost=0\ncreated-on=2024-05-23 09:42:19.223491\ncurrent-stage=stage1\nerror-description=Stage 1 failed. Reason:\\\\\\\\\\\\\\\\n3 jobs failed unexpectedly.\\\\\\\\\\\\\\\\nJob: stage1.PartialSum0. Returncode 1. Reason KnownIssue\\\\\\\\\\\\\\\\nJob: stage1.PartialSum2. Returncode 1. Reason KnownIssue\\\\\\\\\\\\\\\\nJob: stage1.PartialSum1. Returncode 1. Reason KnownIssue\\\\\\\\\\\\\\\\n\nexit-status=Failed\nexperiment-state=finished\nstage-progress=0.5\nstage-state=failed\nstages=['stage0', 'stage1', 'stage2', 'stage3']\ntotal-progress=0.875\nupdated=2024-05-23 09:44:08.793316\nupdated-on=2024-05-23 09:44:08.793316\n`}</code></pre>\n    <p>{`The error reports that multiple components failed: `}<inlineCode parentName=\"p\">{`stage1.PartialSum0`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`stage1.PartialSum1`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`stage1.PartialSum2`}</inlineCode>{`.`}</p>\n    <p>{`You may also get a full view of the state of the experiment by using the `}<inlineCode parentName=\"p\">{`einspect.py -f all`}</inlineCode>{` tool.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`========== STAGE 0 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage0.GenerateInput, finished, local, True, Success, 0:00:00.358677, finished\n\n========== STAGE 1 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage1.ExtractRow0, finished, local, True, Success, 0:01:00.246955, finished\nstage1.ExtractRow1, finished, local, True, Success, 0:01:00.209115, finished\nstage1.ExtractRow2, finished, local, True, Success, 0:01:00.226946, finished\nstage1.PartialSum0, failed, local, True, KnownIssue, 0:00:00.323739, failed\nstage1.PartialSum1, failed, local, True, KnownIssue, 0:00:00.336899, failed\nstage1.PartialSum2, failed, local, True, KnownIssue, 0:00:00.360914, failed\n\n========== STAGE 2 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage2.Sum, component_shutdown, local, False, Killed, N/A, N/A\n\n========== STAGE 3 ==========\n\nComponents using engine-type: engine\nreference, state, backend, isWaitingOnOutput, engineExitReason, lastTaskRunTime, lastTaskRunState\nstage3.Cat, finished, local, True, Success, 0:00:00.011466, finished\n`}</code></pre>\n    <p>{`After you spot a `}<inlineCode parentName=\"p\">{`Failed`}</inlineCode>{` component, try looking at the files it produced, including its stdout and stderr (for some backends both streams get fed into stdout). Recall that you can find these files under `}<inlineCode parentName=\"p\">{`$INSTANCE_DIR/stages/stage<stage index>/<component name>/`}</inlineCode>{`. Look for the `}<inlineCode parentName=\"p\">{`out.stdout`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`out.stderr`}</inlineCode>{` files.`}</p>\n    <p>{`Sometimes, a component fails because one of its predecessors (direct, or indirect) produced unexpected output. To find the predecessors of a component, look at the `}<inlineCode parentName=\"p\">{`$INSTANCE_DIR/conf/flowir_instance.yaml`}</inlineCode>{`, locate the component you are investigating and then follow its predecessors by looking at the `}<inlineCode parentName=\"p\">{`references`}</inlineCode>{` of the component. You can then investigate the output files and stdout/stderr of those components to see if you can spot why the downstream component failed.`}</p>\n    <p>{`Advanced experiments may also use `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/restart#customizing-the-restart-process\"\n      }}>{`Restart Hooks`}</a>{` to customize the restart logic of components. Additionally, a restart hook may print logs to the terminal using a logger that is associated with the execution engine of the component it controls. These logs will contain the text `}<inlineCode parentName=\"p\">{`eng.\\${lowercase of the component reference}`}</inlineCode>{`. For example, the logger of the component `}<inlineCode parentName=\"p\">{`Foo`}</inlineCode>{` in stage `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` will contain the text `}<inlineCode parentName=\"p\">{`eng.stage0.foo`}</inlineCode>{` in its logs. You can find the logs of the restart hooks in the terminal output of the `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` process (which is also archived under `}<inlineCode parentName=\"p\">{`$INSTANCE_DIR/output/experiment.log`}</inlineCode>{`).`}</p>\n    <h2>{`How do I select an execution platform ?`}</h2>\n    <p>{`Often, workflows have support for multiple execution environments such as Cloud (e.g. Kubernetes/OpenShift), HPC, or even personal devices like laptops.\nST4SD uses the concept of execution platform to help workflow developers define how their workflows should execute under different execution environments.\nPlatforms are designed to assist in implementing generic components which are specialized for different purposes when specifying different platforms. This is particularly useful when working with packages that can utilize various kinds of HPC resources (e.g. a cluster fitted with LSF, a kubernetes installation, etc). For example, a component can be configured to utilize a certain amount of GPUs when it targets platform A but exclusively use CPUs on platform B. You can find more information about platforms `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification#platforms\"\n      }}>{`in our docs`}</a>{`.`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`einputs.py <path to package>`}</inlineCode>{` to find a list of the platforms that an experiment supports. The experiment documentation should explain the requirements for executing the experiment with any of the platforms. To select a platform use the `}<inlineCode parentName=\"p\">{`--platform`}</inlineCode>{` commandline argument of `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`. If you don’t provide the commandline parameter `}<inlineCode parentName=\"p\">{`--platform`}</inlineCode>{` then `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` will select the platform called `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` which is the default platform of experiments.`}</p>\n    <h2>{`How to restart an experiment ?`}</h2>\n    <p>{`Sometimes it’s useful to restart a previously completed experiment instance instead of starting a brand new instance. For example, you can modify a script that a component in the instance used and then restart all components starting from a specific stage index and onwards.`}</p>\n    <p>{`To restart an existing instance from a given stage index use `}<inlineCode parentName=\"p\">{`elaunch.py --restart <stageindex> ... path/to/dir.instance`}</inlineCode>{`. All components from stage `}<inlineCode parentName=\"p\">{`<stageindex>`}</inlineCode>{` and onwards will be restarted. This means that `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` will run the logic of their `}<inlineCode parentName=\"p\">{`restart hook`}</inlineCode>{` and may re-run a component depending on the output of the restart method. Use the `}<inlineCode parentName=\"p\">{`--noRestartHooks`}</inlineCode>{` option with `}<inlineCode parentName=\"p\">{`--restart`}</inlineCode>{` to skip the restart hook logic and re-run the components. Find out more information about `}<inlineCode parentName=\"p\">{`restart`}</inlineCode>{` hooks in `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/restart\"\n      }}>{`our docs`}</a>{`.`}</p>\n    <h2>{`Learn more`}</h2>\n    <ExpressiveList title=\"Write experiments\" background=\"true\" pictogram={<FileBackup mdxType=\"FileBackup\" />} mdxType=\"ExpressiveList\">\n      <p>{`Get an introduction to `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/write-experiments\"\n        }}>{`writing virtual experiment`}</a>{` with ST4SD Core.`}</p>\n  </ExpressiveList>\n    <div className=\"expressive-content-list-group\">\n  <ExpressiveList title=\"Exploring the Registry UI\" background=\"true\" pictogram={<CarbonForIbmDotcom mdxType=\"CarbonForIbmDotcom\" />} mdxType=\"ExpressiveList\">\n        <p>{`Learn about all the features of\n`}<a parentName=\"p\" {...{\n            \"href\": \"/overview/using-the-virtual-experiments-registry-ui\"\n          }}>{`our web interface`}</a>{` for browsing and\nexamining virtual experiments packages and runs. You can visit the\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://registry.st4sd.res.ibm.com/\"\n          }}>{`ST4SD Global Registry`}</a>{` for a first look.`}</p>\n  </ExpressiveList>\n  <ExpressiveList title=\"No Code, No Fuss creation of Experiments\" background=\"true\" pictogram={<ArtTools_01 mdxType=\"ArtTools_01\" />} mdxType=\"ExpressiveList\">\n        <p>{`Use\n`}<a parentName=\"p\" {...{\n            \"href\": \"/overview/build-experiments-registry-ui\"\n          }}>{`an interactive Build Canvas and a Graph Library`}</a>{`\nto create and modify experiments straight from your browser.`}</p>\n  </ExpressiveList>\n    </div>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","AnchorLinks","AnchorLink","ExpressiveList","FileBackup","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","title","background","pictogram","className","CarbonForIbmDotcom","ArtTools_01","isMDXComponent"],"sourceRoot":""}