{"version":3,"file":"component---src-pages-creating-a-parameterised-package-mdx-5cced2fc5c9a421a4cee.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/creating-a-parameterised-package.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/vassiliad/projects/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this page to learn what parameterised virtual experiment packages are and how to create them.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">What is a parameterised virtual experiment package?</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Structure of a parameterised virtual experiment package</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">The Base section</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">The Metadata section</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">The Parameterisation section</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Adding a parameterised package to a registry</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Example</AnchorLink>\n    </AnchorLinks>\n    <p>{`A `}<inlineCode parentName=\"p\">{`parameterised virtual experiment`}</inlineCode>{`defines how to run a virtual experiment in a particular way.`}</p>\n    <p>{`ST4SD provides a registry for parameterised virtual experiments.\nThe registry allows researchers to browse and use these packages.\nEach ST4SD deployment has a registry and we also maintain `}<a parentName=\"p\" {...{\n        \"href\": \"https://registry.st4sd.res.ibm.com/\"\n      }}>{`a publicly available registry`}</a>{`.`}</p>\n    <p>{`This document explains how developers can write  parameterised virtual experiment package.\nFor how these packages can be used by others see `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-the-virtual-experiments-registry-ui\"\n      }}>{`using the virtual experiment registry`}</a>{`.`}</p>\n    <h2>{`What is a parameterised virtual experiment package?`}</h2>\n    <p>{`A parameterised virtual experiment package is a python dictionary (or YAML or JSON structure) that describes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`How to access a virtual experiment`}</li>\n      <li parentName=\"ul\">{`What options to allow users to change`}</li>\n      <li parentName=\"ul\">{`What options have preset values`}</li>\n      <li parentName=\"ul\">{`Metadata about the package.`}</li>\n    </ul>\n    <p>{`It is `}<strong parentName=\"p\">{`parameterised`}</strong>{` as the package can set the values of options in the base experiment to give certain behaviours e.g. setting a quantum method known to be fast, that can’t be overridden by the user.\nThe package can also specify a restricted set of values for an option.\nIn this way the same base virtual experiment can be configured in many ways and provide different parameterised packages for different tasks.`}</p>\n    <h2>{`Structure of a parameterised virtual experiment package`}</h2>\n    <p>{`A parameterised package has three main sections:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`(Required) The base packages (i.e. workflow definitions) that the virtual experiment consists of.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Where they are located, what version to get, and how to get them. Often there will be just one.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`(Required) Metadata:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Various other information about the package e.g. description, license, maintainer and keywords.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`(Optional) The parameterisation information:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Presets: options that  users cannot change.`}</li>\n          <li parentName=\"ul\">{`Execution options: options that users can change potential with some restrictions.`}</li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`Each of these is a top-level key in the package description.\nThe following snippet shows this top-level structure:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{\n    \"base\": {\n        # Required: Base package information ...\n    }\n    \"metadata\": {\n        # Required: Various info about the package  ...\n    },\n    \"parameterisation\": {\n        # Optional: What values are set and what can be changed ..\n    }\n}\n`}</code></pre>\n    <h2>{`The parameterised virtual experiment package identifier (PVEP Identifier)`}</h2>\n    <p>{`The naming schema of a parameterised virtual experiment package (PVEP) is similar to that of container images.`}</p>\n    <p>{`The identifier of a PVEP is the name of the PVEP followed by either a `}<inlineCode parentName=\"p\">{`@\\${digest hash}`}</inlineCode>{` or a `}<inlineCode parentName=\"p\">{`:\\${tag name}`}</inlineCode>{`.\nThe latest pushed version of a PVEP is always accessible via `}<inlineCode parentName=\"p\">{`\\${name of PVEP}:latest`}</inlineCode>{` or simply `}<inlineCode parentName=\"p\">{`\\${name of PVEP}`}</inlineCode>{`.`}</p>\n    <p>{`For the identifier `}<inlineCode parentName=\"p\">{`\\${name}:\\${tag name}`}</inlineCode>{` to point to a version of a PVEP, the PVEP should specify the `}<inlineCode parentName=\"p\">{`\\${tag name}`}</inlineCode>{` under the field `}<inlineCode parentName=\"p\">{`metadata.package.tags`}</inlineCode>{`.\nBelow, is an example of a PVEP called `}<inlineCode parentName=\"p\">{`my-experiment`}</inlineCode>{` which specifies 2 tags: `}<inlineCode parentName=\"p\">{`foo`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{\n    \"base\": {...},\n    \"metadata\": {\n        \"package\": {\n            \"name\": \"my-experiment\",\n            \"tags\": [\n                \"foo\", \"bar\"\n            ]\n        }\n    },\n    ...\n}\n`}</code></pre>\n    <p>{`When pushing the above PVEP to the ST4SD registry the following identifiers will automatically point to this version of the PVEP:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment:latest`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment:foo`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment:bar`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment@sha256x60de8e469c486ddd3bd4d2c521518e932964a36296b08758a94b9a4f`}</inlineCode>{` (the ST4SD registry auto-generates the digest hash and stores it under the metadata field `}<a parentName=\"li\" {...{\n          \"href\": \"#the-metadata.registry-section\"\n        }}>{`metadata.registry.digest`}</a>{`).`}</li>\n    </ul>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Notice that `}<inlineCode parentName=\"p\">{`my-experiment`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`my-experiment:latest`}</inlineCode>{` are automaticaly configured to point to this version of the PVEP regardless of whether `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` exists in `}<inlineCode parentName=\"p\">{`metadata.package.tags`}</inlineCode>{` or not.`}</p>\n    </InlineNotification>\n    <p>{`Any pre-existing versions of the `}<inlineCode parentName=\"p\">{`my-experiment`}</inlineCode>{` PVEP which have any of the tags in this version of the PVEP will be automatically modified such that the tags point to this new version of the experiment instead. This operation is similar to pushing a new container image `}<inlineCode parentName=\"p\">{`my-image:foo`}</inlineCode>{` that overrides an existing container image tagged `}<inlineCode parentName=\"p\">{`my-image:foo`}</inlineCode>{`.`}</p>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"#the-metadata.package-section\"\n      }}>{`metadata.package`}</a>{` section for more information on configuring the name and tags of PVEPs.`}</p>\n    <p>{`The rest of this document explains each section, outlining what information is required and optional.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`In the following we use YAML to describe the section structure, for ease of explanation. This would have to be converted to a python dictionary to upload to the registry. An example of doing this is given in the `}<a parentName=\"p\" {...{\n          \"href\": \"#pushing-the-package\"\n        }}>{`pushing a package`}</a>{` section.`}</p>\n    </InlineNotification>\n    <h2>{`The Base section`}</h2>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Sources</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Specifying image registry dependencies</AnchorLink>\n    </AnchorLinks>\n    <p>{`The `}<inlineCode parentName=\"p\">{`base`}</inlineCode>{` section describes where the base virtual experiment is and how to access it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`base:\n  packages:\n  - $PACKAGE_DEFINITION\n`}</code></pre>\n    <p>{`A virtual experiment can contain multiple base packages although for handwritten packages this will usually be one.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`packages:\n- name: # OPTIONAL - defaults to \"main\", is required\n        # for multi-package experiments\n  source:\n     #REQUIRED: ONE package source type. See below for options\n     $PACKAGE_SOURCETYPE: $PACKAGE_SOURCE_STRUCTURE\n  config:\n    # How to read the experiment from the given source e.g. manifest etc.\n    # config is REQUIRED IF the base virtual experiment uses standard\n    # packaging (is a workflow conf + manifest)\n    path: # relative (to the \"root\" of \\`\\${BASE_PACKAGE}.source\\`)\n          # path to the virtual experiment (flowir) configuration file\n    manifestPath: # path to the virtual experiments manifest file\n                  # relative to \"root\" of \\`\\${BASE_PACKAGE}.source\\`\n  dependencies:\n    imageRegistries:\n      #OPTIONAL: list of image registry structures defining how to access\n      # the images required by the experiment. See below for options.\n      - $IMAGE_REGISTRY_STRUCTURE\n`}</code></pre>\n    <h3>{`Sources`}</h3>\n    <p>{`Select the source that matches where your virtual experiment is stored`}</p>\n    <h4>{`Git source`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Yaml\"\n      }}>{`git:\n  location:\n    url: the http url of the repo\n    # Must specify exactly ONE of branch, tag, and commit\n    branch: name of branch\n    tag: name of tag\n    commit: git commit hash\n  security:\n    oauth:\n      # You must use exactly ONE of \\`value\\` or \\`valueFrom\\`.\n      # \"value\" if automatically converted to \"valueFrom.secretKeyRef\\`\n      # when you push the package\n      valueFrom:\n        secretKeyRef:\n          name: name of secret containing oauthSecret key\n          key: name of key holding the token, defaults to \"oauth-token\"\n      value: an oauth api key for authenticating to git with\n             HTTPS basic auth\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`ST4SD will use the oauth-token you provide to `}<inlineCode parentName=\"p\">{`git clone https://\\${oauth-token}@server.com/your-org/your-repo.git`}</inlineCode>{`.`}</p>\n      <p>{`If you are using `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic\"\n        }}>{`Github`}</a>{` to host your git repository you can generate a Personal Access Token with just read-access to your git repository.`}</p>\n      <p>{`If you are using Gitlab, use either a `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token\"\n        }}>{`project access token`}</a>{` or a `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.gitlab.com/ee/user/project/deploy_tokens/#create-a-deploy-token\"\n        }}>{`deploy token`}</a>{` with read access permissions to your Gitlab project. Make sure you create a token with the “Developer” role that has “read_repository” permissions.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Remember to prefix your Token with your Username followed by a ”:” character`}</p>\n    </InlineNotification>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`security:\n  oauth:\n     value: \"\\${Username}:\\${PersonalAccessToken}\"\n`}</code></pre>\n    <h4>{`Datashim source`}</h4>\n    <p>{`If you have installed `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/datashim-io/datashim\"\n      }}>{`Datashim`}</a>{` on your cluster, you can use a Datashim `}<inlineCode parentName=\"p\">{`dataset`}</inlineCode>{` as the location of your virtual experiment base package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`dataset:\n  # No need for a security field because Datashim removes this requirement.\n  location:\n    dataset: the name of the dataset object\n`}</code></pre>\n    <h4>{`S3 source`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`s3:\n  location:\n    region: region (optional)\n    endpoint: S3 endpoint url\n    bucket: bucket name\n  security:\n    valueFrom:\n        # Must choose exactly ONE of secretS3KeyRef and valuseS3\n        # \"valuesS3\" is automatically converted to \"secretS3KeyRef\" when you push the package\n      secretS3KeyRef:\n        name: name of existing kubernetes Secret object containing access information\n          # keyAccessKeyId has default value \"accessKeyId\"\n        keyAccessKeyId: key in Secret object that holds accessKeyId\n          # secretAccessKey has default value \"secretAccessKey\"\n        keySecretAccessKey: key in Secret object that holds secretAccessKey\n      s3Ref:\n        accessKeyId: Value of accessKeyId\n        secretAccessKey: Value of accessKeyId\n`}</code></pre>\n    <h3>{`Specifying image registry dependencies`}</h3>\n    <p>{`Virtual experiments often use images which may be stored in private registries. This structure allows the developer to provide ST4SD with information on how to access these registries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`dependencies:\n  #An Optional dictionary of dependency types\n  imageRegistries: # An optional list of image registries struct\n  - serverUrl: the url to the image registry\n    security:\n      valueFrom:\n        # Must select exactly 1 of secretKeyRef and usernamePassword\n        # \"usernamePassword\" is automatically converted to a \"secretKeyRef\" when the package is pushed\n        secretKeyRef:\n          name: name of an existing \"docker-registry\" kubernetes secret object containing the access information\n          key: Name of key containing the auth information (default is .dockerconfigjson)\n        usernamePassword:\n          # here expect fields we would use for \\`kubectl create secret docker-registry\\`\n          username: ...\n          password: ...\n\n`}</code></pre>\n    <h2>{`The Metadata section`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`metadata`}</inlineCode>{` section contains 2 fields: `}<inlineCode parentName=\"p\">{`package`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`registry`}</inlineCode>{`. The first is used to provide various other information about the parameterised virtual experiment.\nThe latter contains metadata that the registry automatically populates.`}</p>\n    <h3>{`The metadata.package section`}</h3>\n    <p>{`Populate `}<inlineCode parentName=\"p\">{`metadata.package`}</inlineCode>{` to set information about your parameterised virtual experiment package that you would like your users to know:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`metadata:\n  package: #All the maintainer metadata. Can decide exact structure at implementation time.\n    name: the package name\n    tags: # Optional\n    - latest # On Push, auto insert latest if missing\n    maintainer: email (optional)\n    license: some string (optional)\n    keywords: # optional\n    - keyword 1\n    - keyword 2\n\n`}</code></pre>\n    <h3>{`The metadata.registry section`}</h3>\n    <p>{`Read the `}<inlineCode parentName=\"p\">{`metadata.registry`}</inlineCode>{` section to get information that the ST4SD registry automatically extracts from your parameterised virtual experiment package:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`digest: (str) A uid of this parameterised virtual experiment package. See `}<a parentName=\"li\" {...{\n          \"href\": \"#the-parameterised-virtual-experiment-package-identifier-(pvep-identifier)\"\n        }}>{`PVEP identifier`}</a></li>\n      <li parentName=\"ul\">{`createdOn: (str) UTC time that this digest was created, format is `}<inlineCode parentName=\"li\">{`%Y-%m-%dT%H%M%S.%f%z`}</inlineCode></li>\n      <li parentName=\"ul\">{`tags: The tags associated with this PVEP. This is a `}<strong parentName=\"li\">{`subset`}</strong>{` of `}<inlineCode parentName=\"li\">{`metadata.package.tags`}</inlineCode>{`. It can be `}<strong parentName=\"li\">{`empty`}</strong>{` if no tag points to this digest anymore. See `}<a parentName=\"li\" {...{\n          \"href\": \"#the-parameterised-virtual-experiment-package-identifier-(pvep-identifier)\"\n        }}>{`PVEP identifier`}</a></li>\n      <li parentName=\"ul\">{`timesExecuted: (int) - automatically increased every time a user launches this virtual experiment entry`}</li>\n      <li parentName=\"ul\">{`interface: (dictionary)  ST4SD injects the Virtual experiment interface if it exists`}</li>\n      <li parentName=\"ul\">{`data: (array of object) Information about the filenames under the `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` directory`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`name: (str) the name of the data file`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`inputs: (array of objects) Information about the files that users must provide when launching this virtual experiment`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`name: (str) the name of the input file`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`output: (array of objects) A list containing the named key-outputs of this experiment`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`name: (str) the name of a key-output`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`containerImages: (array of objects)  A list of the container images that this virtual experiment references`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`name: (str) the name of a container image (e.g. a URL)`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`executionOptionsDefaults: (object) Describing the default values of experiment parameters for the different platforms of the experiment`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`variables: (array of objects) One entry per experiment parameter`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`name: (str) The name of the variable`}</li>\n              <li parentName=\"ul\">{`valueFrom: (object) One entry per platform`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">{`platform: (str) The name of the platform`}</li>\n                  <li parentName=\"ul\">{`value: (str, int, bool) The default value of the variable when using this platform`}</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`platforms: (array of strings) A list of all the known platform names for this experiment`}</li>\n      <li parentName=\"ul\">{`applicationDependencies: (dictionary) A key-value dictionary containing information about the application dependencies of this experiment for each platform. See `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/workflow-specification#application-dependencies\"\n        }}>{`Application Dependencies`}</a>{` for more.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`$platformNameAsAString: (array of objects) A platform name pointing to an array of objects containing one application dependency each`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`name: (str) the name of the application dependency`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Note that the ST4SD registry manages all fields under the `}<inlineCode parentName=\"p\">{`metadata.registry`}</inlineCode>{` section, developers cannot directly modify this dictionary.`}</p>\n    <h2>{`The Parameterisation section`}</h2>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Parameterisation rules</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Presets</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Execution options</AnchorLink>\n    </AnchorLinks>\n    <p>{`ST4SD supports 2 levels of parameterisation:`}<inlineCode parentName=\"p\">{`presets`}</inlineCode>{` which are options that virtual experiment developers decide and users cannot change; and `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{`  that virtual experiment developers allow users to override potentially with some limit.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`parameterisation:\n  presets: ...\n  executionOptions: ...\n`}</code></pre>\n    <h3>{`Parameterisation rules`}</h3>\n    <p>{`The parameter types that can be specified in each section are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`variables (`}<inlineCode parentName=\"li\">{`variables`}</inlineCode>{`): Values for variables used in the experiment`}</li>\n      <li parentName=\"ul\">{`data-files (`}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`) : Values for data files used by the experiment`}</li>\n      <li parentName=\"ul\">{`platform (`}<inlineCode parentName=\"li\">{`platform`}</inlineCode>{`): Value for the platform (named set of variables) to use`}</li>\n      <li parentName=\"ul\">{`runtime arguments (`}<inlineCode parentName=\"li\">{`runtime`}</inlineCode>{`) : `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` command line arguments`}</li>\n    </ul>\n    <p>{`Both `}<inlineCode parentName=\"p\">{`presets`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{` can be specified in same package.`}</p>\n    <p>{`It is an error to specify the same parameter (variable, data file, runtime option) in both sections. In addition `}<inlineCode parentName=\"p\">{`platform`}</inlineCode>{` can only be specified in one of the two sections.`}</p>\n    <p>{`If a virtual experiment has a parameter that is not specified in either section it is `}<inlineCode parentName=\"p\">{`preset`}</inlineCode>{` with its default value and cannot be changed.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`If a developer wants a user to be able to provide a value for a parameter they `}<strong parentName=\"p\">{`must`}</strong>{` specify it in `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode></p>\n    </InlineNotification>\n    <p>{`For `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{` the value of the `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{` is resolved as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The value provided by the user`}</li>\n      <li parentName=\"ol\">{`The default value provided by the developer in the parameterised package if there is one`}</li>\n      <li parentName=\"ol\">{`The first value in the array of options provided by the developer in the parameterised package if there is one`}</li>\n      <li parentName=\"ol\">{`If none of the above exist the default value of the parameter in the `}<inlineCode parentName=\"li\">{`base-package`}</inlineCode>{` is used`}</li>\n    </ol>\n    <h3>{`Presets`}</h3>\n    <p>{`Use presets to define set values for parameters`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`parameterisation:\n  presets:  # optional\n    # Fields defined here *cannot* be overridden by \\`executionOptions\\`.\n    # All fields are optional\n    variables: #A list of preset values for variables in the virtual experiment\n    - name: $name of variable\n      value: $variableValue\n    data:\n      - name: name of a file in the \"data\" directory\n        value: contents of file - utf8 string (not suitable for binary files)\n    runtime:\n      args:\n      - array of \\`elaunch.py\\` command line strings\n    platform:  #Value for the experiment platform.\n\n\n\n`}</code></pre>\n    <h3>{`Execution options`}</h3>\n    <p>{`Use execution options to allow user to choose values for parameters if they want`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`  executionOptions: # optional\n    # users may override values within constraints that workflow developers set\n    variables:\n    # Variables that the developer allows the user to override.\n    # These CANNOT appear in presets.variables\n    - name: $variable name\n      # .value and .valueFrom are both optional and mutually exclusive\n      # if neither fields exist then users can set variable to any value.\n      #   at start, if users do not provide a value, the variable receives the\n      #   default value that the selected platform defines for this variable\n      value: an optional default value that users can override\n      valueFrom: # An optional array of available choices (1st is default)\n      - value: value of variable (a choice, 1st choice is also the default)\n    data: #A list of data files whose contents the user can set.\n    - name: filename under \\`data\\` directory, the file must already exist\n    runtime: # Arguments to pass to \\`elaunch.py\\`\n             # (cannot include -i -a -d --instanceName)\n      args:\n      - array of elaunch.py command line strings\n    platform: # Choices for platform selection.\n              # Cannot be specified here if in \\`presets\\`\n    - an array of platform names. # If the user does not specifying one on start\n                                  # then the 1st entry is used. If no platform\n                                  # is specified the \\`default\\` platform is used\n\n\n`}</code></pre>\n    <h2>{`Adding a parameterised package to a registry`}</h2>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Pushing the package</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Parameterised Package Identifier</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Package Tags</AnchorLink>\n    </AnchorLinks>\n    <h3>{`Pushing the package`}</h3>\n    <h4>{`From a python dictionary`}</h4>\n    <p>{`The parameterised package is stored as a dictionary in a python module `}<inlineCode parentName=\"p\">{`mypackage.py`}</inlineCode>{` (can be any name). The dictionary is assigned to a variable (can be any name) e.g.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`d = {\n  \"base\": ...\n}\n`}</code></pre>\n    <p>{`Then`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import mypackage\napi.api_experiment_push(mypackage.d)\n`}</code></pre>\n    <h4>{`From YAML`}</h4>\n    <p>{`The parameterised package is stored as YAML in a  file `}<inlineCode parentName=\"p\">{`mypackage.yaml`}</inlineCode>{` (can be any name).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import yaml\nwith open('mypackage.yaml') as f:\n    api.api_experiment_push(yaml.load(f))\n`}</code></pre>\n    <h4>{`From JSON`}</h4>\n    <p>{`The parameterised package is stored as  JSON in a file `}<inlineCode parentName=\"p\">{`mypackage.json`}</inlineCode>{` (can be any name).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json\nwith open('mypackage.json') as f:\n    api.api_experiment_push(json.load(f))\n`}</code></pre>\n    <h4>{`Registry actions when a package is pushed`}</h4>\n    <p>{`On pushing a parameterised virtual experiment package, the registry:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Generates a unique Id for the entry  see `}<a parentName=\"li\" {...{\n          \"href\": \"#parameterised-package-identifier\"\n        }}>{`Parameterised Packaged Identifier`}</a></li>\n      <li parentName=\"ul\">{`Applies and updates tags - see `}<a parentName=\"li\" {...{\n          \"href\": \"#package-tags\"\n        }}>{`Package Tags`}</a></li>\n      <li parentName=\"ul\">{`Stores any credentials as Kubernetes secrets and converts the relevant fields in the parameterised package to `}<inlineCode parentName=\"li\">{`secretKeyRef`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`secretS3KeyRef`}</inlineCode>{` types.`}</li>\n      <li parentName=\"ul\">{`Adds additional data to the parameterised package - see `}<a parentName=\"li\" {...{\n          \"href\": \"#the-metadata.registry-section\"\n        }}>{`registry metadata`}</a></li>\n    </ul>\n    <h3>{`Parameterised Package Identifier`}</h3>\n    <p>{`When  a parameterised package is pushed to the virtual experiment registry it is assigned a  `}<inlineCode parentName=\"p\">{`digest`}</inlineCode>{` which is unique between all packages with the same package name (the value of `}<inlineCode parentName=\"p\">{`metadata.package.name`}</inlineCode>{`).`}</p>\n    <p>{`The unique identifier of the package is then `}<inlineCode parentName=\"p\">{`$packageName@$digest`}</inlineCode>{`. For example `}<inlineCode parentName=\"p\">{`my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86`}</inlineCode></p>\n    <p>{`By convention the registry assumes  parameterised packages with the same package name represent different versions of that package. These are collected together in the registry-ui with the details of the most recent (last uploaded) package shown and links to all previous versions of the package`}</p>\n    <h3>{`Package Tags`}</h3>\n    <p>{`Parameterized packages can have  `}<em parentName=\"p\">{`tags`}</em>{`  applied to them. A tag is a shorthand for referencing the package. For example by adding the tag `}<inlineCode parentName=\"p\">{`1.0`}</inlineCode>{` to the package `}<inlineCode parentName=\"p\">{`my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86`}</inlineCode>{` you can reference it as `}<inlineCode parentName=\"p\">{`my-experiment:1.0`}</inlineCode>{` in various operations.`}</p>\n    <p>{`Developers can specify tags when pushing a package using the  `}<inlineCode parentName=\"p\">{`metadata.package.tags`}</inlineCode>{` field of the package payload. Tagging a parameterised package with a tag removes the tag from any other parameterised package with the same name. This guarantees that if `}<inlineCode parentName=\"p\">{`$packageName:$tag`}</inlineCode>{` exists, it points to exactly one `}<inlineCode parentName=\"p\">{`$packageName@$digest`}</inlineCode>{`. The API call `}<inlineCode parentName=\"p\">{`api_experiment_update_tags(packageIdentifier, tags)`}</inlineCode>{` can also be used add or remove a tag to a package at any time. Note, this call requires `}<inlineCode parentName=\"p\">{`tags`}</inlineCode>{` to include `}<strong parentName=\"p\">{`all`}</strong>{` tags you want associated with the package. If an older version of this experiment has a tag which is not contained in this tag list then the tag will remain pointing to the older version of the experiment.`}</p>\n    <p>{`The current tags associated with a package can be found by inspecting the `}<inlineCode parentName=\"p\">{`metadata.package.tags`}</inlineCode>{` element of the package definition in the registry.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`When a package is pushed it is automatically tagged `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` by the registry.\nIf only a package-name is passed to an API call require a package identifier then the tag `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` is assumed.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p><inlineCode parentName=\"p\">{`latest`}</inlineCode>{` can be moved to another digest with the same-package name if desired using `}<inlineCode parentName=\"p\">{`api_experiment_update_tags`}</inlineCode>{`. However `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` cannot be removed. That is you will receive an error if you omit it from the `}<inlineCode parentName=\"p\">{`tag`}</inlineCode>{` list in `}<inlineCode parentName=\"p\">{`api_experiment_update_tags`}</inlineCode>{` for a digest that is tagged with `}<inlineCode parentName=\"p\">{`:latest`}</inlineCode>{`. You can only remove the `}<inlineCode parentName=\"p\">{`:latest`}</inlineCode>{` tag from a digest if you tag a different digest with the same name `}<inlineCode parentName=\"p\">{`package-name`}</inlineCode>{` with the tag  `}<inlineCode parentName=\"p\">{`:latest`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <h4>{`Example`}</h4>\n    <p>{`A parameterised package with name `}<inlineCode parentName=\"p\">{`my-experiment`}</inlineCode>{` is pushed to the registry. It is given the digest `}<inlineCode parentName=\"p\">{`sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86`}</inlineCode>{`.`}</p>\n    <p>{`All 3 identifiers below point to the same digest:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment:latest`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f8`}</inlineCode></li>\n    </ul>\n    <p>{`Any of these 3 identifiers can be used to refer to the new parameterised package in API call e.g. to start an instance of this parameterised virtual experiment all the following will work:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`api.api_experiment_start(\"my-experiment\", payload={})\napi.api_experiment_start(\"my-experiment:latest\", payload={})\napi.api_experiment_start(\"my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86\", payload={})\n`}</code></pre>\n    <h4>{`Package tag update rules`}</h4>\n    <p>{`If a tag is requested for a digest and that tag is already associated with another digest with the same package-name,  then the registry updates `}<inlineCode parentName=\"p\">{`$packageName:$tag`}</inlineCode>{` to point to the new package. This ensures that `}<inlineCode parentName=\"p\">{`$packageName:$tag`}</inlineCode>{` points to a unique digest even if the workflow developers pushed the `}<inlineCode parentName=\"p\">{`$tag`}</inlineCode>{` in the past.`}</p>\n    <p>{`In general this operation involves updating the `}<inlineCode parentName=\"p\">{`metadata.registry.tags`}</inlineCode>{` fields of all parameterised packages with the same `}<inlineCode parentName=\"p\">{`package-name`}</inlineCode>{`.`}</p>\n    <h2>{`Example`}</h2>\n    <p>{`Here is an example parameterised package for the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/tutorial\"\n      }}>{`sum-numbers toy virtual experiment`}</a>{` which lives on `}<inlineCode parentName=\"p\">{`git`}</inlineCode>{` that demonstrates many of the features discussed above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`definition = {\n    \"base\": {\n        # We define the one or more base-packages (here just one)\n        \"packages\": [{\n            \"source\": {\n                \"git\": {\n                    \"location\": {\n                        # This one lives on Git, under the \"main\" branch, we can also use\n                        # \"tag\" and \"commit\"\n                        \"url\": \"https://github.com/st4sd/sum-numbers.git\",\n                        \"branch\": \"main\"\n                    }\n                }\n            },\n            \"config\": {  # Optional - not required for this example\n                \"path\": \".\", # use when package is not at the root of the source location\n                \"manifestPath\": None,  # relative path to manifest YAML (not used in this example)\n            }\n        }]\n    },\n    \"metadata\": {\n        \"package\": {\n            \"name\": \"sum-numbers\", # Required\n            \"tags\": [\"latest\"],  # Optional - *always* includes \"latest\"\n            \"maintainer\": \"vassilis.vassiliadis@ibm.com\", # Optional but recommended\n            \"description\": \"Toy virtual experiment\", # Optional but recommended\n            \"keywords\": [ # Optional but recommended\n                \"openshift\", \"hello-world\"\n            ]\n        }\n    },\n    \"parameterisation\": {  # Optional but recommended\n        \"presets\": {  # Options that users CANNOT override\n            \"runtime\": {\n                \"args\": [\n                    # *Always* register the workflow to the ST4SD datastore (aka Centralized Database)\n                    \"--registerWorkflow=yes\"\n                ]\n            }\n        },\n        \"executionOptions\": { # Options that users *MAY* override and *MUST* adhere to rules below\n            \"variables\": [\n                # Configures the number of replicas, can be any positive integer, or 1 if unspecified\n                {\"name\": \"numberOfPoints\", \"value\": \"1\"}\n            ],\n            \"data\": [\n                # Users *may* provide a \\`cat_me.txt\\` file\n                {\"name\": \"cat_me.txt\"}\n            ],\n            # Users can *only* execute the \\`openshift\\` and \\`default\\` platforms - even if the virtual experiment\n            # comes with more platform definitions\n            \"platform\": [\"openshift\", \"default\"]\n        }\n    }\n}\n\napi.api_experiment_push(definition)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","kind","small","isMDXComponent"],"sourceRoot":""}