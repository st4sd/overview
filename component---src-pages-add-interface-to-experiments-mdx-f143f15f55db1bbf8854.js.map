{"version":3,"file":"component---src-pages-add-interface-to-experiments-mdx-f143f15f55db1bbf8854.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/add-interface-to-experiments.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/vassiliad/projects/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport { CarbonForIbmDotcom } from \"@carbon/pictograms-react\";\nimport { ArtTools_01 } from \"@carbon/pictograms-react\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This page assumes you are familiar with writing basic experiments and running them locally using the elaunch.py command line tool. If you need a refresher take a moment to read our `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/write-experiments\"\n        }}>{`docs`}</a>{` before continuing any further.`}</p>\n    </PageDescription>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Here, we are using DSL 2.0, if you need to understand the previous syntax check out the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/workflow-specification\"\n        }}>{`FlowIR docs`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/tutorial\"\n        }}>{`FlowIR tutorial`}</a>{`.`}</p>\n    </InlineNotification>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Requirements</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">An experiment that has key-outputs</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">An experiment that has an interface</AnchorLink>\n    </AnchorLinks>\n    <h3>{`Requirements`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`An understanding of `}<a parentName=\"p\" {...{\n            \"href\": \"/overview/direct-run\"\n          }}>{`how to run a ST4SD workflow locally`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`An understanding of `}<a parentName=\"p\" {...{\n            \"href\": \"/overview/write-experiments\"\n          }}>{`how to write a basic ST4SD workflow`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A python 3.9+ interpreter`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A virtual environment with the `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` python module`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`python -m venv venv\n. ./venv/bin/activate\npip install \"st4sd-runtime-core[develop]>=2.5.0\"\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A local copy of `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/st4sd/st4sd-examples\"\n          }}>{`https://github.com/st4sd/st4sd-examples`}</a></p>\n        <p parentName=\"li\">{`  Clone the github repository and then cd into its sub-directory `}<inlineCode parentName=\"p\">{`tutorials/2-experiments-with-interface`}</inlineCode></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`git clone https://github.com/st4sd/st4sd-examples.git\n`}</code></pre>\n      </li>\n    </ul>\n    <h2>{`An experiment that has key-outputs`}</h2>\n    <p>{`All experiments produce files, but not all generated files are equally important. To this end ST4SD has the concept of key-outputs. These are files, and directories, that an experiment produces which the developers of the experiment consider important.`}</p>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Make sure your working directory is the sub-directory `}<inlineCode parentName=\"p\">{`tutorials/2-experiments-with-interface`}</inlineCode>{` of the directory you stored `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/st4sd/st4sd-examples\"\n        }}>{`https://github.com/st4sd/st4sd-examples`}</a>{` in.`}</p>\n    </InlineNotification>\n    <p>{`Here is a an example of an experiment with a key-output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: hello\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n  output:\n    - name: greeting\n      data-in: <entry-instance>:output\n      description: just a friendly greeting\n\ncomponents:\n- signature:\n    name: hello\n    parameters:\n      - name: message\n  command:\n    executable: echo\n    arguments: \"%(message)s\"\n\n`}</code></pre>\n    <p>{`File: `}<inlineCode parentName=\"p\">{`0-key-outputs.yaml`}</inlineCode></p>\n    <p>{`Run it like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-commandline\"\n      }}>{`elaunch.py -l40 --nostamp 0-key-outputs.yaml\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`output`}</inlineCode>{` field in the `}<inlineCode parentName=\"p\">{`entrypoint`}</inlineCode>{` dictionary defines the key-outputs of this experiment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  # ... other fields ...\n  output:\n    - name: greeting\n      data-in: <entry-instance>:output\n`}</code></pre>\n    <p>{`This experiment has a single key-output called `}<inlineCode parentName=\"p\">{`greeting`}</inlineCode>{`. The data associated with this key-output is actually the `}<inlineCode parentName=\"p\">{`stdout`}</inlineCode>{` of the `}<inlineCode parentName=\"p\">{`<entry-instance>`}</inlineCode>{` step which is an instance of the `}<inlineCode parentName=\"p\">{`hello`}</inlineCode>{` component. As the experiment finishes producing this key-output the `}<inlineCode parentName=\"p\">{`$INSTANCE_DIR/output/output.json`}</inlineCode>{` file is updated to reflect the state of this experiment.`}</p>\n    <p>{`Here’s an example of `}<inlineCode parentName=\"p\">{`output.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"greeting\": {\n        \"creationtime\": \"1725374555.6836693\",\n        \"description\": \"just a friendly greeting\",\n        \"filename\": \"out.stdout\",\n        \"filepath\": \"stages/stage0/entry-instance/out.stdout\",\n        \"final\": \"yes\",\n        \"production\": \"yes\",\n        \"type\": \"\",\n        \"version\": \"1\"\n    }\n}\n`}</code></pre>\n    <p>{`While the experiment is running, the runtime system asynchronously updates this file with metadata about the generated key-outputs of the experiment. In this example, there is just one key-output called `}<inlineCode parentName=\"p\">{`greeting`}</inlineCode>{`. For more information on key-outputs check out our `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/workflow-specification#key-outputs\"\n      }}>{`documentation`}</a>{`.`}</p>\n    <p>{`If you are running experiments on the cloud and are instructing the runtime system to register them into the ST4SD datastore you may also use the ST4SD python API to `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/running-workflows-on-openshift#retrieving-the-outputs-of-a-virtual-experiment-instance\"\n      }}>{`download`}</a>{` the key-outputs of your experiment instances.`}</p>\n    <h3>{`Exercises`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` to run `}<inlineCode parentName=\"li\">{`0-key-outputs.yaml`}</inlineCode>{` and look at the file containing the key-output metadata.`}</li>\n      <li parentName=\"ul\">{`Write a new experiment that has a single component called nested inside a workflow. See the example on `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/write-more-experiments#your-first-multi-step-experiment\"\n        }}>{`nested workflows`}</a>{` to refresh your memory on how to write experiments that contain both Workflow and Component templates. Add a key-output which points to the stdout of your component (use an `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/workflow-specification-dsl#outputreference\"\n        }}>{`OutputReference`}</a>{` that points to the `}<inlineCode parentName=\"li\">{`:output`}</inlineCode>{` of your component’s instance).`}</li>\n    </ul>\n    <h2>{`An experiment that has an interface`}</h2>\n    <p>{`Some virtual experiments define interfaces which make it simpler for users to retrieve the input systems and measured properties from executions of that virtual experiment.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` of a virtual experiment defines:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The specification used to describe `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems it processes e.g. SMILEs for small molecules`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems from input data`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the values of `}<inlineCode parentName=\"li\">{`properties`}</inlineCode>{` that the virtual experiment computes`}</li>\n    </ul>\n    <p>{`Once a virtual experiment has an `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{`  ST4SD can return a `}<inlineCode parentName=\"p\">{`pandas.DataFrame`}</inlineCode>{`  containing the properties calculated by instances of the virtual experiment, as well as the ids of the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` systems that an instance processed. This functionality is provided via the `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` API and the `}<inlineCode parentName=\"p\">{`st4sd-runtime-service`}</inlineCode>{` API. See `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-a-virtual-experiment-interface\"\n      }}>{`using a virtual experiment interface`}</a>{` for further information.`}</p>\n    <p>{`In this example we will work with a virtual experiment which:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`extracts the IDs of its input systems`}</li>\n      <li parentName=\"ol\">{`has 2 key-outputs that correspond to 2 measured properties of the interface`}</li>\n      <li parentName=\"ol\">{`uses builtin hooks to extract the measured properties from the key-outputs`}</li>\n    </ol>\n    <p>{`The DSL of the experiment is :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    description: Counts vowels in words\n    inputSpec:\n      namingScheme: words\n      inputExtractionMethod:\n        csvColumn:\n          source:\n            path: input/words.csv\n          args:\n            column: word\n    propertiesSpec:\n    - name: Vowels\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: vowels\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - vowels\n    - name: Letters\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: letters\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - letters\n  output:\n    - name: vowels\n      data-in: <entry-instance/count-vowels>/vowels.csv:ref\n    - name: letters\n      data-in: <entry-instance/count-letters>/letters.csv:ref\n\n  entry-instance: main\n  execute:\n    - target: <entry-instance>\n      args:\n        words_file: input/words.csv:ref\n\nworkflows:\n  - signature:\n      name: main\n      parameters:\n        - name: words_file\n    steps:\n      count-vowels: count-vowels\n      count-letters: count-letters\n    execute:\n      - target: <count-vowels>\n        args:\n          words: \"%(words_file)s\"\n      - target: <count-letters>\n        args:\n          words: \"%(words_file)s\"\n\ncomponents:\n- signature:\n    name: count-vowels\n    parameters:\n    - name: words\n  command:\n    executable: bin/count_vowels.py\n    arguments: \"%(words)s\"\n\n- signature:\n    name: count-letters\n    parameters:\n      - name: words\n  command:\n    executable: bin/count_letters.py\n    arguments: \"%(words)s\"\n`}</code></pre>\n    <p>{`File: `}<inlineCode parentName=\"p\">{`1-interface.package/conf/dsl.yaml`}</inlineCode></p>\n    <p>{`The interface contains a human readable description of the experiment under `}<inlineCode parentName=\"p\">{`entrypoint.interface.description`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    description: Counts vowels in words\n`}</code></pre>\n    <p>{`Then, in `}<inlineCode parentName=\"p\">{`entrypoint.interface.inputspec`}</inlineCode>{` it uses the builtin input extraction method `}<inlineCode parentName=\"p\">{`csvColumn`}</inlineCode>{` to extract the ids of the systems it processes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    inputSpec:\n      namingScheme: words\n      inputExtractionMethod:\n        csvColumn:\n          source:\n            path: input/words.csv\n          args:\n            column: word\n`}</code></pre>\n    <p>{`It instructs the method to read the CSV file `}<inlineCode parentName=\"p\">{`input/words.csv`}</inlineCode>{` (i.e. the input file) and treat every row of the CSV as one input system whose identifier lies in the column `}<inlineCode parentName=\"p\">{`word`}</inlineCode>{`.`}</p>\n    <p>{`Following that, it uses the builtin property extraction method `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` twice to measure its 2 properties `}<inlineCode parentName=\"p\">{`Vowels`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Letters`}</inlineCode>{` from the key-outputs `}<inlineCode parentName=\"p\">{`vowels`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`letters`}</inlineCode>{` respectively.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  interface:\n    propertiesSpec:\n    - name: Vowels\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: vowels\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - vowels\n    - name: Letters\n      propertyExtractionMethod:\n        csvDataFrame:\n          source:\n            keyOutput: letters\n          args:\n            renameColumns:\n              word: input-id\n            usecols:\n            - word\n            - letters\n`}</code></pre>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/writing-a-virtual-experiment-interface#csvdataframe\"\n      }}><inlineCode parentName=\"a\">{`csvDataFrame`}</inlineCode></a>{` property extraction method expects a CSV file which has the columns `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`\\${the property name}`}</inlineCode>{`. One of the requirements for using a ST4SD interface is that the property names start with a capital letter. One of the requirements of the `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` is that there should be a column with the same name as the property name that is being extracted. Another is that there should be a column called `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{`.`}</p>\n    <p>{`In this example the components happen to produce key-output CSV files which contain a properly named column for the values of properties but instead of using the `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{` column they use the column `}<inlineCode parentName=\"p\">{`word`}</inlineCode>{`. To account for this inconsistency, the developers of the workflow use the `}<inlineCode parentName=\"p\">{`renameColumns`}</inlineCode>{` argument of the `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` property extraction method. Via `}<inlineCode parentName=\"p\">{`renameColumns`}</inlineCode>{` they instruct `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` to treat the column `}<inlineCode parentName=\"p\">{`word`}</inlineCode>{` as if it were called `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{`.`}</p>\n    <p>{`Notice that the entrypoint expects an input file called `}<inlineCode parentName=\"p\">{`words.csv`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n    ...\n    execute:\n    - target: <entry-instance>\n      args:\n        words_file: input/words.csv:ref\n`}</code></pre>\n    <p>{`This means that you have to create a CSV file called `}<inlineCode parentName=\"p\">{`words.csv`}</inlineCode>{` and use it as an input for (via the `}<inlineCode parentName=\"p\">{`-i`}</inlineCode>{` arg) to the workflow.`}</p>\n    <p>{`To run this experiment, you can copy/paste the following to your terminal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`: create the input file\ncat<<EOF >words.csv\nword;\nhello;\nawesome;\nworld;\nEOF\n\n: launch the experiment\nelaunch.py -l 20 -i words.csv 1-interface.package\n`}</code></pre>\n    <p>{`If you are running experiments on the cloud and are instructing the runtime system to register them into the ST4SD datastore you may also use the ST4SD python API to `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-a-virtual-experiment-interface#getting-the-properties\"\n      }}>{`download`}</a>{` the measured properties of your experiment instances.`}</p>\n    <h2>{`Exercises`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` to run `}<inlineCode parentName=\"li\">{`1-interface.package`}</inlineCode>{`. Then look at the files:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$INSTANCE_DIR/output/output.json`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$INSTANCE_DIR/output/input-ids.json`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$INSTANCE_DIR/output/properties.csv`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Update the experiment to use a custom python hook for extracting the measured properties from the key-outputs. The documentation for the `}<inlineCode parentName=\"li\">{`hookGetProperties`}</inlineCode>{` hook is `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/writing-a-virtual-experiment-interface#hookgetproperties\"\n        }}>{`here`}</a>{`.`}</li>\n    </ul>\n    <h2>{`What’s next?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`More information on running experiments directly, i.e. via `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` `}<a parentName=\"li\" {...{\n          \"href\": \"https://st4sd.github.io/overview/direct-run\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`More information on the DSL of ST4SD i.e. how to write experiments `}<a parentName=\"li\" {...{\n          \"href\": \"https://st4sd.github.io/overview/workflow-specification-dsl\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`More information on how to structure and test your experiments `}<a parentName=\"li\" {...{\n          \"href\": \"https://st4sd.github.io/overview/packaging-workflows/\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`More information on writing experiments with interfaces `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/writing-a-virtual-experiment-interface\"\n        }}>{`here`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","InlineNotification","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","kind","isMDXComponent"],"sourceRoot":""}