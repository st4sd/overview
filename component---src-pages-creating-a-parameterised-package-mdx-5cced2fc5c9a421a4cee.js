"use strict";(self.webpackChunkst4sd_overview=self.webpackChunkst4sd_overview||[]).push([[3466],{4380:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return s},default:function(){return d}});var n=t(45),i=(t(6540),t(5680)),r=t(8027);const o=["components"],s={},l=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",a)},p=l("PageDescription"),m=l("AnchorLinks"),g=l("AnchorLink"),c=l("InlineNotification"),u={_frontmatter:s},y=r.A;function d(e){let{components:a}=e,t=(0,n.A)(e,o);return(0,i.yg)(y,Object.assign({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.yg)(p,{mdxType:"PageDescription"},(0,i.yg)("p",null,"Use this page to learn what parameterised virtual experiment packages are and how to create them.")),(0,i.yg)(m,{mdxType:"AnchorLinks"},(0,i.yg)(g,{mdxType:"AnchorLink"},"What is a parameterised virtual experiment package?"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Structure of a parameterised virtual experiment package"),(0,i.yg)(g,{mdxType:"AnchorLink"},"The Base section"),(0,i.yg)(g,{mdxType:"AnchorLink"},"The Metadata section"),(0,i.yg)(g,{mdxType:"AnchorLink"},"The Parameterisation section"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Adding a parameterised package to a registry"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Example")),(0,i.yg)("p",null,"A ",(0,i.yg)("inlineCode",{parentName:"p"},"parameterised virtual experiment"),"defines how to run a virtual experiment in a particular way."),(0,i.yg)("p",null,"ST4SD provides a registry for parameterised virtual experiments.\nThe registry allows researchers to browse and use these packages.\nEach ST4SD deployment has a registry and we also maintain ",(0,i.yg)("a",{parentName:"p",href:"https://registry.st4sd.res.ibm.com/"},"a publicly available registry"),"."),(0,i.yg)("p",null,"This document explains how developers can write  parameterised virtual experiment package.\nFor how these packages can be used by others see ",(0,i.yg)("a",{parentName:"p",href:"/overview/using-the-virtual-experiments-registry-ui"},"using the virtual experiment registry"),"."),(0,i.yg)("h2",null,"What is a parameterised virtual experiment package?"),(0,i.yg)("p",null,"A parameterised virtual experiment package is a python dictionary (or YAML or JSON structure) that describes:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"How to access a virtual experiment"),(0,i.yg)("li",{parentName:"ul"},"What options to allow users to change"),(0,i.yg)("li",{parentName:"ul"},"What options have preset values"),(0,i.yg)("li",{parentName:"ul"},"Metadata about the package.")),(0,i.yg)("p",null,"It is ",(0,i.yg)("strong",{parentName:"p"},"parameterised")," as the package can set the values of options in the base experiment to give certain behaviours e.g. setting a quantum method known to be fast, that can’t be overridden by the user.\nThe package can also specify a restricted set of values for an option.\nIn this way the same base virtual experiment can be configured in many ways and provide different parameterised packages for different tasks."),(0,i.yg)("h2",null,"Structure of a parameterised virtual experiment package"),(0,i.yg)("p",null,"A parameterised package has three main sections:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"(Required) The base packages (i.e. workflow definitions) that the virtual experiment consists of.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Where they are located, what version to get, and how to get them. Often there will be just one."))),(0,i.yg)("li",{parentName:"ol"},"(Required) Metadata:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Various other information about the package e.g. description, license, maintainer and keywords."))),(0,i.yg)("li",{parentName:"ol"},"(Optional) The parameterisation information:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Presets: options that  users cannot change."),(0,i.yg)("li",{parentName:"ul"},"Execution options: options that users can change potential with some restrictions.")))),(0,i.yg)("p",null,"Each of these is a top-level key in the package description.\nThe following snippet shows this top-level structure:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'{\n    "base": {\n        # Required: Base package information ...\n    }\n    "metadata": {\n        # Required: Various info about the package  ...\n    },\n    "parameterisation": {\n        # Optional: What values are set and what can be changed ..\n    }\n}\n')),(0,i.yg)("h2",null,"The parameterised virtual experiment package identifier (PVEP Identifier)"),(0,i.yg)("p",null,"The naming schema of a parameterised virtual experiment package (PVEP) is similar to that of container images."),(0,i.yg)("p",null,"The identifier of a PVEP is the name of the PVEP followed by either a ",(0,i.yg)("inlineCode",{parentName:"p"},"@${digest hash}")," or a ",(0,i.yg)("inlineCode",{parentName:"p"},":${tag name}"),".\nThe latest pushed version of a PVEP is always accessible via ",(0,i.yg)("inlineCode",{parentName:"p"},"${name of PVEP}:latest")," or simply ",(0,i.yg)("inlineCode",{parentName:"p"},"${name of PVEP}"),"."),(0,i.yg)("p",null,"For the identifier ",(0,i.yg)("inlineCode",{parentName:"p"},"${name}:${tag name}")," to point to a version of a PVEP, the PVEP should specify the ",(0,i.yg)("inlineCode",{parentName:"p"},"${tag name}")," under the field ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.package.tags"),".\nBelow, is an example of a PVEP called ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment")," which specifies 2 tags: ",(0,i.yg)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"bar"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'{\n    "base": {...},\n    "metadata": {\n        "package": {\n            "name": "my-experiment",\n            "tags": [\n                "foo", "bar"\n            ]\n        }\n    },\n    ...\n}\n')),(0,i.yg)("p",null,"When pushing the above PVEP to the ST4SD registry the following identifiers will automatically point to this version of the PVEP:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment:latest")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment:foo")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment:bar")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment@sha256x60de8e469c486ddd3bd4d2c521518e932964a36296b08758a94b9a4f")," (the ST4SD registry auto-generates the digest hash and stores it under the metadata field ",(0,i.yg)("a",{parentName:"li",href:"#the-metadata.registry-section"},"metadata.registry.digest"),").")),(0,i.yg)(c,{kind:"info",mdxType:"InlineNotification"},(0,i.yg)("p",null,"Notice that ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment:latest")," are automaticaly configured to point to this version of the PVEP regardless of whether ",(0,i.yg)("inlineCode",{parentName:"p"},"latest")," exists in ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.package.tags")," or not.")),(0,i.yg)("p",null,"Any pre-existing versions of the ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment")," PVEP which have any of the tags in this version of the PVEP will be automatically modified such that the tags point to this new version of the experiment instead. This operation is similar to pushing a new container image ",(0,i.yg)("inlineCode",{parentName:"p"},"my-image:foo")," that overrides an existing container image tagged ",(0,i.yg)("inlineCode",{parentName:"p"},"my-image:foo"),"."),(0,i.yg)("p",null,"See the ",(0,i.yg)("a",{parentName:"p",href:"#the-metadata.package-section"},"metadata.package")," section for more information on configuring the name and tags of PVEPs."),(0,i.yg)("p",null,"The rest of this document explains each section, outlining what information is required and optional."),(0,i.yg)(c,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"In the following we use YAML to describe the section structure, for ease of explanation. This would have to be converted to a python dictionary to upload to the registry. An example of doing this is given in the ",(0,i.yg)("a",{parentName:"p",href:"#pushing-the-package"},"pushing a package")," section.")),(0,i.yg)("h2",null,"The Base section"),(0,i.yg)(m,{small:!0,mdxType:"AnchorLinks"},(0,i.yg)(g,{mdxType:"AnchorLink"},"Sources"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Specifying image registry dependencies")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"base")," section describes where the base virtual experiment is and how to access it."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"base:\n  packages:\n  - $PACKAGE_DEFINITION\n")),(0,i.yg)("p",null,"A virtual experiment can contain multiple base packages although for handwritten packages this will usually be one."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'packages:\n- name: # OPTIONAL - defaults to "main", is required\n        # for multi-package experiments\n  source:\n     #REQUIRED: ONE package source type. See below for options\n     $PACKAGE_SOURCETYPE: $PACKAGE_SOURCE_STRUCTURE\n  config:\n    # How to read the experiment from the given source e.g. manifest etc.\n    # config is REQUIRED IF the base virtual experiment uses standard\n    # packaging (is a workflow conf + manifest)\n    path: # relative (to the "root" of `${BASE_PACKAGE}.source`)\n          # path to the virtual experiment (flowir) configuration file\n    manifestPath: # path to the virtual experiments manifest file\n                  # relative to "root" of `${BASE_PACKAGE}.source`\n  dependencies:\n    imageRegistries:\n      #OPTIONAL: list of image registry structures defining how to access\n      # the images required by the experiment. See below for options.\n      - $IMAGE_REGISTRY_STRUCTURE\n')),(0,i.yg)("h3",null,"Sources"),(0,i.yg)("p",null,"Select the source that matches where your virtual experiment is stored"),(0,i.yg)("h4",null,"Git source"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-Yaml"},'git:\n  location:\n    url: the http url of the repo\n    # Must specify exactly ONE of branch, tag, and commit\n    branch: name of branch\n    tag: name of tag\n    commit: git commit hash\n  security:\n    oauth:\n      # You must use exactly ONE of `value` or `valueFrom`.\n      # "value" if automatically converted to "valueFrom.secretKeyRef`\n      # when you push the package\n      valueFrom:\n        secretKeyRef:\n          name: name of secret containing oauthSecret key\n          key: name of key holding the token, defaults to "oauth-token"\n      value: an oauth api key for authenticating to git with\n             HTTPS basic auth\n')),(0,i.yg)(c,{kind:"info",mdxType:"InlineNotification"},(0,i.yg)("p",null,"ST4SD will use the oauth-token you provide to ",(0,i.yg)("inlineCode",{parentName:"p"},"git clone https://${oauth-token}@server.com/your-org/your-repo.git"),"."),(0,i.yg)("p",null,"If you are using ",(0,i.yg)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic"},"Github")," to host your git repository you can generate a Personal Access Token with just read-access to your git repository."),(0,i.yg)("p",null,"If you are using Gitlab, use either a ",(0,i.yg)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token"},"project access token")," or a ",(0,i.yg)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/project/deploy_tokens/#create-a-deploy-token"},"deploy token")," with read access permissions to your Gitlab project. Make sure you create a token with the “Developer” role that has “read_repository” permissions.")),(0,i.yg)(c,{kind:"warning",mdxType:"InlineNotification"},(0,i.yg)("p",null,"Remember to prefix your Token with your Username followed by a ”:” character")),(0,i.yg)("p",null,"Example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'security:\n  oauth:\n     value: "${Username}:${PersonalAccessToken}"\n')),(0,i.yg)("h4",null,"Datashim source"),(0,i.yg)("p",null,"If you have installed ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/datashim-io/datashim"},"Datashim")," on your cluster, you can use a Datashim ",(0,i.yg)("inlineCode",{parentName:"p"},"dataset")," as the location of your virtual experiment base package."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"dataset:\n  # No need for a security field because Datashim removes this requirement.\n  location:\n    dataset: the name of the dataset object\n")),(0,i.yg)("h4",null,"S3 source"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'s3:\n  location:\n    region: region (optional)\n    endpoint: S3 endpoint url\n    bucket: bucket name\n  security:\n    valueFrom:\n        # Must choose exactly ONE of secretS3KeyRef and valuseS3\n        # "valuesS3" is automatically converted to "secretS3KeyRef" when you push the package\n      secretS3KeyRef:\n        name: name of existing kubernetes Secret object containing access information\n          # keyAccessKeyId has default value "accessKeyId"\n        keyAccessKeyId: key in Secret object that holds accessKeyId\n          # secretAccessKey has default value "secretAccessKey"\n        keySecretAccessKey: key in Secret object that holds secretAccessKey\n      s3Ref:\n        accessKeyId: Value of accessKeyId\n        secretAccessKey: Value of accessKeyId\n')),(0,i.yg)("h3",null,"Specifying image registry dependencies"),(0,i.yg)("p",null,"Virtual experiments often use images which may be stored in private registries. This structure allows the developer to provide ST4SD with information on how to access these registries."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'dependencies:\n  #An Optional dictionary of dependency types\n  imageRegistries: # An optional list of image registries struct\n  - serverUrl: the url to the image registry\n    security:\n      valueFrom:\n        # Must select exactly 1 of secretKeyRef and usernamePassword\n        # "usernamePassword" is automatically converted to a "secretKeyRef" when the package is pushed\n        secretKeyRef:\n          name: name of an existing "docker-registry" kubernetes secret object containing the access information\n          key: Name of key containing the auth information (default is .dockerconfigjson)\n        usernamePassword:\n          # here expect fields we would use for `kubectl create secret docker-registry`\n          username: ...\n          password: ...\n\n')),(0,i.yg)("h2",null,"The Metadata section"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata")," section contains 2 fields: ",(0,i.yg)("inlineCode",{parentName:"p"},"package")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"registry"),". The first is used to provide various other information about the parameterised virtual experiment.\nThe latter contains metadata that the registry automatically populates."),(0,i.yg)("h3",null,"The metadata.package section"),(0,i.yg)("p",null,"Populate ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.package")," to set information about your parameterised virtual experiment package that you would like your users to know:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"metadata:\n  package: #All the maintainer metadata. Can decide exact structure at implementation time.\n    name: the package name\n    tags: # Optional\n    - latest # On Push, auto insert latest if missing\n    maintainer: email (optional)\n    license: some string (optional)\n    keywords: # optional\n    - keyword 1\n    - keyword 2\n\n")),(0,i.yg)("h3",null,"The metadata.registry section"),(0,i.yg)("p",null,"Read the ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.registry")," section to get information that the ST4SD registry automatically extracts from your parameterised virtual experiment package:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"digest: (str) A uid of this parameterised virtual experiment package. See ",(0,i.yg)("a",{parentName:"li",href:"#the-parameterised-virtual-experiment-package-identifier-(pvep-identifier)"},"PVEP identifier")),(0,i.yg)("li",{parentName:"ul"},"createdOn: (str) UTC time that this digest was created, format is ",(0,i.yg)("inlineCode",{parentName:"li"},"%Y-%m-%dT%H%M%S.%f%z")),(0,i.yg)("li",{parentName:"ul"},"tags: The tags associated with this PVEP. This is a ",(0,i.yg)("strong",{parentName:"li"},"subset")," of ",(0,i.yg)("inlineCode",{parentName:"li"},"metadata.package.tags"),". It can be ",(0,i.yg)("strong",{parentName:"li"},"empty")," if no tag points to this digest anymore. See ",(0,i.yg)("a",{parentName:"li",href:"#the-parameterised-virtual-experiment-package-identifier-(pvep-identifier)"},"PVEP identifier")),(0,i.yg)("li",{parentName:"ul"},"timesExecuted: (int) - automatically increased every time a user launches this virtual experiment entry"),(0,i.yg)("li",{parentName:"ul"},"interface: (dictionary)  ST4SD injects the Virtual experiment interface if it exists"),(0,i.yg)("li",{parentName:"ul"},"data: (array of object) Information about the filenames under the ",(0,i.yg)("inlineCode",{parentName:"li"},"data")," directory",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"name: (str) the name of the data file"))),(0,i.yg)("li",{parentName:"ul"},"inputs: (array of objects) Information about the files that users must provide when launching this virtual experiment",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"name: (str) the name of the input file"))),(0,i.yg)("li",{parentName:"ul"},"output: (array of objects) A list containing the named key-outputs of this experiment",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"name: (str) the name of a key-output"))),(0,i.yg)("li",{parentName:"ul"},"containerImages: (array of objects)  A list of the container images that this virtual experiment references",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"name: (str) the name of a container image (e.g. a URL)"))),(0,i.yg)("li",{parentName:"ul"},"executionOptionsDefaults: (object) Describing the default values of experiment parameters for the different platforms of the experiment",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"variables: (array of objects) One entry per experiment parameter",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"name: (str) The name of the variable"),(0,i.yg)("li",{parentName:"ul"},"valueFrom: (object) One entry per platform",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"platform: (str) The name of the platform"),(0,i.yg)("li",{parentName:"ul"},"value: (str, int, bool) The default value of the variable when using this platform"))))))),(0,i.yg)("li",{parentName:"ul"},"platforms: (array of strings) A list of all the known platform names for this experiment"),(0,i.yg)("li",{parentName:"ul"},"applicationDependencies: (dictionary) A key-value dictionary containing information about the application dependencies of this experiment for each platform. See ",(0,i.yg)("a",{parentName:"li",href:"/overview/workflow-specification#application-dependencies"},"Application Dependencies")," for more.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"$platformNameAsAString: (array of objects) A platform name pointing to an array of objects containing one application dependency each",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"name: (str) the name of the application dependency")))))),(0,i.yg)("p",null,"Note that the ST4SD registry manages all fields under the ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.registry")," section, developers cannot directly modify this dictionary."),(0,i.yg)("h2",null,"The Parameterisation section"),(0,i.yg)(m,{small:!0,mdxType:"AnchorLinks"},(0,i.yg)(g,{mdxType:"AnchorLink"},"Parameterisation rules"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Presets"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Execution options")),(0,i.yg)("p",null,"ST4SD supports 2 levels of parameterisation:",(0,i.yg)("inlineCode",{parentName:"p"},"presets")," which are options that virtual experiment developers decide and users cannot change; and ",(0,i.yg)("inlineCode",{parentName:"p"},"executionOptions"),"  that virtual experiment developers allow users to override potentially with some limit."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"parameterisation:\n  presets: ...\n  executionOptions: ...\n")),(0,i.yg)("h3",null,"Parameterisation rules"),(0,i.yg)("p",null,"The parameter types that can be specified in each section are:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"variables (",(0,i.yg)("inlineCode",{parentName:"li"},"variables"),"): Values for variables used in the experiment"),(0,i.yg)("li",{parentName:"ul"},"data-files (",(0,i.yg)("inlineCode",{parentName:"li"},"data"),") : Values for data files used by the experiment"),(0,i.yg)("li",{parentName:"ul"},"platform (",(0,i.yg)("inlineCode",{parentName:"li"},"platform"),"): Value for the platform (named set of variables) to use"),(0,i.yg)("li",{parentName:"ul"},"runtime arguments (",(0,i.yg)("inlineCode",{parentName:"li"},"runtime"),") : ",(0,i.yg)("inlineCode",{parentName:"li"},"elaunch.py")," command line arguments")),(0,i.yg)("p",null,"Both ",(0,i.yg)("inlineCode",{parentName:"p"},"presets")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"executionOptions")," can be specified in same package."),(0,i.yg)("p",null,"It is an error to specify the same parameter (variable, data file, runtime option) in both sections. In addition ",(0,i.yg)("inlineCode",{parentName:"p"},"platform")," can only be specified in one of the two sections."),(0,i.yg)("p",null,"If a virtual experiment has a parameter that is not specified in either section it is ",(0,i.yg)("inlineCode",{parentName:"p"},"preset")," with its default value and cannot be changed."),(0,i.yg)(c,{kind:"warning",mdxType:"InlineNotification"},(0,i.yg)("p",null,"If a developer wants a user to be able to provide a value for a parameter they ",(0,i.yg)("strong",{parentName:"p"},"must")," specify it in ",(0,i.yg)("inlineCode",{parentName:"p"},"executionOptions"))),(0,i.yg)("p",null,"For ",(0,i.yg)("inlineCode",{parentName:"p"},"executionOptions")," the value of the ",(0,i.yg)("inlineCode",{parentName:"p"},"parameter")," is resolved as follows:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"The value provided by the user"),(0,i.yg)("li",{parentName:"ol"},"The default value provided by the developer in the parameterised package if there is one"),(0,i.yg)("li",{parentName:"ol"},"The first value in the array of options provided by the developer in the parameterised package if there is one"),(0,i.yg)("li",{parentName:"ol"},"If none of the above exist the default value of the parameter in the ",(0,i.yg)("inlineCode",{parentName:"li"},"base-package")," is used")),(0,i.yg)("h3",null,"Presets"),(0,i.yg)("p",null,"Use presets to define set values for parameters"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'parameterisation:\n  presets:  # optional\n    # Fields defined here *cannot* be overridden by `executionOptions`.\n    # All fields are optional\n    variables: #A list of preset values for variables in the virtual experiment\n    - name: $name of variable\n      value: $variableValue\n    data:\n      - name: name of a file in the "data" directory\n        value: contents of file - utf8 string (not suitable for binary files)\n    runtime:\n      args:\n      - array of `elaunch.py` command line strings\n    platform:  #Value for the experiment platform.\n\n\n\n')),(0,i.yg)("h3",null,"Execution options"),(0,i.yg)("p",null,"Use execution options to allow user to choose values for parameters if they want"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"  executionOptions: # optional\n    # users may override values within constraints that workflow developers set\n    variables:\n    # Variables that the developer allows the user to override.\n    # These CANNOT appear in presets.variables\n    - name: $variable name\n      # .value and .valueFrom are both optional and mutually exclusive\n      # if neither fields exist then users can set variable to any value.\n      #   at start, if users do not provide a value, the variable receives the\n      #   default value that the selected platform defines for this variable\n      value: an optional default value that users can override\n      valueFrom: # An optional array of available choices (1st is default)\n      - value: value of variable (a choice, 1st choice is also the default)\n    data: #A list of data files whose contents the user can set.\n    - name: filename under `data` directory, the file must already exist\n    runtime: # Arguments to pass to `elaunch.py`\n             # (cannot include -i -a -d --instanceName)\n      args:\n      - array of elaunch.py command line strings\n    platform: # Choices for platform selection.\n              # Cannot be specified here if in `presets`\n    - an array of platform names. # If the user does not specifying one on start\n                                  # then the 1st entry is used. If no platform\n                                  # is specified the `default` platform is used\n\n\n")),(0,i.yg)("h2",null,"Adding a parameterised package to a registry"),(0,i.yg)(m,{small:!0,mdxType:"AnchorLinks"},(0,i.yg)(g,{mdxType:"AnchorLink"},"Pushing the package"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Parameterised Package Identifier"),(0,i.yg)(g,{mdxType:"AnchorLink"},"Package Tags")),(0,i.yg)("h3",null,"Pushing the package"),(0,i.yg)("h4",null,"From a python dictionary"),(0,i.yg)("p",null,"The parameterised package is stored as a dictionary in a python module ",(0,i.yg)("inlineCode",{parentName:"p"},"mypackage.py")," (can be any name). The dictionary is assigned to a variable (can be any name) e.g."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'d = {\n  "base": ...\n}\n')),(0,i.yg)("p",null,"Then"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import mypackage\napi.api_experiment_push(mypackage.d)\n")),(0,i.yg)("h4",null,"From YAML"),(0,i.yg)("p",null,"The parameterised package is stored as YAML in a  file ",(0,i.yg)("inlineCode",{parentName:"p"},"mypackage.yaml")," (can be any name)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import yaml\nwith open('mypackage.yaml') as f:\n    api.api_experiment_push(yaml.load(f))\n")),(0,i.yg)("h4",null,"From JSON"),(0,i.yg)("p",null,"The parameterised package is stored as  JSON in a file ",(0,i.yg)("inlineCode",{parentName:"p"},"mypackage.json")," (can be any name)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import json\nwith open('mypackage.json') as f:\n    api.api_experiment_push(json.load(f))\n")),(0,i.yg)("h4",null,"Registry actions when a package is pushed"),(0,i.yg)("p",null,"On pushing a parameterised virtual experiment package, the registry:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Generates a unique Id for the entry  see ",(0,i.yg)("a",{parentName:"li",href:"#parameterised-package-identifier"},"Parameterised Packaged Identifier")),(0,i.yg)("li",{parentName:"ul"},"Applies and updates tags - see ",(0,i.yg)("a",{parentName:"li",href:"#package-tags"},"Package Tags")),(0,i.yg)("li",{parentName:"ul"},"Stores any credentials as Kubernetes secrets and converts the relevant fields in the parameterised package to ",(0,i.yg)("inlineCode",{parentName:"li"},"secretKeyRef")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"secretS3KeyRef")," types."),(0,i.yg)("li",{parentName:"ul"},"Adds additional data to the parameterised package - see ",(0,i.yg)("a",{parentName:"li",href:"#the-metadata.registry-section"},"registry metadata"))),(0,i.yg)("h3",null,"Parameterised Package Identifier"),(0,i.yg)("p",null,"When  a parameterised package is pushed to the virtual experiment registry it is assigned a  ",(0,i.yg)("inlineCode",{parentName:"p"},"digest")," which is unique between all packages with the same package name (the value of ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.package.name"),")."),(0,i.yg)("p",null,"The unique identifier of the package is then ",(0,i.yg)("inlineCode",{parentName:"p"},"$packageName@$digest"),". For example ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86")),(0,i.yg)("p",null,"By convention the registry assumes  parameterised packages with the same package name represent different versions of that package. These are collected together in the registry-ui with the details of the most recent (last uploaded) package shown and links to all previous versions of the package"),(0,i.yg)("h3",null,"Package Tags"),(0,i.yg)("p",null,"Parameterized packages can have  ",(0,i.yg)("em",{parentName:"p"},"tags"),"  applied to them. A tag is a shorthand for referencing the package. For example by adding the tag ",(0,i.yg)("inlineCode",{parentName:"p"},"1.0")," to the package ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86")," you can reference it as ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment:1.0")," in various operations."),(0,i.yg)("p",null,"Developers can specify tags when pushing a package using the  ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.package.tags")," field of the package payload. Tagging a parameterised package with a tag removes the tag from any other parameterised package with the same name. This guarantees that if ",(0,i.yg)("inlineCode",{parentName:"p"},"$packageName:$tag")," exists, it points to exactly one ",(0,i.yg)("inlineCode",{parentName:"p"},"$packageName@$digest"),". The API call ",(0,i.yg)("inlineCode",{parentName:"p"},"api_experiment_update_tags(packageIdentifier, tags)")," can also be used add or remove a tag to a package at any time. Note, this call requires ",(0,i.yg)("inlineCode",{parentName:"p"},"tags")," to include ",(0,i.yg)("strong",{parentName:"p"},"all")," tags you want associated with the package. If an older version of this experiment has a tag which is not contained in this tag list then the tag will remain pointing to the older version of the experiment."),(0,i.yg)("p",null,"The current tags associated with a package can be found by inspecting the ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.package.tags")," element of the package definition in the registry."),(0,i.yg)(c,{mdxType:"InlineNotification"},(0,i.yg)("p",null,"When a package is pushed it is automatically tagged ",(0,i.yg)("inlineCode",{parentName:"p"},"latest")," by the registry.\nIf only a package-name is passed to an API call require a package identifier then the tag ",(0,i.yg)("inlineCode",{parentName:"p"},"latest")," is assumed.")),(0,i.yg)(c,{kind:"warning",mdxType:"InlineNotification"},(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"latest")," can be moved to another digest with the same-package name if desired using ",(0,i.yg)("inlineCode",{parentName:"p"},"api_experiment_update_tags"),". However ",(0,i.yg)("inlineCode",{parentName:"p"},"latest")," cannot be removed. That is you will receive an error if you omit it from the ",(0,i.yg)("inlineCode",{parentName:"p"},"tag")," list in ",(0,i.yg)("inlineCode",{parentName:"p"},"api_experiment_update_tags")," for a digest that is tagged with ",(0,i.yg)("inlineCode",{parentName:"p"},":latest"),". You can only remove the ",(0,i.yg)("inlineCode",{parentName:"p"},":latest")," tag from a digest if you tag a different digest with the same name ",(0,i.yg)("inlineCode",{parentName:"p"},"package-name")," with the tag  ",(0,i.yg)("inlineCode",{parentName:"p"},":latest"),".")),(0,i.yg)("h4",null,"Example"),(0,i.yg)("p",null,"A parameterised package with name ",(0,i.yg)("inlineCode",{parentName:"p"},"my-experiment")," is pushed to the registry. It is given the digest ",(0,i.yg)("inlineCode",{parentName:"p"},"sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86"),"."),(0,i.yg)("p",null,"All 3 identifiers below point to the same digest:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment:latest")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f8"))),(0,i.yg)("p",null,"Any of these 3 identifiers can be used to refer to the new parameterised package in API call e.g. to start an instance of this parameterised virtual experiment all the following will work:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'api.api_experiment_start("my-experiment", payload={})\napi.api_experiment_start("my-experiment:latest", payload={})\napi.api_experiment_start("my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86", payload={})\n')),(0,i.yg)("h4",null,"Package tag update rules"),(0,i.yg)("p",null,"If a tag is requested for a digest and that tag is already associated with another digest with the same package-name,  then the registry updates ",(0,i.yg)("inlineCode",{parentName:"p"},"$packageName:$tag")," to point to the new package. This ensures that ",(0,i.yg)("inlineCode",{parentName:"p"},"$packageName:$tag")," points to a unique digest even if the workflow developers pushed the ",(0,i.yg)("inlineCode",{parentName:"p"},"$tag")," in the past."),(0,i.yg)("p",null,"In general this operation involves updating the ",(0,i.yg)("inlineCode",{parentName:"p"},"metadata.registry.tags")," fields of all parameterised packages with the same ",(0,i.yg)("inlineCode",{parentName:"p"},"package-name"),"."),(0,i.yg)("h2",null,"Example"),(0,i.yg)("p",null,"Here is an example parameterised package for the ",(0,i.yg)("a",{parentName:"p",href:"/overview/tutorial"},"sum-numbers toy virtual experiment")," which lives on ",(0,i.yg)("inlineCode",{parentName:"p"},"git")," that demonstrates many of the features discussed above."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'definition = {\n    "base": {\n        # We define the one or more base-packages (here just one)\n        "packages": [{\n            "source": {\n                "git": {\n                    "location": {\n                        # This one lives on Git, under the "main" branch, we can also use\n                        # "tag" and "commit"\n                        "url": "https://github.com/st4sd/sum-numbers.git",\n                        "branch": "main"\n                    }\n                }\n            },\n            "config": {  # Optional - not required for this example\n                "path": ".", # use when package is not at the root of the source location\n                "manifestPath": None,  # relative path to manifest YAML (not used in this example)\n            }\n        }]\n    },\n    "metadata": {\n        "package": {\n            "name": "sum-numbers", # Required\n            "tags": ["latest"],  # Optional - *always* includes "latest"\n            "maintainer": "vassilis.vassiliadis@ibm.com", # Optional but recommended\n            "description": "Toy virtual experiment", # Optional but recommended\n            "keywords": [ # Optional but recommended\n                "openshift", "hello-world"\n            ]\n        }\n    },\n    "parameterisation": {  # Optional but recommended\n        "presets": {  # Options that users CANNOT override\n            "runtime": {\n                "args": [\n                    # *Always* register the workflow to the ST4SD datastore (aka Centralized Database)\n                    "--registerWorkflow=yes"\n                ]\n            }\n        },\n        "executionOptions": { # Options that users *MAY* override and *MUST* adhere to rules below\n            "variables": [\n                # Configures the number of replicas, can be any positive integer, or 1 if unspecified\n                {"name": "numberOfPoints", "value": "1"}\n            ],\n            "data": [\n                # Users *may* provide a `cat_me.txt` file\n                {"name": "cat_me.txt"}\n            ],\n            # Users can *only* execute the `openshift` and `default` platforms - even if the virtual experiment\n            # comes with more platform definitions\n            "platform": ["openshift", "default"]\n        }\n    }\n}\n\napi.api_experiment_push(definition)\n')))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-creating-a-parameterised-package-mdx-5cced2fc5c9a421a4cee.js.map