{"version":3,"file":"component---src-pages-write-experiments-mdx-c629b44921fdc0f91773.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/write-experiments.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/travis/build/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport { CarbonForIbmDotcom } from \"@carbon/pictograms-react\";\nimport { ArtTools_01 } from \"@carbon/pictograms-react\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This page assumes you are familiar with running experiments locally using the elaunch.py command line tool. If you need a refresher take a moment to read our `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/direct-run\"\n        }}>{`docs`}</a>{` before continuing any further.`}</p>\n    </PageDescription>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Here, we are using DSL 2.0, if you need to understand the previous syntax check out the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/workflow-specification\"\n        }}>{`FlowIR docs`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/tutorial\"\n        }}>{`FlowIR tutorial`}</a>{`.`}</p>\n    </InlineNotification>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Wrapping a python script for native execution</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Sharing your virtual experiments with others</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Your first Simulation experiment with GAMESS US</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Requirements`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`An understanding of `}<a parentName=\"p\" {...{\n            \"href\": \"/overview/direct-run\"\n          }}>{`how to run a virtual experiment locally`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A python 3.9+ interpreter, `}<a parentName=\"p\" {...{\n            \"href\": \"https://git-scm.com/downloads\"\n          }}>{`git`}</a>{` to clone code from Git servers, and an understanding of the syntax & structure of `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.redhat.com/en/topics/automation/what-is-yaml\"\n          }}>{`YAML`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A virtual environment with the `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` python module`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`python -m venv venv\n. ./venv/bin/activate\npip pip install \"st4sd-runtime-core[develop]\">=2.4.0\"\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A Container Runtime system: install one of `}<a parentName=\"p\" {...{\n            \"href\": \"https://docs.docker.com/engine/install/\"\n          }}>{`docker`}</a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"https://podman.io/docs/installation\"\n          }}>{`podman`}</a>{`, or `}<a parentName=\"p\" {...{\n            \"href\": \"https://docs.rancherdesktop.io/getting-started/installation/\"\n          }}>{`Rancher Desktop`}</a></p>\n      </li>\n    </ul>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Before you continue any further, please make sure you are comfortable with `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/direct-run\"\n        }}>{`running virtual experiments locally`}</a>{`.`}</p>\n    </InlineNotification>\n    <h2>{`Wrapping a python script for native execution`}</h2>\n    <p>{`For your first virtual experiment, we will start with a Python script and use a virtual environment where `}<strong parentName=\"p\">{`st4sd-runtime-core`}</strong>{` is installed. This is a great way to quickly prototype virtual experiments without worrying about making them shareable with others. Check out `}<a parentName=\"p\" {...{\n        \"href\": \"#sharing-your-virtual-experiments-with-others\"\n      }}>{`Sharing your virtual experiments with others`}</a>{` for an example.`}</p>\n    <p>{`Begin by creating a directory called `}<inlineCode parentName=\"p\">{`python-native.package`}</inlineCode>{`. In it, create 2 directories: `}<inlineCode parentName=\"p\">{`bin`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`conf`}</inlineCode>{`. Next, we’ll define the definition of the virtual experiment.`}</p>\n    <p>{`ST4SD virtual experiments are structured as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n    # Instructions of the entry point to your experiment\ncomponents:\n    # Templates for executing a single task\nworkflows:\n    # Templates for executing multiple steps which can be\n    # Workflows or Components\n`}</code></pre>\n    <p>{`Developers build experiments by connecting `}<strong parentName=\"p\">{`Components`}</strong>{` and `}<strong parentName=\"p\">{`Workflows`}</strong>{`. Components represent individual tasks, while Workflows represent graphs of nested Workflows and Components. The example provided demonstrates the execution of a single task. A helpful way to understand virtual experiments is to think of them as `}<strong parentName=\"p\">{`programs`}</strong>{` written in a programming language. In this analogy, Workflows and Components serve as functions, and the `}<strong parentName=\"p\">{`entrypoint`}</strong>{` is similar to declaring a `}<strong parentName=\"p\">{`main()`}</strong>{` function, specifying which function to execute and what arguments to pass to it.`}</p>\n    <p>{`Place the following in the file `}<inlineCode parentName=\"p\">{`conf/dsl.yaml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: printer\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n\ncomponents:\n- signature:\n    name: printer\n    parameters:\n      - name: message\n  command:\n    executable: bin/printer.py\n    arguments: \"%(message)s\"\n`}</code></pre>\n    <p>{`In this example, the experiment’s entrypoint, instantiates the printer component and sets its `}<strong parentName=\"p\">{`message`}</strong>{` parameter to “Hello world”.`}</p>\n    <p>{`The `}<strong parentName=\"p\">{`printer`}</strong>{` component template has a single parameter, message, which does not have a default value. This component runs the executable “bin/printer.py”, passing the message value as an argument.`}</p>\n    <p>{`Next, create the “bin/printer.py” file using this very simple python code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`#!/usr/bin/env python\n\nimport sys\nprint(\" \".join(sys.argv[1:]))\n`}</code></pre>\n    <p>{`After creating the file, navigate to the `}<strong parentName=\"p\">{`python-native.package`}</strong>{` directory and run the command chmod +x bin/printer.py to make the file executable. This step is necessary to allow the file to be executed as a script.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`At this point, double check that you have used the exact names as above, that your python file starts with the shebang line `}<inlineCode parentName=\"p\">{`#!/usr/bin/env python`}</inlineCode>{`, and that it’s executable.`}</p>\n      <p>{`The expected file structure is the following:`}</p>\n      <pre><code parentName=\"pre\" {...{}}>{`python-native.package\n├── bin\n│   └── printer.py\n└── conf\n    └── dsl.yaml\n`}</code></pre>\n      <p>{`If you want to produce similar tree outputs for your directories use the `}<a parentName=\"p\" {...{\n          \"href\": \"https://oldmanprogrammer.net/source.php?dir=projects/tree\"\n        }}>{`tree`}</a>{` commandline utility which is also available via `}<a parentName=\"p\" {...{\n          \"href\": \"https://formulae.brew.sh/formula/tree\"\n        }}>{`brew`}</a>{`.`}</p>\n    </InlineNotification>\n    <p>{`Let’s run the experiment using `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{`. After a few seconds you should see the following printout:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ elaunch.py --nostamp -l40 python-native.package\n\ncompleted-on=2025-03-22 12:39:13.806401\ncost=0\ncreated-on=2025-03-22 12:39:07.382235\ncurrent-stage=stage0\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0']\ntotal-progress=1.0\nupdated=2025-03-22 12:39:17.417956\nupdated-on=2025-03-22 12:39:17.417956\n`}</code></pre>\n    <p>{`The experiment will create the directory `}<strong parentName=\"p\">{`python-native.instance`}</strong>{` and store all files it generated in it.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`python-native.instance\n├── bin\n│   └── printer.py\n├── conf (For now focus on just the dsl.yaml file)\n│   ├── dsl.yaml\n│   ├── flowir_instance.yaml\n│   ├── flowir_package.yaml\n│   └── manifest.yaml\n├── stages\n│   └── stage0\n│       └── entry-instance\n│           ├── component_performance.csv\n│           ├── out.stderr\n│           └── out.stdout\n├── output\n│   ├── experiment.log\n│   ├── output.json\n│   ├── output.txt\n│   ├── status.txt\n│   └── status_details.json\n├── input\n├── python\n├── elaunch.yaml\n└── status.db\n\n`}</code></pre>\n    <p>{`If you encountered any issues during the process, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/direct-run#troubleshooting\"\n      }}>{`troubleshooting`}</a>{` section of the documentation for guidance on launching experiments locally.`}</p>\n    <p>{`Now that you have ran the experiment, take a moment to `}<strong parentName=\"p\">{`explore its outputs`}</strong>{`. You can find the output files following directory:\n`}<inlineCode parentName=\"p\">{`python-native.instance/stages/stage0/entry-instance`}</inlineCode>{`.`}</p>\n    <h3>{`Exercise`}</h3>\n    <p>{`In ST4SD you can override the parameters of `}<inlineCode parentName=\"p\">{`entry-instance`}</inlineCode>{` that the `}<inlineCode parentName=\"p\">{`entrypoint`}</inlineCode>{` sets via the dictionary `}<inlineCode parentName=\"p\">{`entrypoint.execute[0].args`}</inlineCode>{`.`}</p>\n    <p>{`For example, place the following into a new file `}<inlineCode parentName=\"p\">{`my-variables.yaml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`global:\n  message: my custom message\n`}</code></pre>\n    <p>{`Then remove the `}<inlineCode parentName=\"p\">{`python-native.instance`}</inlineCode>{` directory and run the experiment again but this time use load the `}<inlineCode parentName=\"p\">{`my-variables.yaml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`rm -rf python-native.instance\nelaunch.py -l40 --nostamp -a my-variables.yaml python-native.package\n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`stdout`}</strong>{` of the `}<inlineCode parentName=\"p\">{`hello`}</inlineCode>{` component can be found in the following file:\n`}<inlineCode parentName=\"p\">{`0-hello-world.instance/stages/stage0/entry-instance/out.stdout`}</inlineCode>{`.`}</p>\n    <h2>{`Sharing your virtual experiments with others`}</h2>\n    <p>{`To make experiments shareable, they must include the following key information:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`All executables that they run, along with their software dependencies`}</li>\n      <li parentName=\"ol\">{`How to map the executables to specific steps`}</li>\n      <li parentName=\"ol\">{`How to connect inputs to these steps`}</li>\n    </ol>\n    <p>{`In the `}<a parentName=\"p\" {...{\n        \"href\": \"#wrapping-a-python-script-for-native-execution\"\n      }}>{`example`}</a>{` above, we demonstrated how to wrap a single-step executable into a virtual experiment, covering the second and third requirements for a single-step experiment. In this example, we will utilize a container to share the software dependencies of the “printer.py” executable, addressing the first requirement.`}</p>\n    <h3>{`Containerize your python application`}</h3>\n    <p>{`In a `}<strong parentName=\"p\">{`requirements.txt`}</strong>{` file place the python dependencies of your script.\nThe `}<strong parentName=\"p\">{`printer.py`}</strong>{` python script that we use here does not have any python requirements but we’ll just include `}<strong parentName=\"p\">{`numpy`}</strong>{` to demonstrate the method:`}</p>\n    <p>{`The contents of the  `}<inlineCode parentName=\"p\">{`requirements.txt`}</inlineCode>{` file are:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`numpy==2.2.4\n`}</code></pre>\n    <p>{`Next, create a file called `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` with the following contexts:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-docker\"\n      }}>{`FROM python:3.11-slim\n\nRUN    apt-get update \\\\\n    && apt-get upgrade -y \\\\\n    && apt-get clean -y \\\\\n    && rm -rf /var/lib/apt/lists/*\n\n# Make sure that files under /app are part of $PATH\nENV PATH=/app:$PATH\nWORKDIR /app\n\nCOPY requirements.txt /app/requirements.txt\n\nRUN pip install -r requirements.txt\n\nCOPY printer.py /app/printer.py\n\n# Make the printer.py file executable\nRUN chmod +x /app/printer.py\n`}</code></pre>\n    <p>{`Make sure you have the following files in the directory you are currently in:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`.\n├── Dockerfile\n├── printer.py\n└── requirements.txt\n`}</code></pre>\n    <p>{`To build your container, run docker:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker build --platform linux/amd64 -f Dockerfile -t my-printer:latest\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`We recommend building images for the x86-64 CPU architecture using the `}<inlineCode parentName=\"p\">{`--platform linux/amd64`}</inlineCode>{` flag to ease the transition into executing your virtual experiments on the cloud. You can specify the platform when building your image using the following command-line argument `}<inlineCode parentName=\"p\">{`--platform linux/amd64`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <h3>{`Making your container available to others`}</h3>\n    <p>{`If you plan to share your experiment with others, you will need to push your containers to a remote container registry, such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://hub.docker.com/\"\n      }}>{`Docker Hub`}</a>{`. This allows others to easily access and pull your container images, making it simpler to share and reproduce your experiment.`}</p>\n    <p>{`To push your container to a remote registry, you can use the following steps:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Tag your container image`}</strong>{`: Use the `}<inlineCode parentName=\"li\">{`docker tag`}</inlineCode>{` command to assign a unique name to your image, including the registry URL and your username.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Login to the registry`}</strong>{`: Use the `}<inlineCode parentName=\"li\">{`docker login`}</inlineCode>{` command to authenticate with the registry.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Push the image`}</strong>{`: Use the `}<inlineCode parentName=\"li\">{`docker push`}</inlineCode>{` command to upload your image to the registry.`}</li>\n    </ol>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`: # Tag the image\ndocker tag my-printer:latest <your-username>/my-printer:latest\n\n: # Login to Docker Hub\ndocker login\n\n: # Push the image\ndocker push <your-username>/my-printer:latest\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`The remainder of this example will assume that you do not have access to a container registry. In this case, you can still share your experiment with others by providing them with the necessary files and instructions to build the container image themselves. This can be done by sharing the `}<strong parentName=\"p\">{`Dockerfile`}</strong>{`, `}<strong parentName=\"p\">{`printer.py`}</strong>{`, and `}<strong parentName=\"p\">{`requirements.txt`}</strong>{` files. The recipient can then build the image using the `}<inlineCode parentName=\"p\">{`docker build --platform linux/amd64 -f Dockerfile -t my-printer:latest`}</inlineCode>{` command and run your virtual experiment locally.`}</p>\n    </InlineNotification>\n    <h3>{`Create a virtual experiment that uses the container`}</h3>\n    <p>{`Create a new directory called `}<inlineCode parentName=\"p\">{`python-docker.package`}</inlineCode>{`, in it create a directory called `}<inlineCode parentName=\"p\">{`conf`}</inlineCode>{`.`}</p>\n    <p>{`Next, create the file `}<strong parentName=\"p\">{`cpython-docker.package/onf/dsl.yaml`}</strong>{` using the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: printer\n  execute:\n  - target: <entry-instance>\n    args:\n      message: Hello world\n\ncomponents:\n- signature:\n    name: printer\n    parameters:\n      - name: message\n  command:\n    executable: printer.py\n    arguments: \"%(message)s\"\n    environment:\n        PATH: /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app\n  resourceManager:\n    config:\n        backend: docker\n    docker:\n        image: my-printer:latest\n        imagePullPolicy: IfNotPresent\n`}</code></pre>\n    <p>{`The differences between this experiment and `}<strong parentName=\"p\">{`python-native.package`}</strong>{` are all about the `}<strong parentName=\"p\">{`printer`}</strong>{` `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<strong parentName=\"li\">{`bin/printer.py`}</strong>{` file is no longer used.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`We set `}<inlineCode parentName=\"li\">{`command.executable`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`printer.py`}</inlineCode></li>\n          <li parentName=\"ul\">{`The runtime system will search for this executable in the `}<inlineCode parentName=\"li\">{`$PATH`}</inlineCode>{` environment variable of the component`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`We set `}<inlineCode parentName=\"li\">{`command.environment.PATH`}</inlineCode>{` to include the path to the `}<inlineCode parentName=\"li\">{`printer.py`}</inlineCode>{` script`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`By default, components receive the virtual environment of the runtime process which is not guaranteed to be compatible with the environment variables that enable the execution of commands inside the container`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Configure the docker backend for this component`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resourceManager.config.backend`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`docker`}</inlineCode></li>\n          <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resourceManager.docker.image`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`my-printer:latest`}</inlineCode></li>\n          <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resourceManager.docker.imagePullPolicy`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`IfNotPresent`}</inlineCode>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`This setting instructs the runtime to only attempt to pull the image if it’s not already present on the local machine`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`The resulting file tree of your experiment should look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`python-docker.package\n└── conf\n    └── dsl.yaml\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`ST4SD supports multiple different backends for your components however these features are beyond the focus of this example. You can find more information in the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/add-interface-to-experiments\"\n        }}>{`advanced experiments`}</a>{` as well as the `}<a parentName=\"p\" {...{\n          \"href\": \"/overview/workflow-specification-dsl\"\n        }}>{`DSL documentation`}</a>{` page.`}</p>\n    </InlineNotification>\n    <h3>{`Exercise`}</h3>\n    <p>{`Run your virtual experiment using `}<strong parentName=\"p\">{`elaunch.py`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`elaunch.py --nostamp -l40 python-docker.package\n`}</code></pre>\n    <p>{`If you encountered any issues during the process, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/direct-run#troubleshooting\"\n      }}>{`troubleshooting`}</a>{` section of the documentation for guidance on launching experiments locally.`}</p>\n    <p>{`Now that you have ran the experiment, take a moment to `}<strong parentName=\"p\">{`explore its outputs`}</strong>{`. You can find the output files following directory:\n`}<inlineCode parentName=\"p\">{`python-native.instance/stages/stage0/entry-instance`}</inlineCode>{`.`}</p>\n    <h2>{`Your first Simulation experiment with GAMESS US`}</h2>\n    <p>{`In this example, we will create a virtual experiment that performs the Parameterized Model 3 (PM3) method in GAMESS US. PM3 is a semi-empirical quantum chemistry method. Scientists use it to calculate the molecular properties and energies when computational efficiency is a priority as an alternative to high accuracy but slow to run high-level quantum methods like Hartree-Fock or Density Functional Theory (DFT).`}</p>\n    <p>{`Start by creating a new directory called `}<inlineCode parentName=\"p\">{`gamess-us-pm3.package`}</inlineCode>{` containing 3 directories: `}<inlineCode parentName=\"p\">{`bin`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`conf`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`hooks`}</inlineCode>{` like so:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`gamess-us-pm3.package\n├── bin\n├── conf\n└── hooks\n`}</code></pre>\n    <p>{`Create the file `}<inlineCode parentName=\"p\">{`bin/run-gamess.sh`}</inlineCode>{` using the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#!/usr/bin/env sh\n\nmolecule=$1\ncpus=$2\n\n# The restart hook expects the filename to exist in the working directory\n# of GAMESS US\nmolecule_name=$(basename \"\\${molecule}\")\ncp \\${molecule} \\${molecule_name}\n\nPATH_RUNGMS_WRAPPER=\\${PATH_RUNGMS:-/usr/local/bin/rungms}\nPATH_GAMESS=\\${PATH_GAMESS:-/usr/local/bin/gamess}\n\nPATH_MY_GAMESS=\\${PATH_MY_GAMESS:-/tmp/gamess}\nGAMESS_SCRATCH_DIR=\\${GAMESS_SCRATCH_DIR:-\\${PATH_MY_GAMESS}/scratch}\n\nhere=\\`pwd\\`\nmkdir -p \"\\${PATH_MY_GAMESS}\"\nmkdir -p \"\\${GAMESS_SCRATCH_DIR}\"\n\nsed -e \"s#set USERSCR=/workspace/restart#set USERSCR=\\${here}#g\" \\\\\n    -e \"s#set currentdir=\\\\\\`pwd\\\\\\`#set currentdir=\\${PATH_GAMESS}#g\" \\\\\n    -e \"s#set SCR=\\\\\\`pwd\\\\\\`/scratch#set SCR=\\${GAMESS_SCRATCH_DIR}#g\" \\\\\n    -e \"s#TARGET=mpi#TARGET=ga#g\" \\\\\n    \"\\${PATH_GAMESS}/rungms\" >\"\\${PATH_MY_GAMESS}/run-gamess.sh\"\n\ncp /usr/local/bin/gamess/install.info \"\\${PATH_GAMESS}/install.info\"\n\n# The NVidia Image Features version 00 ONLY and target=GA ONLY\nversion=00\n\nchmod +x \\${PATH_MY_GAMESS}/run-gamess.sh\n\n\"\\${PATH_MY_GAMESS}\"/run-gamess.sh \"\\${molecule_name}\" \"\\${version}\" \"\\${cpus}\"\n\n\n`}</code></pre>\n    <p>{`Then download the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/band-gap-gamess/blob/main/component-scripts/extract_gmsout.py\"\n      }}>{`extract_gmsout.py script`}</a>{` and store it in the `}<inlineCode parentName=\"p\">{`bin`}</inlineCode>{` directory.`}</p>\n    <p>{`Next, make the both the `}<strong parentName=\"p\">{`run-gamess.sh`}</strong>{` and `}<strong parentName=\"p\">{`extract_gmsout.py`}</strong>{` scripts executable by running `}<inlineCode parentName=\"p\">{`chmod +x bin/*`}</inlineCode>{` inside the `}<inlineCode parentName=\"p\">{`gamess-us-pm3.package`}</inlineCode>{` directory.`}</p>\n    <p>{`Download the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/band-gap-gamess/blob/main/hooks/semi_empirical_restart.py\"\n      }}>{`RestartHook example`}</a>{` and save it in the `}<strong parentName=\"p\">{`hooks`}</strong>{` directory. This script checks if the PM3 method in GAMESS US has converged. If not, it triggers a task restart.`}</p>\n    <p>{`Next, prepare the definition of the experiment by pasting the following into the `}<strong parentName=\"p\">{`conf/dsl.yaml`}</strong>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`entrypoint:\n  entry-instance: gamess-us-pm3\n  execute:\n  - target: <entry-instance>\n    args:\n      input.molecule.inp: input/molecule.inp\n      gamess-number-processors: 1\n      gamess-memory: \"4096Mi\"\n      # gamess-gpus is only relevant for executon on Kubernetes\n      gamess-gpus: 0\n      backend: docker\n\nworkflows:\n- signature:\n    name: gamess-us-pm3\n    parameters:\n    - name: input.molecule.inp\n    - name: gamess-number-processors\n    - name: gamess-memory\n    - name: gamess-gpus\n    - name: backend\n  steps:\n    optimise: geometry-optimisation\n    parse-gamess: extract-energies\n  execute:\n    - target: <optimise>\n      args:\n        molecule: \"%(input.molecule.inp)s:ref\"\n        gamess-number-processors: \"%(gamess-number-processors)s\"\n        gamess-memory: \"%(gamess-memory)s\"\n        gamess-gpus: \"%(gamess-gpus)s\"\n        backend: \"%(backend)s\"\n    - target: <parse-gamess>\n      args:\n        gamess-working-directory: \"<optimise>:ref\"\n        backend: \"%(backend)s\"\n\ncomponents:\n- signature:\n    name: geometry-optimisation\n    parameters:\n    - name: molecule\n    - name: gamess-number-processors\n      default: 1\n    - name: gamess-memory\n      default: \"4096Mi\"\n    - name: backend\n      default: docker\n    - name: gamess-image\n      default: nvcr.io/hpc/gamess:17.09-r2-libcchem\n    - name: docker-platform\n      default: \"linux/amd64\"\n    - name: gamess-gpus\n      default: 0\n  command:\n    arguments: \"%(molecule)s %(gamess-number-processors)s\"\n    environment:\n      PATH: /usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    executable: bin/run-gamess.sh\n  workflowAttributes:\n    restartHookFile: semi_empirical_restart.py\n    restartHookOn:\n    - KnownIssue\n    - Success\n    - ResourceExhausted\n    shutdownOn:\n    - KnownIssue\n    - ResourceExhausted\n  resourceManager:\n    config:\n      backend: '%(backend)s'\n      # in minutes - only applies to Kubernetes runs\n      walltime: 600\n    docker:\n      image: \"%(gamess-image)s\"\n      platform: \"%(docker-platform)s\"\n    kubernetes:\n      image: \"%(gamess-image)s\"\n  resourceRequest:\n    memory: '%(gamess-memory)s'\n    numberThreads: '%(gamess-number-processors)s'\n    threadsPerCore: 1\n    gpus: '%(gamess-gpus)s'\n\n- signature:\n    name: extract-energies\n    parameters:\n    - name: gamess-working-directory\n    - name: backend\n    - name: docker-platform\n      default: \"linux/amd64\"\n  command:\n    arguments: \"%(gamess-working-directory)s\"\n    executable: bin/extract_gmsout.py\n  resourceManager:\n    config:\n      backend: '%(backend)s'\n    kubernetes:\n      image: quay.io/st4sd/community-applications/rdkit-st4sd:2019.09.1\n    docker:\n      image: quay.io/st4sd/community-applications/rdkit-st4sd:2019.09.1\n      platform: \"%(docker-platform)s\"\n`}</code></pre>\n    <p>{`You should now have the following file structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`gamess-us-pm3.package\n├── bin\n│   ├── extract_gmsout.py\n│   └── run-gamess.sh\n├── conf\n│   └── dsl.yaml\n└── hooks\n    └── semi_empirical_restart.py\n`}</code></pre>\n    <h3>{`Exercise`}</h3>\n    <p>{`Try starting your experiment now using a container runtime.`}</p>\n    <p>{`In the parent directory of `}<strong parentName=\"p\">{`gamess-us-pm3.package`}</strong>{` create your input `}<strong parentName=\"p\">{`molecule.inp`}</strong>{` file.`}</p>\n    <p>{`You can use this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` $CONTRL COORD=UNIQUE SCFTYP=RHF RUNTYP=OPTIMIZE MULT=1\n ISPHER=1 ICHARG=0 MAXIT=100 $END\n $SYSTEM MWORDS=100 TIMLIM=600 $END\n $BASIS GBASIS=PM3 $END\n $GUESS GUESS=HUCKEL $END\n $SCF DIRSCF=.t. FDIFF=.f. DIIS=.t. $END\n $STATPT NSTEP=500 PROJCT=.f. IHREP=20 HSSEND=.t. $END\n $DATA\nCH4 C CH4\n C1\n C 6.0 0.0 0.0 0.0\n H 1.0 0.1895 0.9552 -0.4946\n H 1.0 0.9509 -0.4809 0.2396\n H 1.0 -0.5631 0.1717 0.92\n H 1.0 -0.5773 -0.6461 -0.665\n $END\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`To use your own GAMESS US input file, carefully review the configuration options preceding the `}<inlineCode parentName=\"p\">{`$DATA`}</inlineCode>{` section and include them in your file. Additionally, ensure that your input is saved in a file named `}<strong parentName=\"p\">{`molecule.inp`}</strong>{`.`}</p>\n    </InlineNotification>\n    <p>{`You should now have this structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`.\n├── molecule.inp\n└── gamess-us-pm3.package\n    ├── bin\n    │   └── run-gamess.sh\n    │   └── extract_gmsout.py\n    ├── conf\n    │   └── dsl.yaml\n    └── hooks\n        └── semi_empirical_restart.py\n`}</code></pre>\n    <p>{`The command to launch the experiment is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ elaunch.py -l40 --nostamp -i molecule.inp gamess-us-pm3.package\n`}</code></pre>\n    <p>{`After a couple of minutes you should see:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`completed-on=2025-03-24 15:44:58.212321\ncost=0\ncreated-on=2025-03-24 15:44:34.036279\ncurrent-stage=stage0\nexit-status=Success\nexperiment-state=finished\nstage-progress=1.0\nstage-state=finished\nstages=['stage0']\ntotal-progress=1.0\nupdated=2025-03-24 15:45:00.865704\nupdated-on=2025-03-24 15:45:00.865704\n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`gamess-us-pm3.instance`}</strong>{` directory will have the following structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`gamess-us-pm3.instance\n├── bin\n│   ├── extract_gmsout.py\n│   └── run-gamess.sh\n├── conf\n│   ├── dsl.yaml\n│   ├── flowir_instance.yaml\n│   ├── flowir_package.yaml\n│   └── manifest.yaml\n├── elaunch.yaml\n├── hooks\n│   ├── __pycache__\n│   │   └── semi_empirical_restart.cpython-310.pyc\n│   └── semi_empirical_restart.py\n├── input\n│   └── molecule.inp\n├── output\n│   ├── experiment.log\n│   ├── output.json\n│   ├── output.txt\n│   ├── status.txt\n│   └── status_details.json\n├── python\n├── stages\n│   └── stage0\n│       ├── optimise\n│       │   ├── Run1\n│       │   │   ├── component_performance.csv\n│       │   │   ├── molecule.dat\n│       │   │   ├── molecule.inp\n│       │   │   ├── molecule.rst\n│       │   │   ├── out.stderr\n│       │   │   └── out.stdout\n│       │   ├── component_performance.csv\n│       │   ├── molecule.dat\n│       │   ├── molecule.inp\n│       │   ├── molecule.rst\n│       │   ├── out.stderr\n│       │   └── out.stdout\n│       └── parse-gamess\n│           ├── component_performance.csv\n│           ├── csv2inp.log\n│           ├── energies.csv\n│           ├── out.stderr\n│           └── out.stdout\n└── status.db\n\n`}</code></pre>\n    <p>{`Examine the files under `}<strong parentName=\"p\">{`stages/stage0/optimise`}</strong>{` and `}<strong parentName=\"p\">{`stages/stage0/parse-gamess`}</strong>{`.`}</p>\n    <p>{`These were the contents of `}<strong parentName=\"p\">{`stages/stage0/parse-gamess/energies.csv`}</strong>{` for the experiment we ran on our laptop:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`label,completed,total-energy,homo,lumo,gap,electric-moments,total-time,total-time-per-core\nmolecule,OK,-180.53313527498008,-13.641,4.245,17.886,0.000050,0.1,0.10\n`}</code></pre>\n    <h2>{`What’s next?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Learn more about writing experiments, including more advanced features and best practice `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/write-more-experiments\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`Learn how to add `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/add-interface-to-experiments\"\n        }}>{`key-outputs and interfaces`}</a>{` to your experiments`}</li>\n      <li parentName=\"ul\">{`More information on running experiments directly, i.e. via `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/direct-run\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`More information on the DSL of ST4SD i.e. how to write experiments `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/workflow-specification-dsl\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`More information on how to structure and test your experiments `}<a parentName=\"li\" {...{\n          \"href\": \"/overview/packaging-workflows/\"\n        }}>{`here`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","PageDescription","InlineNotification","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","Object","assign","mdxType","parentName","kind","isMDXComponent"],"sourceRoot":""}